[
  [
    "0",
    {
      "pageContent": "[{\"openapi\":\"3.0.1\",\"info\":{\"title\":\"Novorender Data API\",\"version\":\"v1\"},\"paths\":{\"/api/MetaData/{sceneId}/{id}\":{\"get\":{\"tags\":[\"MetaData\"],\"summary\":\"Get scene object metadata\",\"operationId\":\"Metadata\",\"parameters\":[{\"name\":\"sceneId\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"integer\",\"format\":\"int32\"}}],\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/api/MetaData/{sceneId}/search\":{\"post\":{\"tags\":[\"MetaData\"],\"summary\":\"Search objects in scene\",\"description\":\"Returns subset of objects matched complicated search criterias with continuation token\",\"operationId\":\"Search\",\"parameters\":[{\"name\":\"sceneId\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"requestBody\":{\"description\":\"The search payload\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/search\"}}},\"required\":true},\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/api/Resources\":{\"get\":{\"tags\":[\"Resources\"],\"summary\":\"Get all organization",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "1",
    {
      "pageContent": "all organization resources\",\"operationId\":\"GetResources\",\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"text/plain\":{\"schema\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/resourceInfo\"}}},\"application/json\":{\"schema\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/resourceInfo\"}}},\"text/json\":{\"schema\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/resourceInfo\"}}}}}}},\"post\":{\"tags\":[\"Resources\"],\"summary\":\"Update or add resource info\",\"operationId\":\"PostResource\",\"requestBody\":{\"content\":{\"application/json-patch+json\":{\"schema\":{\"$ref\":\"#/components/schemas/resourceInfo\"}},\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/resourceInfo\"}},\"text/json\":{\"schema\":{\"$ref\":\"#/components/schemas/resourceInfo\"}},\"application/*+json\":{\"schema\":{\"$ref\":\"#/components/schemas/resourceInfo\"}}}},\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/api/Resources/{id}\":{\"delete\":{\"tags\":[\"Resources\"],\"summary\":\"Delete",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "2",
    {
      "pageContent": "resource\",\"operationId\":\"DeleteResource\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"Success\"}}},\"get\":{\"tags\":[\"Resources\"],\"summary\":\"Get resource's preview info\",\"description\":\"Preview info contains url of GLB/GLTF preview file. This could be used for live resource preview.\",\"operationId\":\"PreviewResource\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/api/Resources/{id}/download\":{\"get\":{\"tags\":[\"Resources\"],\"summary\":\"Get download url of original resource file\",\"operationId\":\"OriginalResource\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/api/upload/{taskId}\":{\"get\":{\"tags\":[\"Resources\"],\"summary\":\"Get upload url for new resource file\",\"operationId\":\"UploadResource\",\"parameters\":[{\"name\":\"taskId\",\"description\":\"Some generated unique task id for resource processing task.",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "3",
    {
      "pageContent": "upload url for new resource file\",\"operationId\":\"UploadResource\",\"parameters\":[{\"name\":\"taskId\",\"description\":\"Some generated unique task id for resource processing task. Same task id must be used later on resource creation step. Usually using timestamp\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"Returns blob uri with temporary sas token to upload resource file.\"}}}},\"/api/resource/{taskId}\":{\"post\":{\"tags\":[\"Resources\"],\"summary\":\"Create resource from previously upload file. See /api/upload.  Requires admin privileges.\",\"operationId\":\"CreateResource\",\"parameters\":[{\"name\":\"taskId\",\"description\":\"Some generated unique task id for resource processing task. Same task id must be used in upload step. Usually using timestamp\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"fileName\",\"description\":\"Original uploaded file name\",\"in\":\"query\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"size\",\"description\":\"Size of upload file in round",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "4",
    {
      "pageContent": "uploaded file name\",\"in\":\"query\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"size\",\"description\":\"Size of upload file in round MB\",\"in\":\"query\",\"required\":true,\"schema\":{\"type\":\"integer\",\"format\":\"int32\"}},{\"name\":\"revision\",\"description\":\"Original resource id to be revisioned with this resource\",\"in\":\"query\",\"schema\":{\"type\":\"string\"}},{\"name\":\"path\",\"description\":\"Path in resources hierarchy\",\"in\":\"query\",\"schema\":{\"type\":\"string\"}},{\"name\":\"name\",\"description\":\"Name of resource if it will deferes from original file name\",\"in\":\"query\",\"schema\":{\"type\":\"string\"}},{\"name\":\"split\",\"description\":\"Signals if uploaded Zip/7z file should be splitted to independent resource\",\"in\":\"query\",\"schema\":{\"type\":\"boolean\"}},{\"name\":\"force\",\"description\":\"Forces rebuild of resource even if resource with same hash was already created\",\"in\":\"query\",\"schema\":{\"type\":\"boolean\"}}],\"responses\":{\"202\":{\"description\":\"Resource creation process started.\"}}}},\"/api/progress/{taskId}\":{\"get\":{\"tags\":[\"Resources\"],\"summary\":\"Gets progress of resource creation",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "5",
    {
      "pageContent": "creation process started.\"}}}},\"/api/progress/{taskId}\":{\"get\":{\"tags\":[\"Resources\"],\"summary\":\"Gets progress of resource creation process.\",\"operationId\":\"ResourceProgress\",\"parameters\":[{\"name\":\"taskId\",\"description\":\"Some generated unique task id for resource processing task. Same task id must be used in resource creation step. Usually using timestamp\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"position\",\"description\":\"Previously returned position of log\",\"in\":\"query\",\"schema\":{\"type\":\"integer\",\"format\":\"int32\"}}],\"responses\":{\"200\":{\"description\":\"Resource creation process progress.\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/progressInfo\"}},\"text/json\":{\"schema\":{\"$ref\":\"#/components/schemas/progressInfo\"}}}}}}},\"/api/process/{taskId}\":{\"get\":{\"tags\":[\"Resources\"],\"summary\":\"Gets result of resource creation process.\",\"operationId\":\"ResourceProcessResult\",\"parameters\":[{\"name\":\"taskId\",\"description\":\"Some generated unique task id for resource processing task. Same task id must be used",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "6",
    {
      "pageContent": "result of resource creation process.\",\"operationId\":\"ResourceProcessResult\",\"parameters\":[{\"name\":\"taskId\",\"description\":\"Some generated unique task id for resource processing task. Same task id must be used in resource creation step. Usually using timestamp\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"Resource creation process result.\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/createdResourceInfo\"}},\"text/json\":{\"schema\":{\"$ref\":\"#/components/schemas/createdResourceInfo\"}}}}}}},\"/api/Scenes\":{\"get\":{\"tags\":[\"Scenes\"],\"summary\":\"Gets available scenes\",\"operationId\":\"GetScenes\",\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"text/plain\":{\"schema\":{\"type\":\"array\",\"items\":{}}},\"application/json\":{\"schema\":{\"type\":\"array\",\"items\":{}}},\"text/json\":{\"schema\":{\"type\":\"array\",\"items\":{}}}}}}}},\"/api/Scenes/{id}\":{\"delete\":{\"tags\":[\"Scenes\"],\"summary\":\"Deletes scene\",\"description\":\"Requires admin",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "7",
    {
      "pageContent": "scene\",\"description\":\"Requires admin privileges\",\"operationId\":\"DeleteScene\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"Success\"}}},\"get\":{\"tags\":[\"Scenes\"],\"summary\":\"Gets scene data\",\"operationId\":\"GetScene\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"Success\"}}},\"post\":{\"tags\":[\"Scenes\"],\"summary\":\"Saves scene data\",\"description\":\"Requires admin",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "8",
    {
      "pageContent": "scene data\",\"description\":\"Requires admin privileges\",\"operationId\":\"SaveScene\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"title\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"mainscene\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"requestBody\":{\"content\":{\"application/json-patch+json\":{\"schema\":{}},\"application/json\":{\"schema\":{}},\"text/json\":{\"schema\":{}},\"application/*+json\":{\"schema\":{}}}},\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/api/Scenes/{id}/isviewer\":{\"get\":{\"tags\":[\"Scenes\"],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"text/plain\":{\"schema\":{\"type\":\"boolean\"}},\"application/json\":{\"schema\":{\"type\":\"boolean\"}},\"text/json\":{\"schema\":{\"type\":\"boolean\"}}}}}}},\"/api/Scenes/{id}/config\":{\"get\":{\"tags\":[\"Scenes\"],\"summary\":\"Gets scene config\",\"description\":\"This config is using for scene creation/rebuilding.",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "9",
    {
      "pageContent": "scene config\",\"description\":\"This config is using for scene creation/rebuilding. Requires admin privileges.\",\"operationId\":\"SceneConfig\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/api/Scenes/{id}/group/{groupId}\":{\"get\":{\"tags\":[\"Scenes\"],\"summary\":\"Gets scene's object group ids\",\"description\":\"Returns object group ids array. Needed on demand if group ids array is null on load of scene data.\",\"operationId\":\"SceneGroup\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"groupId\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/api/Scenes/{id}/bookmarks\":{\"get\":{\"tags\":[\"Bookmarks\"],\"summary\":\"Gets scene's",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "10",
    {
      "pageContent": "scene's bookmarks\",\"operationId\":\"SceneBookmarks\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"group\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"Success\"}}},\"post\":{\"tags\":[\"Bookmarks\"],\"summary\":\"Saves scene's bookmarks\",\"description\":\"Requires write access privileges\",\"operationId\":\"SaveSceneBookmarks\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"group\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"requestBody\":{\"content\":{\"application/json-patch+json\":{\"schema\":{}},\"application/json\":{\"schema\":{}},\"text/json\":{\"schema\":{}},\"application/*+json\":{\"schema\":{}}}},\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/api/Scenes/{id}/bookmarks/{group}\":{\"get\":{\"tags\":[\"Bookmarks\"],\"summary\":\"Gets scene's bookmarks",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "11",
    {
      "pageContent": "scene's bookmarks group\",\"operationId\":\"SceneBookmarksGroup\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"group\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"Success\"}}},\"post\":{\"tags\":[\"Bookmarks\"],\"summary\":\"Saves scene's bookmarks group\",\"description\":\"Requires write access privileges\",\"operationId\":\"SaveSceneBookmarksGroup\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"group\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"requestBody\":{\"content\":{\"application/json-patch+json\":{\"schema\":{}},\"application/json\":{\"schema\":{}},\"text/json\":{\"schema\":{}},\"application/*+json\":{\"schema\":{}}}},\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/api/Scenes/{id}/personalbookmarks\":{\"get\":{\"tags\":[\"Bookmarks\"],\"summary\":\"Gets authenticated user's personal scene's",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "12",
    {
      "pageContent": "authenticated user's personal scene's bookmarks\",\"operationId\":\"ScenePersonalBookmarks\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"group\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"Success\"}}},\"post\":{\"tags\":[\"Bookmarks\"],\"summary\":\"Saves authenticated user's personal scene's bookmarks\",\"operationId\":\"SaveScenePersonalBookmarks\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"group\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"requestBody\":{\"content\":{\"application/json-patch+json\":{\"schema\":{}},\"application/json\":{\"schema\":{}},\"text/json\":{\"schema\":{}},\"application/*+json\":{\"schema\":{}}}},\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/api/Scenes/{id}/personalbookmarks/{group}\":{\"get\":{\"tags\":[\"Bookmarks\"],\"summary\":\"Gets authenticated user's personal scene's bookmarks",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "13",
    {
      "pageContent": "authenticated user's personal scene's bookmarks group\",\"operationId\":\"ScenePersonalBookmarksGroup\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"group\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"Success\"}}},\"post\":{\"tags\":[\"Bookmarks\"],\"summary\":\"Saves authenticated user's personal scene's bookmarks group\",\"operationId\":\"SaveScenePersonalBookmarksGroup\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"group\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"requestBody\":{\"content\":{\"application/json-patch+json\":{\"schema\":{}},\"application/json\":{\"schema\":{}},\"text/json\":{\"schema\":{}},\"application/*+json\":{\"schema\":{}}}},\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/api/Scenes/{id}/{title}\":{\"post\":{\"tags\":[\"Scenes\"],\"summary\":\"Saves scene data with title\",\"description\":\"Requires admin",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "14",
    {
      "pageContent": "scene data with title\",\"description\":\"Requires admin privileges\",\"operationId\":\"SaveSceneWithTitle\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"title\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"mainscene\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"requestBody\":{\"content\":{\"application/json-patch+json\":{\"schema\":{}},\"application/json\":{\"schema\":{}},\"text/json\":{\"schema\":{}},\"application/*+json\":{\"schema\":{}}}},\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/api/Scenes/{id}/{title}/{mainscene}\":{\"post\":{\"tags\":[\"Scenes\"],\"summary\":\"Saves viewer scene data with title\",\"description\":\"Requires admin",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "15",
    {
      "pageContent": "viewer scene data with title\",\"description\":\"Requires admin privileges\",\"operationId\":\"SaveViewerSceneWithTitle\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"title\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"mainscene\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"requestBody\":{\"content\":{\"application/json-patch+json\":{\"schema\":{}},\"application/json\":{\"schema\":{}},\"text/json\":{\"schema\":{}},\"application/*+json\":{\"schema\":{}}}},\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/api/Scenes/revise\":{\"post\":{\"tags\":[\"Scenes\"],\"summary\":\"Revise scene\",\"description\":\"Modifies scene. Could add, remove, replace (apply new revision) and reposition resources assets in scene. Requires admin",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "16",
    {
      "pageContent": "scene\",\"description\":\"Modifies scene. Could add, remove, replace (apply new revision) and reposition resources assets in scene. Requires admin privileges.\",\"operationId\":\"ReviseScene\",\"requestBody\":{\"content\":{\"application/json-patch+json\":{\"schema\":{}},\"application/json\":{\"schema\":{}},\"text/json\":{\"schema\":{}},\"application/*+json\":{\"schema\":{}}}},\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/api/Scenes/bim360\":{\"get\":{\"tags\":[\"Scenes\"],\"responses\":{\"200\":{\"description\":\"Success\"}}},\"post\":{\"tags\":[\"Scenes\"],\"requestBody\":{\"content\":{\"application/json-patch+json\":{\"schema\":{}},\"application/json\":{\"schema\":{}},\"text/json\":{\"schema\":{}},\"application/*+json\":{\"schema\":{}}}},\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"text/plain\":{\"schema\":{\"type\":\"boolean\"}},\"application/json\":{\"schema\":{\"type\":\"boolean\"}},\"text/json\":{\"schema\":{\"type\":\"boolean\"}}}}}}},\"/api/user\":{\"get\":{\"tags\":[\"User\"],\"summary\":\"Gets logged-in user",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "17",
    {
      "pageContent": "logged-in user info\",\"operationId\":\"User\",\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/api/user/login\":{\"post\":{\"tags\":[\"User\"],\"summary\":\"Login\",\"description\":\"Login using User name and Password. Returned token could be used directly to access data\",\"operationId\":\"Login\",\"parameters\":[{\"name\":\"UserName\",\"in\":\"query\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"Password\",\"in\":\"query\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/api/user/token\":{\"get\":{\"tags\":[\"User\"],\"summary\":\"Get access token\",\"description\":\"Return access token based on AD (or UserName/Password) login",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "18",
    {
      "pageContent": "access token\",\"description\":\"Return access token based on AD (or UserName/Password) login token\",\"operationId\":\"Token\",\"responses\":{\"200\":{\"description\":\"Success\"}}}}},\"components\":{\"schemas\":{\"range\":{\"type\":\"object\",\"properties\":{\"min\":{\"type\":\"string\",\"nullable\":true},\"max\":{\"type\":\"string\",\"nullable\":true}},\"minProperties\":1,\"additionalProperties\":false},\"resourceInfo\":{\"type\":\"object\",\"properties\":{\"organization\":{\"type\":\"string\"},\"id\":{\"type\":\"string\"},\"lastModified\":{\"type\":\"string\",\"format\":\"date-time\",\"readOnly\":true},\"created\":{\"type\":\"string\",\"format\":\"date-time\"},\"original\":{\"type\":\"string\"},\"title\":{\"type\":\"string\"},\"revision\":{\"type\":\"string\"},\"path\":{\"type\":\"string\"},\"tags\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"},\"size\":{\"type\":\"integer\",\"format\":\"int64\"},\"deleted\":{\"type\":\"boolean\"}},\"additionalProperties\":false},\"progressInfo\":{\"type\":\"object\",\"properties\":{\"text\":{\"type\":\"string\",\"description\":\"New text in log\"},\"position\":{\"type\":\"integer\",\"format\":\"int64\",\"description\":\"last",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "19",
    {
      "pageContent": "text in log\"},\"position\":{\"type\":\"integer\",\"format\":\"int64\",\"description\":\"last read log position. should be used in next progress request.\"},\"complete\":{\"type\":\"boolean\",\"description\":\"Resource creation process complete.\"}},\"additionalProperties\":false},\"createdResourceInfo\":{\"type\":\"object\",\"properties\":{\"hash\":{\"type\":\"string\",\"description\":\"New resource id\"},\"name\":{\"type\":\"string\",\"description\":\"New resource name\"},\"original\":{\"type\":\"string\",\"description\":\"New resource original file",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "20",
    {
      "pageContent": "resource id\"},\"name\":{\"type\":\"string\",\"description\":\"New resource name\"},\"original\":{\"type\":\"string\",\"description\":\"New resource original file name\"}},\"additionalProperties\":false},\"pattern\":{\"type\":\"object\",\"properties\":{\"property\":{\"type\":\"string\"},\"exact\":{\"type\":\"boolean\"},\"exclude\":{\"type\":\"boolean\"},\"value\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"array\",\"items\":{\"type\":\"string\"}}]},\"range\":{\"$ref\":\"#/components/schemas/range\"}},\"minProperties\":1,\"additionalProperties\":false},\"search\":{\"type\":\"object\",\"properties\":{\"path\":{\"type\":\"string\"},\"descendants\":{\"type\":\"integer\",\"format\":\"int32\"},\"full\":{\"type\":\"boolean\"},\"continuation\":{\"type\":\"string\"},\"search\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/pattern\"}}]}},\"minProperties\":1,\"additionalProperties\":false}},\"securitySchemes\":{\"Bearer\":{\"type\":\"apiKey\",\"description\":\"Please insert JWT with Bearer into",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "21",
    {
      "pageContent": "insert JWT with Bearer into field\",\"name\":\"Authorization\",\"in\":\"header\"}}},\"security\":[{\"Bearer\":[]}],\"servers\":[{\"url\":\"https://data.novorender.com/\",\"description\":\"Novorender Data server url\"}],\"tags\":[{\"name\":\"MetaData\",\"description\":\"Scene objects database access\"},{\"name\":\"Resources\",\"description\":\"Access to organization resources. Requires admin rights.\"},{\"name\":\"Scenes\",\"description\":\"Work with scenes and their bookmarks and groups\"},{\"name\":\"User\",\"description\":\"Authenticate and authorize users\"}]},{\"openapi\":\"3.0.1\",\"info\":{\"title\":\"Novorender Data API\",\"version\":\"v2\"},\"servers\":[{\"url\":\"https://data.novorender.com\",\"description\":\"Novorender Data Server\"}],\"paths\":{\"/api/MetaData/{sceneId}/{id}\":{\"get\":{\"tags\":[\"MetaData\"],\"summary\":\"Get scene object",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "22",
    {
      "pageContent": "Data Server\"}],\"paths\":{\"/api/MetaData/{sceneId}/{id}\":{\"get\":{\"tags\":[\"MetaData\"],\"summary\":\"Get scene object metadata\",\"operationId\":\"Metadata\",\"parameters\":[{\"name\":\"sceneId\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"integer\",\"format\":\"int32\"}}],\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/api/MetaData/{sceneId}/search\":{\"post\":{\"tags\":[\"MetaData\"],\"summary\":\"Search objects in scene\",\"description\":\"Returns subset of objects matched complicated search criterias with continuation token\",\"operationId\":\"Search\",\"parameters\":[{\"name\":\"sceneId\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"requestBody\":{\"content\":{\"application/json\":{\"schema\":{}}}},\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/v2/organizations\":{\"get\":{\"tags\":[\"Organization\"],\"summary\":\"Gets user's organizations and",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "23",
    {
      "pageContent": "user's organizations and roles\",\"operationId\":\"Org\",\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{}}}}}},\"/v2/user\":{\"get\":{\"tags\":[\"User\"],\"summary\":\"Get user's info\",\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{}}}}}},\"/v2/organizations/{id}\":{\"get\":{\"tags\":[\"Organization\"],\"summary\":\"Get organization info\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{}}}}}},\"/v2/organizations/{id}/projects\":{\"get\":{\"tags\":[\"Organization\"],\"summary\":\"Get available projects for user within organization with roles\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{}}}}}},\"/v2/organizations/{id}/roles\":{\"get\":{\"tags\":[\"Organization\"],\"summary\":\"Get all assigned roles for organization\",\"description\":\"Require admin",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "24",
    {
      "pageContent": "all assigned roles for organization\",\"description\":\"Require admin rights\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{}}}}},\"post\":{\"tags\":[\"Organization\"],\"summary\":\"Assign role for user/group/tenant in organization\",\"description\":\"Require admin rights\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"requestBody\":{\"content\":{\"application/json-patch+json\":{\"schema\":{\"$ref\":\"#/components/schemas/RoleInOrganization\"}},\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/RoleInOrganization\"}},\"text/json\":{\"schema\":{\"$ref\":\"#/components/schemas/RoleInOrganization\"}},\"application/*+json\":{\"schema\":{\"$ref\":\"#/components/schemas/RoleInOrganization\"}}}},\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{}}}}}},\"/v2/organizations/{id}/roles/{identity}\":{\"patch\":{\"tags\":[\"Organization\"],\"summary\":\"Update role for user/group/tenant",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "25",
    {
      "pageContent": "role for user/group/tenant in organization\",\"description\":\"Require admin rights\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"identity\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"requestBody\":{\"content\":{\"application/json-patch+json\":{\"schema\":{\"$ref\":\"#/components/schemas/RoleInOrganizationPatch\"}},\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/RoleInOrganizationPatch\"}},\"text/json\":{\"schema\":{\"$ref\":\"#/components/schemas/RoleInOrganizationPatch\"}},\"application/*+json\":{\"schema\":{\"$ref\":\"#/components/schemas/RoleInOrganizationPatch\"}}}},\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{}}}}},\"delete\":{\"tags\":[\"Organization\"],\"summary\":\"Delete role for user/group/tenant in organization\",\"description\":\"Require admin",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "26",
    {
      "pageContent": "role for user/group/tenant in organization\",\"description\":\"Require admin rights\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"identity\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{}}}}}},\"/v2/organizations/{id}/customroles\":{\"get\":{\"tags\":[\"Organization\"],\"summary\":\"Get all custom common roles for organization\",\"description\":\"Require admin rights\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{}}}}},\"post\":{\"tags\":[\"Organization\"],\"summary\":\"Add custom role for organization\",\"description\":\"Require admin",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "27",
    {
      "pageContent": "custom role for organization\",\"description\":\"Require admin rights\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"requestBody\":{\"content\":{\"application/json-patch+json\":{\"schema\":{\"$ref\":\"#/components/schemas/CustomRole\"}},\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/CustomRole\"}},\"text/json\":{\"schema\":{\"$ref\":\"#/components/schemas/CustomRole\"}},\"application/*+json\":{\"schema\":{\"$ref\":\"#/components/schemas/CustomRole\"}}}},\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{}}}}}},\"/v2/organizations/{id}/customroles/{role}\":{\"patch\":{\"tags\":[\"Organization\"],\"summary\":\"Update custom role for organization\",\"description\":\"Require admin",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "28",
    {
      "pageContent": "custom role for organization\",\"description\":\"Require admin rights\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"role\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"requestBody\":{\"content\":{\"application/json-patch+json\":{\"schema\":{\"$ref\":\"#/components/schemas/CustomRolePatch\"}},\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/CustomRolePatch\"}},\"text/json\":{\"schema\":{\"$ref\":\"#/components/schemas/CustomRolePatch\"}},\"application/*+json\":{\"schema\":{\"$ref\":\"#/components/schemas/CustomRolePatch\"}}}},\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{}}}}},\"delete\":{\"tags\":[\"Organization\"],\"summary\":\"Delete custom common role for organization\",\"description\":\"Require admin",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "29",
    {
      "pageContent": "custom common role for organization\",\"description\":\"Require admin rights\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"role\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{}}}}}},\"/v2/projects/{id}/customroles\":{\"get\":{\"tags\":[\"Project\"],\"summary\":\"Get all custom role for project including organization's custom common roles\",\"description\":\"Require project admin rights\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{}}}}},\"post\":{\"tags\":[\"Project\"],\"summary\":\"Add custom role for project\",\"description\":\"Require project admin",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "30",
    {
      "pageContent": "custom role for project\",\"description\":\"Require project admin rights\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"requestBody\":{\"content\":{\"application/json-patch+json\":{\"schema\":{\"$ref\":\"#/components/schemas/CustomRole\"}},\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/CustomRole\"}},\"text/json\":{\"schema\":{\"$ref\":\"#/components/schemas/CustomRole\"}},\"application/*+json\":{\"schema\":{\"$ref\":\"#/components/schemas/CustomRole\"}}}},\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{}}}}}},\"/v2/projects/{id}/customroles/{role}\":{\"patch\":{\"tags\":[\"Project\"],\"summary\":\"Update custom role for project\",\"description\":\"Require project admin",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "31",
    {
      "pageContent": "custom role for project\",\"description\":\"Require project admin rights\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"role\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"requestBody\":{\"content\":{\"application/json-patch+json\":{\"schema\":{\"$ref\":\"#/components/schemas/CustomRole\"}},\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/CustomRole\"}},\"text/json\":{\"schema\":{\"$ref\":\"#/components/schemas/CustomRole\"}},\"application/*+json\":{\"schema\":{\"$ref\":\"#/components/schemas/CustomRole\"}}}},\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{}}}}},\"delete\":{\"tags\":[\"Project\"],\"summary\":\"Delete custom role for project\",\"description\":\"Require project admin",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "32",
    {
      "pageContent": "custom role for project\",\"description\":\"Require project admin rights\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"role\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{}}}}}},\"/v2/projects/{id}/roles\":{\"get\":{\"tags\":[\"Project\"],\"summary\":\"Get all assigned roles for project\",\"description\":\"Require admin rights\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{}}}}},\"post\":{\"tags\":[\"Project\"],\"summary\":\"Assign role for user/group/tenant in project\",\"description\":\"Require admin",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "33",
    {
      "pageContent": "role for user/group/tenant in project\",\"description\":\"Require admin rights\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"requestBody\":{\"content\":{\"application/json-patch+json\":{\"schema\":{\"$ref\":\"#/components/schemas/RoleInProject\"}},\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/RoleInProject\"}},\"text/json\":{\"schema\":{\"$ref\":\"#/components/schemas/RoleInProject\"}},\"application/*+json\":{\"schema\":{\"$ref\":\"#/components/schemas/RoleInProject\"}}}},\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{}}}}}},\"/v2/projects/{id}/roles/{identity}\":{\"patch\":{\"tags\":[\"Project\"],\"summary\":\"Update role for user/group/tenant in project\",\"description\":\"Require admin",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "34",
    {
      "pageContent": "role for user/group/tenant in project\",\"description\":\"Require admin rights\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"identity\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"requestBody\":{\"content\":{\"application/json-patch+json\":{\"schema\":{\"$ref\":\"#/components/schemas/RoleInProjectPatch\"}},\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/RoleInProjectPatch\"}},\"text/json\":{\"schema\":{\"$ref\":\"#/components/schemas/RoleInProjectPatch\"}},\"application/*+json\":{\"schema\":{\"$ref\":\"#/components/schemas/RoleInProjectPatch\"}}}},\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{}}}}},\"delete\":{\"tags\":[\"Project\"],\"summary\":\"Delete role for user/group/tenant in project\",\"description\":\"Require admin",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "35",
    {
      "pageContent": "rights\",\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"identity\",\"in\":\"path\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{}}}}}}},\"components\":{\"schemas\":{\"CustomRole\":{\"type\":\"object\",\"properties\":{\"role\":{\"type\":\"string\",\"nullable\":true},\"description\":{\"type\":\"string\",\"nullable\":true}},\"additionalProperties\":false},\"CustomRolePatch\":{\"type\":\"object\",\"properties\":{\"description\":{\"type\":\"string\",\"nullable\":true}},\"additionalProperties\":false},\"OrganizationRole\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"nullable\":true},\"role\":{\"type\":\"string\",\"nullable\":true}},\"additionalProperties\":false},\"RoleInOrganization\":{\"type\":\"object\",\"properties\":{\"identity\":{\"type\":\"string\",\"nullable\":true},\"role\":{\"type\":\"string\",\"nullable\":true}},\"additionalProperties\":false},\"RoleInOrganizationPatch\":{\"type\":\"object\",\"properties\":{\"role\":{\"type\":\"string\",\"nullable\":true}},\"ad",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  [
    "36",
    {
      "pageContent": "\"string\",\"nullable\":true},\"role\":{\"type\":\"string\",\"nullable\":true}},\"additionalProperties\":false},\"RoleInOrganizationPatch\":{\"type\":\"object\",\"properties\":{\"role\":{\"type\":\"string\",\"nullable\":true}},\"additionalProperties\":false},\"RoleInProject\":{\"type\":\"object\",\"properties\":{\"identity\":{\"type\":\"string\",\"nullable\":true},\"role\":{\"type\":\"string\",\"nullable\":true}},\"additionalProperties\":false},\"RoleInProjectPatch\":{\"type\":\"object\",\"properties\":{\"role\":{\"type\":\"string\",\"nullable\":true}},\"additionalProperties\":false}},\"securitySchemes\":{\"oauth2\":{\"type\":\"oauth2\",\"flows\":{\"authorizationCode\":{\"authorizationUrl\":\"https://auth.novorender.com/auth\",\"tokenUrl\":\"https://auth.novorender.com/token\",\"scopes\":{}}}}}},\"security\":[{\"oauth2\":[]}],\"tags\":[{\"name\":\"MetaData\",\"description\":\"Scene",
      "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } }
    }
  ],
  ["37", { "pageContent": "objects database access\"},{\"name\":\"Organization\",\"description\":\"Organization access\"},{\"name\":\"Project\",\"description\":\"Project access\"}]}]", "metadata": { "loc": { "lines": { "from": 1, "to": 1 } } } }],
  [
    "38",
    {
      "pageContent": "---\nid: \"DataJsAPI.AccessType\"\ntitle: \"Data JS API\"\nsidebar_label: \"AccessType\"\ncustom_edit_url: null\ndescription: \"A Data JS API for managing scalable Novorender 3D rendering in the cloud.\"\n---\n\n[DataJsAPI](../namespaces/DataJsAPI.md).AccessType\n\nScene Access level\n\n## Enumeration Members\n\n### Read\n\n• **Read** = ``0``\n\nRead only access\n\n___\n\n### ReadWrite\n\n• **ReadWrite** = ``1``\n\nRead/write access",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/enums/DataJsAPI.AccessType.md", "loc": { "lines": { "from": 1, "to": 27 } } }
    }
  ],
  [
    "39",
    {
      "pageContent": "---\nid: \"index\"\ntitle: \"Data JS API\"\nsidebar_label: \"Readme\"\nsidebar_position: 0\ncustom_edit_url: null\ndescription: \"A Data JS API for managing scalable Novorender 3D rendering in the cloud.\"\n---\n\n<img src=\"https://novorender.com/wp-content/uploads/2021/06/novorender_logo_RGB_2021.png\"/>\n\n# [NovoRender](http://novorender.com/)\n\n> A Data JS API for managing scalable Novorender 3D rendering in the cloud.\n\n[![Latest NPM Version](https://img.shields.io/npm/v/@novorender/data-js-api.svg?label=@novorender/data-js-api)](https://www.npmjs.com/package/@novorender/data-js-api)  \r\nBuild version: 0.2.25  \r\nBuild date: Fri, 03 Feb 2023 08:08:49 GMT  \n\n### NPM Module",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/index.md", "loc": { "lines": { "from": 1, "to": 20 } } }
    }
  ],
  [
    "40",
    {
      "pageContent": "Installation\n\nData JS API is available as an [NPM](https://www.npmjs.com/package/@novorender/data-js-api) package. You can install Data JS API in your project's directory with npm:\n\n```bash\r\n$ npm install @novorender/data-js-api\r\n```\n\nFor bleeding edge builds:\n\n```bash\r\n$ npm install @novorender/data-js-api@next\r\n```\n\nThe package contains pre-bundled ES6 and UMD modules and typescript definition file that you can use for both local development and include in your web deployment.\n\n## Further information\n\nData JS API is a wrapper for REST API, please visit [data.novorender.com](https://data.novorender.com/swagger).",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/index.md", "loc": { "lines": { "from": 22, "to": 40 } } }
    }
  ],
  [
    "41",
    {
      "pageContent": "---\nid: \"DataJsAPI.API\"\ntitle: \"Data JS API\"\nsidebar_label: \"API\"\ncustom_edit_url: null\ndescription: \"A Data JS API for managing scalable Novorender 3D rendering in the cloud.\"\n---\n\n[DataJsAPI](../namespaces/DataJsAPI.md).API",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.API.md", "loc": { "lines": { "from": 1, "to": 9 } } }
    }
  ],
  [
    "42",
    {
      "pageContent": "Methods\n\n### createScene\n\n▸ **createScene**(`scene`): `Promise`<{ `error?`: `string` ; `success?`: `boolean`  }\\>\n\nCreate scene\n\n**`Remarks`**\n\nOnly administrator may reate a scene.\r\nDefinition automatically saves to storage for future use.\n\n**`Throws`**\n\nError in case of insufficient access rights.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `scene` | [`SceneDefinition`](DataJsAPI.SceneDefinition.md) | [SceneDefinition](DataJsAPI.SceneDefinition.md) |\n\n#### Returns\n\n`Promise`<{ `error?`: `string` ; `success?`: `boolean`  }\\>\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.API.md", "loc": { "lines": { "from": 11, "to": 38 } } }
    }
  ],
  [
    "43",
    {
      "pageContent": "deleteResource\n\n▸ **deleteResource**(`id`): `Promise`<`boolean`\\>\n\nDelete the specified resource from cloud storage.\n\n**`Remarks`**\n\nOnly administrator may delete a resource.\n\n**`Throws`**\n\nError in case of insufficient access rights.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `id` | `string` | The resource id (guid) |\n\n#### Returns\n\n`Promise`<`boolean`\\>\n\nA boolean promise indicating when the operation is complete succesfully/failed.\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.API.md", "loc": { "lines": { "from": 40, "to": 66 } } }
    }
  ],
  [
    "44",
    {
      "pageContent": "deleteScene\n\n▸ **deleteScene**(`id`): `Promise`<`boolean`\\>\n\nDelete the specified scene from cloud storage.\n\n**`Remarks`**\n\nOnly scene owners may delete a scene.\r\nThe scene will be permanently lost and any references to it becomes invalid.\n\n**`Throws`**\n\nError in case of insufficient access rights.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `id` | `string` | The scene id (guid) |\n\n#### Returns\n\n`Promise`<`boolean`\\>\n\nA boolean promise indicating when the operation is complete succesfully/failed.\n\n___\n\n### fetch\n\n▸ **fetch**(`path`, `init?`): `Promise`<`Response`\\>\n\nRelative custom path request\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `path` | `string` |\n| `init?` | `RequestInit` |\n\n#### Returns\n\n`Promise`<`Response`\\>\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.API.md", "loc": { "lines": { "from": 68, "to": 114 } } }
    }
  ],
  [
    "45",
    {
      "pageContent": "getBookmarks\n\n▸ **getBookmarks**(`id`, `options?`): `Promise`<[`Bookmark`](DataJsAPI.Bookmark-1.md)[]\\>\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `id` | `string` |\n| `options?` | `Object` |\n| `options.group?` | `string` |\n| `options.personal?` | `boolean` |\n\n#### Returns\n\n`Promise`<[`Bookmark`](DataJsAPI.Bookmark-1.md)[]\\>\n\n___\n\n### getGroupIds\n\n▸ **getGroupIds**(`sceneId`, `id`): `Promise`<`number`[]\\>\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `sceneId` | `string` |\n| `id` | `string` |\n\n#### Returns\n\n`Promise`<`number`[]\\>\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.API.md", "loc": { "lines": { "from": 116, "to": 150 } } }
    }
  ],
  [
    "46",
    {
      "pageContent": "getProcessProgress\n\n▸ **getProcessProgress**(`id`, `position?`, `signal?`): `Promise`<[`ProcessProgress`](DataJsAPI.ProcessProgress.md)\\>\n\nGet process progress\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `id` | `string` | A process id |\n| `position?` | `number` | A position returned by previous process progress |\n| `signal?` | `AbortSignal` | - |\n\n#### Returns\n\n`Promise`<[`ProcessProgress`](DataJsAPI.ProcessProgress.md)\\>\n\nState of process [ProcessProgress](DataJsAPI.ProcessProgress.md)\n\n___\n\n### getProcesses\n\n▸ **getProcesses**(): `Promise`<readonly [`ActiveProcess`](DataJsAPI.ActiveProcess.md)[]\\>\n\nGet list of active processes.\n\n#### Returns\n\n`Promise`<readonly [`ActiveProcess`](DataJsAPI.ActiveProcess.md)[]\\>\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.API.md", "loc": { "lines": { "from": 152, "to": 184 } } }
    }
  ],
  [
    "47",
    {
      "pageContent": "getResource\n\n▸ **getResource**(`id`): `Promise`<[`ResourcePreview`](DataJsAPI.ResourcePreview.md)\\>\n\nGet preview of the specified resource from cloud storage.\n\n**`Remarks`**\n\nOnly administrator may access resources.\n\n**`Throws`**\n\nError in case of insufficient access rights.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `id` | `string` | The scene id (guid) |\n\n#### Returns\n\n`Promise`<[`ResourcePreview`](DataJsAPI.ResourcePreview.md)\\>\n\nReturns [ResourcePreview](DataJsAPI.ResourcePreview.md)\n\n___\n\n### getResources\n\n▸ **getResources**(): `Promise`<[`Resource`](DataJsAPI.Resource.md)[]\\>\n\nGet list of available resources.\n\n**`Remarks`**\n\nThe list contains only those resources available to the currently authenticated user.\r\nOnly administrator could access to resources.\n\n#### Returns\n\n`Promise`<[`Resource`](DataJsAPI.Resource.md)[]\\>\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.API.md", "loc": { "lines": { "from": 186, "to": 229 } } }
    }
  ],
  [
    "48",
    {
      "pageContent": "getSceneDefinition\n\n▸ **getSceneDefinition**(`id`): `Promise`<[`SceneDefinition`](DataJsAPI.SceneDefinition.md)\\>\n\nGet saved scene definition using for [createScene](DataJsAPI.API.md#createscene)\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `id` | `string` |\n\n#### Returns\n\n`Promise`<[`SceneDefinition`](DataJsAPI.SceneDefinition.md)\\>\n\n___\n\n### getScenes\n\n▸ **getScenes**(): `Promise`<readonly [`ScenePreview`](DataJsAPI.ScenePreview.md)[]\\>\n\nGet list of available scenes.\n\n**`Remarks`**\n\nThe list contains only those scenes available to the currently authenticated user.\r\nFor anonymous users, only public scenes are available.\n\n#### Returns\n\n`Promise`<readonly [`ScenePreview`](DataJsAPI.ScenePreview.md)[]\\>\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.API.md", "loc": { "lines": { "from": 231, "to": 264 } } }
    }
  ],
  [
    "49",
    {
      "pageContent": "getUserInformation\n\n▸ **getUserInformation**(): `Promise`<{ `features`: `any` ; `name`: `string` ; `organization`: `string` ; `role`: `string`  }\\>\n\nGet information about currently authenticated user\n\n#### Returns\n\n`Promise`<{ `features`: `any` ; `name`: `string` ; `organization`: `string` ; `role`: `string`  }\\>\n\n___\n\n### getWKZones\n\n▸ **getWKZones**(): `string`[]\n\n#### Returns\n\n`string`[]\n\n___\n\n### latLon2tm\n\n▸ **latLon2tm**(`coords`, `tmZone`): `vec3`\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `coords` | `GeoLocation` |\n| `tmZone` | `string` |\n\n#### Returns\n\n`vec3`\n\n___\n\n### loadScene\n\n▸ **loadScene**(`id`): `Promise`<[`SceneData`](DataJsAPI.SceneData.md) \\| [`SceneLoadFail`](DataJsAPI.SceneLoadFail.md)\\>\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `id` | `string` |\n\n#### Returns\n\n`Promise`<[`SceneData`](DataJsAPI.SceneData.md) \\| [`SceneLoadFail`](DataJsAPI.SceneLoadFail.md)\\>\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.API.md", "loc": { "lines": { "from": 266, "to": 319 } } }
    }
  ],
  [
    "50",
    {
      "pageContent": "putScene\n\n▸ **putScene**(`scene`): `Promise`<`boolean`\\>\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `scene` | [`SceneData`](DataJsAPI.SceneData.md) |\n\n#### Returns\n\n`Promise`<`boolean`\\>\n\n___\n\n### saveBookmarks\n\n▸ **saveBookmarks**(`id`, `bookmarks`, `options?`): `Promise`<`boolean`\\>\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `id` | `string` |\n| `bookmarks` | [`Bookmark`](DataJsAPI.Bookmark-1.md)[] |\n| `options?` | `Object` |\n| `options.group?` | `string` |\n| `options.personal?` | `boolean` |\n\n#### Returns\n\n`Promise`<`boolean`\\>\n\n___\n\n### tm2LatLon\n\n▸ **tm2LatLon**(`position`, `tmZone`): `GeoLocation`\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `position` | `vec3` |\n| `tmZone` | `string` |\n\n#### Returns\n\n`GeoLocation`\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.API.md", "loc": { "lines": { "from": 321, "to": 372 } } }
    }
  ],
  [
    "51",
    {
      "pageContent": "updateResource\n\n▸ **updateResource**(`resource`): `Promise`<`boolean`\\>\n\nUpdate the specified resource in cloud storage.\n\n**`Remarks`**\n\nOnly administrator may update a resource.\n\n**`Throws`**\n\nError in case of insufficient access rights.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `resource` | [`Resource`](DataJsAPI.Resource.md) | The [Resource](DataJsAPI.Resource.md) |\n\n#### Returns\n\n`Promise`<`boolean`\\>\n\nA boolean promise indicating when the operation is complete succesfully/failed.\n\n___\n\n### uploadResource\n\n▸ **uploadResource**(`file`, `progress`, `revisionOf?`, `path?`, `split?`): `Promise`<{ `error?`: `string` ; `processId?`: `string`  }\\>\n\nUpload resource file\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `file` | `File` |\n| `progress` | (`progress`: `number`) => `void` |\n| `revisionOf?` | `string` |\n| `path?` | `string` |\n| `split?` | `boolean` |\n\n#### Returns\n\n`Promise`<{ `error?`: `string` ; `processId?`: `string`  }\\>",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.API.md", "loc": { "lines": { "from": 374, "to": 420 } } }
    }
  ],
  [
    "52",
    {
      "pageContent": "---\nid: \"DataJsAPI.APIOptions\"\ntitle: \"Data JS API\"\nsidebar_label: \"APIOptions\"\ncustom_edit_url: null\ndescription: \"A Data JS API for managing scalable Novorender 3D rendering in the cloud.\"\n---\n\n[DataJsAPI](../namespaces/DataJsAPI.md).APIOptions\n\nServer API creation options\n\n## Properties\n\n### authHeader\n\n• `Optional` **authHeader**: () => `Promise`<[`AuthenticationHeader`](DataJsAPI.AuthenticationHeader.md)\\>\n\n#### Type declaration\n\n▸ (): `Promise`<[`AuthenticationHeader`](DataJsAPI.AuthenticationHeader.md)\\>\n\nCallback returning [AuthenticationHeader](DataJsAPI.AuthenticationHeader.md) promise for protected api requests.\n\n##### Returns\n\n`Promise`<[`AuthenticationHeader`](DataJsAPI.AuthenticationHeader.md)\\>\n\n___\n\n### serviceUrl\n\n• `Optional` **serviceUrl**: `string`\n\nService url. e.g. \"https://novorender.com\".",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.APIOptions.md", "loc": { "lines": { "from": 1, "to": 35 } } }
    }
  ],
  [
    "53",
    {
      "pageContent": "---\nid: \"DataJsAPI.ActiveProcess\"\ntitle: \"Data JS API\"\nsidebar_label: \"ActiveProcess\"\ncustom_edit_url: null\ndescription: \"A Data JS API for managing scalable Novorender 3D rendering in the cloud.\"\n---\n\n[DataJsAPI](../namespaces/DataJsAPI.md).ActiveProcess\n\n## Properties\n\n### id\n\n• **id**: `string`\n\n___\n\n### name\n\n• **name**: `string`\n\n___\n\n### state\n\n• **state**: `string`",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.ActiveProcess.md", "loc": { "lines": { "from": 1, "to": 27 } } }
    }
  ],
  [
    "54",
    {
      "pageContent": "---\nid: \"DataJsAPI.AuthenticationHeader\"\ntitle: \"Data JS API\"\nsidebar_label: \"AuthenticationHeader\"\ncustom_edit_url: null\ndescription: \"A Data JS API for managing scalable Novorender 3D rendering in the cloud.\"\n---\n\n[DataJsAPI](../namespaces/DataJsAPI.md).AuthenticationHeader\n\nAuthentication header using for protected api calls\n\n## Properties\n\n### header\n\n• **header**: `string`\n\nAuthentication header name (Authentication, Set-Cookie, X-Api-Key etc)\n\n___\n\n### value\n\n• **value**: `string`\n\nAuthentication header value (Bearer ..., \"auth cookie name\"=\"auth cookie value\", \"api key\" etc",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.AuthenticationHeader.md", "loc": { "lines": { "from": 1, "to": 27 } } }
    }
  ],
  [
    "55",
    {
      "pageContent": "---\nid: \"DataJsAPI.Bookmark-1\"\ntitle: \"Data JS API\"\nsidebar_label: \"Bookmark\"\ncustom_edit_url: null\ndescription: \"A Data JS API for managing scalable Novorender 3D rendering in the cloud.\"\n---\n\n[DataJsAPI](../namespaces/DataJsAPI.md).Bookmark\n\nBookmark, used to store camera parameters such as postion, rotation, fov etc.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.Bookmark-1.md", "loc": { "lines": { "from": 1, "to": 11 } } }
    }
  ],
  [
    "56",
    {
      "pageContent": "Properties\n\n### camera\n\n• `Optional` **camera**: `CameraProperties`\n\nBookmark camera position.\n\n___\n\n### clippingPlanes\n\n• `Optional` **clippingPlanes**: [`ClippingPlanes`](DataJsAPI.Bookmark.ClippingPlanes.md)\n\nClipping planes\n\n___\n\n### clippingVolume\n\n• `Optional` **clippingVolume**: [`ClippingVolume`](DataJsAPI.Bookmark.ClippingVolume.md)\n\nClipping volume\n\n___\n\n### defaultVisibility\n\n• `Optional` **defaultVisibility**: ``\"neutral\"`` \\| ``\"semiTransparent\"`` \\| ``\"transparent\"``\n\n___\n\n### description\n\n• `Optional` **description**: `string`\n\nBookmark description.\n\n___\n\n### followPath\n\n• `Optional` **followPath**: `Object`\n\nFollow path\n\n#### Type declaration\n\n| Name | Type |\n| :------ | :------ |\n| `currentCenter?` | `vec3` |\n| `id` | `number` |\n| `profile` | `number` |\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.Bookmark-1.md", "loc": { "lines": { "from": 13, "to": 67 } } }
    }
  ],
  [
    "57",
    {
      "pageContent": "grid\n\n• `Optional` **grid**: `Object`\n\nGrid settings\n\n#### Type declaration\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `axisX` | `vec3` | X axis of the grid, length determines the distance between lines |\n| `axisY` | `vec3` | Y axis of the grid, length determines the distance between lines |\n| `enabled` | `boolean` | Enable grid plane. |\n| `majorColor` | `ReadonlyVec3` | Color of major grid lines |\n| `majorLineCount` | `number` | Number of major lines, odd number needed to have lines go through origo. |\n| `minorColor` | `ReadonlyVec3` | Color of minor grid lines |\n| `minorLineCount` | `number` | Number of minor lines between major lines. |\n| `origo` | `vec3` | Origo of the grid |\n\n___\n\n### grouping\n\n• `Optional` **grouping**: `string`\n\nGrouping.\n\n___\n\n### id\n\n• `Optional` **id**: `string`\n\nBookmark id.\n\n___\n\n### img\n\n• `Optional` **img**: `string`\n\nBookmark preview image as base64 encoded.\n\n___\n\n### measurement\n\n• `Optional` **measurement**: `vec3`[]\n\nMeasurement points\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.Bookmark-1.md", "loc": { "lines": { "from": 69, "to": 120 } } }
    }
  ],
  [
    "58",
    {
      "pageContent": "img\n\n• `Optional` **img**: `string`\n\nBookmark preview image as base64 encoded.\n\n___\n\n### measurement\n\n• `Optional` **measurement**: `vec3`[]\n\nMeasurement points\n\n___\n\n### name\n\n• **name**: `string`\n\nBookmark name.\n\n___\n\n### objectGroups\n\n• `Optional` **objectGroups**: [`ObjectGroup`](DataJsAPI.Bookmark.ObjectGroup.md)[]\n\nBookmark objects groups.\n\n___\n\n### objectMeasurement\n\n• `Optional` **objectMeasurement**: [`MeasureObjectPoint`](DataJsAPI.MeasureObjectPoint.md)[]\n\nMeasurement objects points\n\n___\n\n### ortho\n\n• `Optional` **ortho**: `OrthoControllerParams`\n\nBookmark ortho camera.\n\n___\n\n### selectedOnly\n\n• **selectedOnly**: `boolean`\n\nShow selection only in 3D\n\n___\n\n### selectionBasket\n\n• `Optional` **selectionBasket**: `Object`\n\nSelection basket\n\n#### Type declaration\n\n| Name | Type |\n| :------ | :------ |\n| `ids` | `number`[] |\n| `mode` | `number` |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.Bookmark-1.md", "loc": { "lines": { "from": 120, "to": 187 } } }
    }
  ],
  [
    "59",
    {
      "pageContent": "---\nid: \"DataJsAPI.Bookmark.ClippingPlanes\"\ntitle: \"Data JS API\"\nsidebar_label: \"ClippingPlanes\"\ncustom_edit_url: null\ndescription: \"A Data JS API for managing scalable Novorender 3D rendering in the cloud.\"\n---\n\n[DataJsAPI](../namespaces/DataJsAPI.md).[Bookmark](../namespaces/DataJsAPI.Bookmark.md).ClippingPlanes\n\nClipping planes settings.\n\n**`Remarks`**\n\nClipping planes allows for an axis alligned box to define what volume will be rendered or not.\r\nThis is useful for rendering various cross sections and revealing internal geometry.\n\n## Properties\n\n### bounds\n\n• **bounds**: `AABB`\n\nThe axis aligned bounding volume.\n\n___\n\n### enabled\n\n• **enabled**: `boolean`\n\nWhether to clip geometry by the actual bounding box or not.\n\n___\n\n### inside\n\n• **inside**: `boolean`\n\nWhether to clip geometry inside or outside the actual bounding box.\n\n___\n\n### showBox\n\n• **showBox**: `boolean`\n\nWhether to show the actual bounding box or not.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.Bookmark.ClippingPlanes.md", "loc": { "lines": { "from": 1, "to": 48 } } }
    }
  ],
  [
    "60",
    {
      "pageContent": "---\nid: \"DataJsAPI.Bookmark.ClippingVolume\"\ntitle: \"Data JS API\"\nsidebar_label: \"ClippingVolume\"\ncustom_edit_url: null\ndescription: \"A Data JS API for managing scalable Novorender 3D rendering in the cloud.\"\n---\n\n[DataJsAPI](../namespaces/DataJsAPI.md).[Bookmark](../namespaces/DataJsAPI.Bookmark.md).ClippingVolume\n\nClipping volume settings.\n\n**`Remarks`**\n\nClipping volume allows for a set of up to 6 planes to define a volume that excluded from rendering.\r\nThis is useful for rendering various cross sections and revealing internal geometry.\n\n## Properties\n\n### enabled\n\n• **enabled**: `boolean`\n\nWhether to clip geometry by the actual bounding box or not.\n\n___\n\n### mode\n\n• **mode**: ``\"intersection\"`` \\| ``\"union\"``\n\nHow multiple clipping planes are combined. Default: \"union\"\n\n___\n\n### planes\n\n• **planes**: readonly `ReadonlyVec4`[]\n\nList of clipping planes (max 6), expressed as plane normal (x,y,z) and offset from origo (w) in a 4D world space vector.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.Bookmark.ClippingVolume.md", "loc": { "lines": { "from": 1, "to": 40 } } }
    }
  ],
  [
    "61",
    {
      "pageContent": "---\nid: \"DataJsAPI.Bookmark.ObjectGroup\"\ntitle: \"Data JS API\"\nsidebar_label: \"ObjectGroup\"\ncustom_edit_url: null\ndescription: \"A Data JS API for managing scalable Novorender 3D rendering in the cloud.\"\n---\n\n[DataJsAPI](../namespaces/DataJsAPI.md).[Bookmark](../namespaces/DataJsAPI.Bookmark.md).ObjectGroup\n\nObjects group bookmark state\n\n## Properties\n\n### hidden\n\n• **hidden**: `boolean`\n\nIs Group hidden?\n\n___\n\n### id\n\n• **id**: `string`\n\nObject group uuid.\n\n___\n\n### ids\n\n• `Optional` **ids**: `ObjectIdArray`\n\nObject Ids array\n\n___\n\n### selected\n\n• **selected**: `boolean`\n\nIs group selected?",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.Bookmark.ObjectGroup.md", "loc": { "lines": { "from": 1, "to": 43 } } }
    }
  ],
  [
    "62",
    {
      "pageContent": "---\nid: \"DataJsAPI.MeasureObjectPoint\"\ntitle: \"Data JS API\"\nsidebar_label: \"MeasureObjectPoint\"\ncustom_edit_url: null\ndescription: \"A Data JS API for managing scalable Novorender 3D rendering in the cloud.\"\n---\n\n[DataJsAPI](../namespaces/DataJsAPI.md).MeasureObjectPoint\n\n## Properties\n\n### id\n\n• **id**: `number`\n\n___\n\n### pos\n\n• **pos**: `vec3`\n\n___\n\n### settings\n\n• `Optional` **settings**: `MeasureSettings`",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.MeasureObjectPoint.md", "loc": { "lines": { "from": 1, "to": 27 } } }
    }
  ],
  [
    "63",
    {
      "pageContent": "---\nid: \"DataJsAPI.ObjectGroup\"\ntitle: \"Data JS API\"\nsidebar_label: \"ObjectGroup\"\ncustom_edit_url: null\ndescription: \"A Data JS API for managing scalable Novorender 3D rendering in the cloud.\"\n---\n\n[DataJsAPI](../namespaces/DataJsAPI.md).ObjectGroup\n\nScene objects group",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.ObjectGroup.md", "loc": { "lines": { "from": 1, "to": 11 } } }
    }
  ],
  [
    "64",
    {
      "pageContent": "Properties\n\n### color\n\n• `Optional` **color**: readonly [`number`, `number`, `number`] \\| `Float32Array` \\| readonly [`number`, `number`, `number`, `number`]\n\nGroup color when selected.\n\n___\n\n### grouping\n\n• `Optional` **grouping**: `string`\n\nGrouping.\n\n___\n\n### hidden\n\n• **hidden**: `boolean`\n\nIs Group hidden?\n\n___\n\n### id\n\n• **id**: `string`\n\nObject group uuid.\n\n___\n\n### ids\n\n• `Optional` **ids**: `ObjectIdArray`\n\nList of selected object id's.\n\n**`Remarks`**\n\nThe array itself is immutable/readonly, so updates are done by assigning a new array.\n\n___\n\n### includeDescendants\n\n• `Optional` **includeDescendants**: `boolean`\n\nInclude descendants.\n\n**`Remarks`**\n\nundefined value will be interpret as true\n\n___\n\n### name\n\n• **name**: `string`\n\nObject group name.\n\n___\n\n### opacity\n\n• `Optional` **opacity**: `number`\n\nGroup opacity when selected.\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.ObjectGroup.md", "loc": { "lines": { "from": 13, "to": 85 } } }
    }
  ],
  [
    "65",
    {
      "pageContent": "name\n\n• **name**: `string`\n\nObject group name.\n\n___\n\n### opacity\n\n• `Optional` **opacity**: `number`\n\nGroup opacity when selected.\n\n___\n\n### search\n\n• `Optional` **search**: `SearchPattern`[]\n\nGroup filling search criterias.\n\n**`Remarks`**\n\nThis search criterias will be used to refill ids array on scene rebuilding automatically.\r\nIf search is not defined then ids array will remain on scene rebuilding.\n\n___\n\n### selected\n\n• **selected**: `boolean`\n\nIs group selected?",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.ObjectGroup.md", "loc": { "lines": { "from": 85, "to": 118 } } }
    }
  ],
  [
    "66",
    {
      "pageContent": "---\nid: \"DataJsAPI.ProcessProgress\"\ntitle: \"Data JS API\"\nsidebar_label: \"ProcessProgress\"\ncustom_edit_url: null\ndescription: \"A Data JS API for managing scalable Novorender 3D rendering in the cloud.\"\n---\n\n[DataJsAPI](../namespaces/DataJsAPI.md).ProcessProgress\n\n## Properties\n\n### complete\n\n• **complete**: `boolean`\n\nTrue if process complete\n\n___\n\n### position\n\n• **position**: `number`\n\nLast read progress text position. Should be used to next request\n\n___\n\n### text\n\n• **text**: `string`\n\nNew progress text",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.ProcessProgress.md", "loc": { "lines": { "from": 1, "to": 33 } } }
    }
  ],
  [
    "67",
    {
      "pageContent": "---\nid: \"DataJsAPI.Resource\"\ntitle: \"Data JS API\"\nsidebar_label: \"Resource\"\ncustom_edit_url: null\ndescription: \"A Data JS API for managing scalable Novorender 3D rendering in the cloud.\"\n---\n\n[DataJsAPI](../namespaces/DataJsAPI.md).Resource\n\n## Properties\n\n### created\n\n• **created**: `Date`\n\n___\n\n### id\n\n• **id**: `string`\n\n___\n\n### original\n\n• **original**: `string`\n\n___\n\n### path\n\n• `Optional` **path**: `string`\n\n___\n\n### revision\n\n• `Optional` **revision**: `string`\n\n___\n\n### size\n\n• `Optional` **size**: `number`\n\n___\n\n### tags\n\n• `Optional` **tags**: `string`[]\n\n___\n\n### title\n\n• **title**: `string`\n\n___\n\n### type\n\n• `Optional` **type**: `string`",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.Resource.md", "loc": { "lines": { "from": 1, "to": 63 } } }
    }
  ],
  [
    "68",
    {
      "pageContent": "---\nid: \"DataJsAPI.ResourcePreview\"\ntitle: \"Data JS API\"\nsidebar_label: \"ResourcePreview\"\ncustom_edit_url: null\ndescription: \"A Data JS API for managing scalable Novorender 3D rendering in the cloud.\"\n---\n\n[DataJsAPI](../namespaces/DataJsAPI.md).ResourcePreview\n\n## Properties\n\n### bin\n\n• **bin**: `string`\n\nGltf bin preview url\n\n___\n\n### gltf\n\n• **gltf**: `string`\n\nGltf preview url",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.ResourcePreview.md", "loc": { "lines": { "from": 1, "to": 25 } } }
    }
  ],
  [
    "69",
    {
      "pageContent": "---\nid: \"DataJsAPI.SceneData\"\ntitle: \"Data JS API\"\nsidebar_label: \"SceneData\"\ncustom_edit_url: null\ndescription: \"A Data JS API for managing scalable Novorender 3D rendering in the cloud.\"\n---\n\n[DataJsAPI](../namespaces/DataJsAPI.md).SceneData",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.SceneData.md", "loc": { "lines": { "from": 1, "to": 9 } } }
    }
  ],
  [
    "70",
    {
      "pageContent": "Properties\n\n### bookmarks\n\n• `Optional` **bookmarks**: [`Bookmark`](DataJsAPI.Bookmark-1.md)[]\n\nList of bookmarks.\n\n___\n\n### camera\n\n• `Optional` **camera**: `Required`<`CameraControllerParams`\\>\n\n___\n\n### customProperties\n\n• `Optional` **customProperties**: `any`\n\n___\n\n### db\n\n• `Optional` **db**: `ObjectDB`\n\n___\n\n### objectGroups\n\n• **objectGroups**: [`ObjectGroup`](DataJsAPI.ObjectGroup.md)[]\n\nList of object groups with properties\n\n___\n\n### organization\n\n• `Optional` **organization**: `string`\n\n___\n\n### settings\n\n• `Optional` **settings**: `RenderSettings`\n\n___\n\n### title\n\n• **title**: `string`\n\n___\n\n### tmZone\n\n• `Optional` **tmZone**: `string`\n\n___\n\n### url\n\n• **url**: `string`\n\n___\n\n### viewerScenes\n\n• `Optional` **viewerScenes**: [`ScenePreview`](DataJsAPI.ScenePreview.md)[]",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.SceneData.md", "loc": { "lines": { "from": 11, "to": 79 } } }
    }
  ],
  [
    "71",
    {
      "pageContent": "---\nid: \"DataJsAPI.SceneDefinition\"\ntitle: \"Data JS API\"\nsidebar_label: \"SceneDefinition\"\ncustom_edit_url: null\ndescription: \"A Data JS API for managing scalable Novorender 3D rendering in the cloud.\"\n---\n\n[DataJsAPI](../namespaces/DataJsAPI.md).SceneDefinition\n\n## Properties\n\n### assets\n\n• **assets**: { `name?`: `string` ; `position?`: { `X`: `number` ; `Y`: `number` ; `Z`: `number`  } ; `resource`: `string` ; `rotation?`: { `W`: `number` ; `X`: `number` ; `Y`: `number` ; `Z`: `number`  } ; `scale?`: { `X`: `number` ; `Y`: `number` ; `Z`: `number`  }  }[]\n\n___\n\n### id\n\n• **id**: `string`\n\n___\n\n### title\n\n• **title**: `string`",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.SceneDefinition.md", "loc": { "lines": { "from": 1, "to": 27 } } }
    }
  ],
  [
    "72",
    {
      "pageContent": "---\nid: \"DataJsAPI.SceneLoadFail\"\ntitle: \"Data JS API\"\nsidebar_label: \"SceneLoadFail\"\ncustom_edit_url: null\ndescription: \"A Data JS API for managing scalable Novorender 3D rendering in the cloud.\"\n---\n\n[DataJsAPI](../namespaces/DataJsAPI.md).SceneLoadFail\n\n## Properties\n\n### error\n\n• **error**: `string`\n\n___\n\n### tenant\n\n• `Optional` **tenant**: `string`",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.SceneLoadFail.md", "loc": { "lines": { "from": 1, "to": 21 } } }
    }
  ],
  [
    "73",
    {
      "pageContent": "---\nid: \"DataJsAPI.ScenePreview\"\ntitle: \"Data JS API\"\nsidebar_label: \"ScenePreview\"\ncustom_edit_url: null\ndescription: \"A Data JS API for managing scalable Novorender 3D rendering in the cloud.\"\n---\n\n[DataJsAPI](../namespaces/DataJsAPI.md).ScenePreview\n\nLightweight scene preview object for viewing lists of scenes.\n\n## Properties\n\n### count\n\n• `Optional` **count**: `number`\n\nAmount time scene was viewed\n\n**`Remarks`**\n\nUsed for viewer scenes only\n\n___\n\n### id\n\n• **id**: `string`\n\nScene Id\n\n**`Remarks`**\n\nFor new scenes, this will contain a random string/guid.\n\n___\n\n### lastModified\n\n• `Optional` **lastModified**: `Date`\n\nLast modification time\n\n___\n\n### title\n\n• **title**: `string`\n\nScene title",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/interfaces/DataJsAPI.ScenePreview.md", "loc": { "lines": { "from": 1, "to": 51 } } }
    }
  ],
  [
    "74",
    {
      "pageContent": "---\nid: \"modules\"\ntitle: \"Data JS API\"\nsidebar_label: \"Exports\"\nsidebar_position: 0.5\ncustom_edit_url: null\ndescription: \"A Data JS API for managing scalable Novorender 3D rendering in the cloud.\"\n---\n\n## Namespaces\n\n- [DataJsAPI](namespaces/DataJsAPI.md)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/modules.md", "loc": { "lines": { "from": 1, "to": 12 } } }
    }
  ],
  [
    "75",
    {
      "pageContent": "---\nid: \"DataJsAPI.Bookmark\"\ntitle: \"Data JS API\"\nsidebar_label: \"Bookmark\"\ncustom_edit_url: null\ndescription: \"A Data JS API for managing scalable Novorender 3D rendering in the cloud.\"\n---\n\n[DataJsAPI](DataJsAPI.md).Bookmark\n\n## Interfaces\n\n- [ClippingPlanes](../interfaces/DataJsAPI.Bookmark.ClippingPlanes.md)\n- [ClippingVolume](../interfaces/DataJsAPI.Bookmark.ClippingVolume.md)\n- [ObjectGroup](../interfaces/DataJsAPI.Bookmark.ObjectGroup.md)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/namespaces/DataJsAPI.Bookmark.md", "loc": { "lines": { "from": 1, "to": 15 } } }
    }
  ],
  [
    "76",
    {
      "pageContent": "---\nid: \"DataJsAPI\"\ntitle: \"Data JS API\"\nsidebar_label: \"DataJsAPI\"\nsidebar_position: 0\ncustom_edit_url: null\ndescription: \"A Data JS API for managing scalable Novorender 3D rendering in the cloud.\"\n---\n\n## Namespaces\n\n- [Bookmark](DataJsAPI.Bookmark.md)\n\n## Enumerations\n\n- [AccessType](../enums/DataJsAPI.AccessType.md)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/namespaces/DataJsAPI.md", "loc": { "lines": { "from": 1, "to": 16 } } }
    }
  ],
  [
    "77",
    {
      "pageContent": "Namespaces\n\n- [Bookmark](DataJsAPI.Bookmark.md)\n\n## Enumerations\n\n- [AccessType](../enums/DataJsAPI.AccessType.md)\n\n## Interfaces\n\n- [API](../interfaces/DataJsAPI.API.md)\n- [APIOptions](../interfaces/DataJsAPI.APIOptions.md)\n- [ActiveProcess](../interfaces/DataJsAPI.ActiveProcess.md)\n- [AuthenticationHeader](../interfaces/DataJsAPI.AuthenticationHeader.md)\n- [Bookmark](../interfaces/DataJsAPI.Bookmark-1.md)\n- [MeasureObjectPoint](../interfaces/DataJsAPI.MeasureObjectPoint.md)\n- [ObjectGroup](../interfaces/DataJsAPI.ObjectGroup.md)\n- [ProcessProgress](../interfaces/DataJsAPI.ProcessProgress.md)\n- [Resource](../interfaces/DataJsAPI.Resource.md)\n- [ResourcePreview](../interfaces/DataJsAPI.ResourcePreview.md)\n- [SceneData](../interfaces/DataJsAPI.SceneData.md)\n- [SceneDefinition](../interfaces/DataJsAPI.SceneDefinition.md)\n- [SceneLoadFail](../interfaces/DataJsAPI.SceneLoadFail.md)\n- [ScenePreview](../interfaces/DataJsAPI.ScenePreview.md)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/namespaces/DataJsAPI.md", "loc": { "lines": { "from": 16, "to": 39 } } }
    }
  ],
  [
    "78",
    {
      "pageContent": "Functions\n\n### createAPI\n\n▸ **createAPI**(`options?`): [`API`](../interfaces/DataJsAPI.API.md)\n\nCreate an instance of the NovoRender Server API.\n\n**`Remarks`**\n\nThe Server API requires that a user with appropriate access to server resources has already been logged in.\r\nUnless you are developing a purely public web app, you may want to check the credentials property in the returned API and redirect to a login page if need be.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `options?` | [`APIOptions`](../interfaces/DataJsAPI.APIOptions.md) | Custom settings ServerAPIOptions to create API. |\n\n#### Returns\n\n[`API`](../interfaces/DataJsAPI.API.md)\n\nAn initialized API object",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/data-js-api/namespaces/DataJsAPI.md", "loc": { "lines": { "from": 41, "to": 64 } } }
    }
  ],
  [
    "79",
    {
      "pageContent": "---\nid: \"Measure.MeasureError\"\ntitle: \"Measure API\"\nsidebar_label: \"MeasureError\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).MeasureError\n\n## Hierarchy\n\n- `Error`\n\n  ↳ **`MeasureError`**\n\n## Constructors\n\n### constructor\n\n• **new MeasureError**(`type`, `message`)\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `type` | `string` |\n| `message` | `string` |\n\n#### Overrides\n\nError.constructor",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/classes/Measure.MeasureError.md", "loc": { "lines": { "from": 1, "to": 32 } } }
    }
  ],
  [
    "80",
    {
      "pageContent": "Properties\n\n### message\n\n• **message**: `string`\n\n#### Inherited from\n\nError.message\n\n___\n\n### name\n\n• **name**: `string`\n\n#### Inherited from\n\nError.name\n\n___\n\n### stack\n\n• `Optional` **stack**: `string`\n\n#### Inherited from\n\nError.stack\n\n___\n\n### type\n\n• `Readonly` **type**: `string`\n\n___\n\n### prepareStackTrace\n\n▪ `Static` `Optional` **prepareStackTrace**: (`err`: `Error`, `stackTraces`: `CallSite`[]) => `any`\n\n#### Type declaration\n\n▸ (`err`, `stackTraces`): `any`\n\nOptional override for formatting stack traces\n\n**`See`**\n\nhttps://v8.dev/docs/stack-trace-api#customizing-stack-traces\n\n##### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `err` | `Error` |\n| `stackTraces` | `CallSite`[] |\n\n##### Returns\n\n`any`\n\n#### Inherited from\n\nError.prepareStackTrace\n\n___\n\n### stackTraceLimit\n\n▪ `Static` **stackTraceLimit**: `number`\n\n#### Inherited from\n\nError.stackTraceLimit",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/classes/Measure.MeasureError.md", "loc": { "lines": { "from": 34, "to": 109 } } }
    }
  ],
  [
    "81",
    {
      "pageContent": "Methods\n\n### captureStackTrace\n\n▸ `Static` **captureStackTrace**(`targetObject`, `constructorOpt?`): `void`\n\nCreate .stack property on a target object\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `targetObject` | `object` |\n| `constructorOpt?` | `Function` |\n\n#### Returns\n\n`void`\n\n#### Inherited from\n\nError.captureStackTrace",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/classes/Measure.MeasureError.md", "loc": { "lines": { "from": 111, "to": 132 } } }
    }
  ],
  [
    "82",
    {
      "pageContent": "---\nid: \"index\"\ntitle: \"Measure API\"\nsidebar_label: \"Readme\"\nsidebar_position: 0\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n<img src=\"https://novorender.com/wp-content/uploads/2021/06/novorender_logo_RGB_2021.png\"/>\n\n# [NovoRender](http://novorender.com/)\n\n> A measure API for NovoRender data models.\n\n[![Latest NPM Version](https://img.shields.io/npm/v/@novorender/measure-api.svg?label=@novorender/measure-api)](https://www.npmjs.com/package/@novorender/data-js-api)\n\n### NPM Module",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/index.md", "loc": { "lines": { "from": 1, "to": 18 } } }
    }
  ],
  [
    "83",
    {
      "pageContent": "Installation\n\nMeasure API is available as an [NPM](https://www.npmjs.com/package/@novorender/measure-api) package. You can install Measure Api in your project's directory with npm:\n\n```bash\r\n$ npm install @novorender/measure-api\r\n```\n\nFor bleeding edge builds:\n\n```bash\r\n$ npm install @novorender/measure-api@next\r\n```\n\nThe package contains pre-bundled ES6 and UMD modules and typescript definition file that you can use for both local development and include in your web deployment.\n\n## Getting started\n\nImport the api\n\n```ts\r\nimport * as Measure from \"@novorender/measure-api\";\r\n```\n\nCreate api object\n\n```ts\r\nconst api = await Measure.createMeasureAPI();\r\n```\n\nLoad the scene, this is the object with measure functions related to the scene.\r\nThe scene url can be loaded from @novorender/data-api\n\n```ts\r\nconst scene = api.loadScene(NovoRender.WellKnownSceneUrls.condos);\r\n```",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/index.md", "loc": { "lines": { "from": 20, "to": 55 } } }
    }
  ],
  [
    "84",
    {
      "pageContent": "---\nid: \"Measure.ArcValues\"\ntitle: \"Measure API\"\nsidebar_label: \"ArcValues\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).ArcValues\n\nArcValues is a collection of values for measuring a single arc\n\n## Properties\n\n### kind\n\n• `Readonly` **kind**: ``\"arc\"``\n\n___\n\n### radius\n\n• `Readonly` **radius**: `number`\n\nRadius of the arc\n\n___\n\n### totalAngle\n\n• `Readonly` **totalAngle**: `number`\n\nAngle of the arc segment",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.ArcValues.md", "loc": { "lines": { "from": 1, "to": 33 } } }
    }
  ],
  [
    "85",
    {
      "pageContent": "---\nid: \"Measure.CameraValues\"\ntitle: \"Measure API\"\nsidebar_label: \"CameraValues\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).CameraValues\n\nGives values to create a camera based on selected object\n\n## Properties\n\n### normal\n\n• **normal**: `ReadonlyVec3`\n\nNormalized direction\n\n___\n\n### position\n\n• **position**: `ReadonlyVec3`\n\nWorld position",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.CameraValues.md", "loc": { "lines": { "from": 1, "to": 27 } } }
    }
  ],
  [
    "86",
    {
      "pageContent": "---\nid: \"Measure.CollisionValues\"\ntitle: \"Measure API\"\nsidebar_label: \"CollisionValues\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).CollisionValues\n\nCollision values\n\n## Properties\n\n### point\n\n• `Readonly` **point**: `vec3`\n\nCollision point between two objects",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.CollisionValues.md", "loc": { "lines": { "from": 1, "to": 19 } } }
    }
  ],
  [
    "87",
    {
      "pageContent": "---\nid: \"Measure.CrossSlope\"\ntitle: \"Measure API\"\nsidebar_label: \"CrossSlope\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).CrossSlope\n\n## Properties\n\n### intervals\n\n• `Readonly` **intervals**: `number`[]\n\n___\n\n### left\n\n• `Readonly` **left**: `number`[]\n\n___\n\n### right\n\n• `Readonly` **right**: `number`[]",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.CrossSlope.md", "loc": { "lines": { "from": 1, "to": 27 } } }
    }
  ],
  [
    "88",
    {
      "pageContent": "---\nid: \"Measure.CylinderValues\"\ntitle: \"Measure API\"\nsidebar_label: \"CylinderValues\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).CylinderValues\n\nCylinderValues is a collection of values for measuring a single cylinder\n\n## Properties\n\n### centerLineEnd\n\n• `Readonly` **centerLineEnd**: `vec3`\n\nEnd of the line going in the center of the cylinder\n\n___\n\n### centerLineStart\n\n• `Readonly` **centerLineStart**: `vec3`\n\nStart of the line going in the center of the cylinder\n\n___\n\n### entity\n\n• `Readonly` **entity**: [`SelectedEntity`](Measure.SelectedEntity.md)\n\nEntity\n\n___\n\n### kind\n\n• `Readonly` **kind**: ``\"cylinder\"``\n\n___\n\n### radius\n\n• `Readonly` **radius**: `number`\n\nCylinder radius",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.CylinderValues.md", "loc": { "lines": { "from": 1, "to": 49 } } }
    }
  ],
  [
    "89",
    {
      "pageContent": "---\nid: \"Measure.DrawObject\"\ntitle: \"Measure API\"\nsidebar_label: \"DrawObject\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).DrawObject\n\nAn object for 2d drawings, can contain multiple parts\n\n## Properties\n\n### kind\n\n• `Readonly` **kind**: ``\"vertex\"`` \\| ``\"curveSegment\"`` \\| ``\"text\"`` \\| ``\"cylinder\"`` \\| ``\"plane\"`` \\| ``\"edge\"`` \\| ``\"complex\"``\n\nType of draw object\n\n___\n\n### parts\n\n• `Readonly` **parts**: [`DrawPart`](Measure.DrawPart.md)[]\n\nDifferent parts of the object",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.DrawObject.md", "loc": { "lines": { "from": 1, "to": 27 } } }
    }
  ],
  [
    "90",
    {
      "pageContent": "---\nid: \"Measure.DrawPart\"\ntitle: \"Measure API\"\nsidebar_label: \"DrawPart\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).DrawPart\n\nInformation about object to draw for measurement",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.DrawPart.md", "loc": { "lines": { "from": 1, "to": 11 } } }
    }
  ],
  [
    "91",
    {
      "pageContent": "Properties\n\n### drawType\n\n• `Readonly` **drawType**: ``\"lines\"`` \\| ``\"filled\"`` \\| ``\"vertex\"`` \\| ``\"curveSegment\"`` \\| ``\"angle\"`` \\| ``\"text\"``\n\nType of object to draw\n\n___\n\n### elevation\n\n• `Optional` `Readonly` **elevation**: `Object`\n\nFrom/to 3d elevation of object, used for cylinder to show slope\n\n#### Type declaration\n\n| Name | Type |\n| :------ | :------ |\n| `from` | `number` |\n| `horizontalDisplay` | `boolean` |\n| `to` | `number` |\n\n___\n\n### name\n\n• `Optional` `Readonly` **name**: `string`\n\nName of the part\n\n___\n\n### text\n\n• `Optional` `Readonly` **text**: `string`\n\nDisplay text of the part,\r\nFor lines of 2 points it is the length\r\nFor angles its the angle in degrees\n\n___\n\n### vertices2D\n\n• `Optional` **vertices2D**: `ReadonlyVec2`[]\n\nView space coordinates, in pixel values, empty if the entire part is out of view\n\n___\n\n### vertices3D\n\n• `Readonly` **vertices3D**: `ReadonlyVec3`[]\n\nWorld coordinates\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.DrawPart.md", "loc": { "lines": { "from": 13, "to": 71 } } }
    }
  ],
  [
    "92",
    {
      "pageContent": "vertices3D\n\n• `Readonly` **vertices3D**: `ReadonlyVec3`[]\n\nWorld coordinates\n\n___\n\n### voids\n\n• `Optional` `Readonly` **voids**: [`DrawVoid`](Measure.DrawVoid.md)[]\n\nHole in the draw part,  only valid for filled kind",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.DrawPart.md", "loc": { "lines": { "from": 71, "to": 83 } } }
    }
  ],
  [
    "93",
    {
      "pageContent": "---\nid: \"Measure.DrawProduct\"\ntitle: \"Measure API\"\nsidebar_label: \"DrawProduct\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).DrawProduct\n\nA hierarcical structure to draw 2d objects\n\n## Properties\n\n### kind\n\n• `Readonly` **kind**: ``\"basic\"`` \\| ``\"manhole\"`` \\| ``\"measureResult\"``\n\nType of draw prouct\n\n___\n\n### objects\n\n• `Readonly` **objects**: [`DrawObject`](Measure.DrawObject.md)[]\n\nObjects to draw",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.DrawProduct.md", "loc": { "lines": { "from": 1, "to": 27 } } }
    }
  ],
  [
    "94",
    {
      "pageContent": "---\nid: \"Measure.DrawVoid\"\ntitle: \"Measure API\"\nsidebar_label: \"DrawVoid\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).DrawVoid\n\nHole in a filled  polygon\n\n## Properties\n\n### vertices2D\n\n• `Optional` **vertices2D**: `ReadonlyVec2`[]\n\nView space coordinates, in pixel values, empty if the entire part is out of view\n\n___\n\n### vertices3D\n\n• **vertices3D**: `ReadonlyVec3`[]\n\nWorld coordinates",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.DrawVoid.md", "loc": { "lines": { "from": 1, "to": 27 } } }
    }
  ],
  [
    "95",
    {
      "pageContent": "---\nid: \"Measure.DrawableEntity\"\ntitle: \"Measure API\"\nsidebar_label: \"DrawableEntity\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).DrawableEntity\n\nAn entity that can be used in Api.getDrawMeasureEntity, Objects returned from the api with draw kind parameter can be used\n\n## Properties\n\n### ObjectId\n\n• `Optional` `Readonly` **ObjectId**: `ObjectId`\n\nObject id from the web-gl api\n\n___\n\n### drawKind\n\n• `Readonly` **drawKind**: ``\"vertex\"`` \\| ``\"curveSegment\"`` \\| ``\"edge\"`` \\| ``\"manhole\"`` \\| ``\"measureResult\"`` \\| ``\"face\"``\n\nCollection of kinds that can be drawn using Api.getDrawMeasureEntity",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.DrawableEntity.md", "loc": { "lines": { "from": 1, "to": 27 } } }
    }
  ],
  [
    "96",
    {
      "pageContent": "---\nid: \"Measure.DuoMeasurementValues\"\ntitle: \"Measure API\"\nsidebar_label: \"DuoMeasurementValues\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).DuoMeasurementValues\n\nDuoMeasurementValues is a collection of values for measuring two objects",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.DuoMeasurementValues.md", "loc": { "lines": { "from": 1, "to": 11 } } }
    }
  ],
  [
    "97",
    {
      "pageContent": "Properties\n\n### angle\n\n• `Optional` `Readonly` **angle**: `Object`\n\nAngle between objects, used for cylinders, and the directions\n\n#### Type declaration\n\n| Name | Type |\n| :------ | :------ |\n| `additionalLine?` | [`vec3`, `vec3`] |\n| `angleDrawInfo` | [`vec3`, `vec3`, `vec3`] |\n| `radians` | `number` |\n\n___\n\n### distance\n\n• `Optional` `Readonly` **distance**: `number`\n\nTotal distance between the objects\n\n___\n\n### distanceX\n\n• `Readonly` **distanceX**: `number`\n\nDistance on the X plane between the objects\n\n___\n\n### distanceY\n\n• `Readonly` **distanceY**: `number`\n\nDistance on the Y plane between the objects\n\n___\n\n### distanceZ\n\n• `Readonly` **distanceZ**: `number`\n\nDistance on the Z plane between the objects\n\n___\n\n### drawKind\n\n• `Readonly` **drawKind**: ``\"measureResult\"``\n\n___\n\n### normalDistance\n\n• `Optional` `Readonly` **normalDistance**: `number`\n\nTotal normdistance between the objects from object A\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.DuoMeasurementValues.md", "loc": { "lines": { "from": 13, "to": 75 } } }
    }
  ],
  [
    "98",
    {
      "pageContent": "drawKind\n\n• `Readonly` **drawKind**: ``\"measureResult\"``\n\n___\n\n### normalDistance\n\n• `Optional` `Readonly` **normalDistance**: `number`\n\nTotal normdistance between the objects from object A\n\n___\n\n### normalPoints\n\n• `Optional` `Readonly` **normalPoints**: `vec3`[]\n\nPoint to display normal distance between objects from object A\n\n___\n\n### pointA\n\n• `Optional` `Readonly` **pointA**: `vec3`\n\nClosest point on object A\n\n___\n\n### pointB\n\n• `Optional` `Readonly` **pointB**: `vec3`\n\nClosest point on object B\n\n___\n\n### validMeasureSettings\n\n• `Optional` `Readonly` **validMeasureSettings**: `Object`\n\nThe valid measurement settings for the current measure objects A and B\n\n#### Type declaration\n\n| Name | Type |\n| :------ | :------ |\n| `a` | `boolean` |\n| `b` | `boolean` |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.DuoMeasurementValues.md", "loc": { "lines": { "from": 75, "to": 124 } } }
    }
  ],
  [
    "99",
    {
      "pageContent": "---\nid: \"Measure.FollowParametricObject\"\ntitle: \"Measure API\"\nsidebar_label: \"FollowParametricObject\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).FollowParametricObject\n\nUsed to get camera values along a curve segment or cylinder center",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.FollowParametricObject.md", "loc": { "lines": { "from": 1, "to": 11 } } }
    }
  ],
  [
    "100",
    {
      "pageContent": "Properties\n\n### ids\n\n• `Readonly` **ids**: `ObjectId`[]\n\nCollection of Object Ids, if multiple then it must be following cylinders\n\n___\n\n### parameterBounds\n\n• `Readonly` **parameterBounds**: [`ParameterBounds`](Measure.ParameterBounds.md)\n\nStart and stop bounds of the followed object, \r\nunless the parametric object specify otherwise start will be 0 and end will be the length of all segments\n\n___\n\n### selectedEntity\n\n• `Readonly` **selectedEntity**: [`MeasureEntity`](../namespaces/Measure.md#measureentity)\n\nInformation about the entity, used to avoid finding the objects in api functions\n\n___\n\n### type\n\n• `Readonly` **type**: ``\"cylinder\"`` \\| ``\"edge\"`` \\| ``\"curve\"`` \\| ``\"cylinders\"``\n\nType of object that is being followed",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.FollowParametricObject.md", "loc": { "lines": { "from": 13, "to": 44 } } }
    }
  ],
  [
    "101",
    {
      "pageContent": "Methods\n\n### getCameraValues\n\n▸ **getCameraValues**(`t`): `Promise`<[`CameraValues`](Measure.CameraValues.md)\\>\n\nReturns camera values for given parameter T,\r\nif T is before start it will return camera values at start and if its larger than end it will return camera values for end\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `t` | `number` |\n\n#### Returns\n\n`Promise`<[`CameraValues`](Measure.CameraValues.md)\\>",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.FollowParametricObject.md", "loc": { "lines": { "from": 46, "to": 63 } } }
    }
  ],
  [
    "102",
    {
      "pageContent": "---\nid: \"Measure.LineStripMeasureValues\"\ntitle: \"Measure API\"\nsidebar_label: \"LineStripMeasureValues\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).LineStripMeasureValues\n\nGives values based on selected linestrip\n\n## Properties\n\n### angles\n\n• `Readonly` **angles**: `number`[]\n\nList of angles between line segments starting with angle between segment 0 and 1\n\n___\n\n### linestrip\n\n• `Readonly` **linestrip**: `ReadonlyVec3`[]\n\nThe input vertices\n\n___\n\n### segmentLengts\n\n• `Readonly` **segmentLengts**: `number`[]\n\nList of lenths based on line segments starting with segment between vertex 0 and 1\n\n___\n\n### totalLength\n\n• `Readonly` **totalLength**: `number`\n\nThe total length of the linestrip",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.LineStripMeasureValues.md", "loc": { "lines": { "from": 1, "to": 43 } } }
    }
  ],
  [
    "103",
    {
      "pageContent": "---\nid: \"Measure.LineStripValues\"\ntitle: \"Measure API\"\nsidebar_label: \"LineStripValues\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).LineStripValues\n\nLineStripValues is a collection of values for measuring a line strip\n\n## Properties\n\n### kind\n\n• `Readonly` **kind**: ``\"lineStrip\"``\n\n___\n\n### totalLength\n\n• `Optional` `Readonly` **totalLength**: `number`\n\nAccumulated length of all lines in strip",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.LineStripValues.md", "loc": { "lines": { "from": 1, "to": 25 } } }
    }
  ],
  [
    "104",
    {
      "pageContent": "---\nid: \"Measure.LineValues\"\ntitle: \"Measure API\"\nsidebar_label: \"LineValues\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).LineValues\n\nLineValues is a collection of values for measuring a single line\n\n## Properties\n\n### distance\n\n• `Readonly` **distance**: `Number`\n\nDistance from the start to the end of the line\n\n___\n\n### end\n\n• `Readonly` **end**: `vec3`\n\nThe end of the line\n\n___\n\n### gradient\n\n• `Readonly` **gradient**: `vec3`\n\nGradient of the line\n\n___\n\n### kind\n\n• `Readonly` **kind**: ``\"line\"``\n\n___\n\n### start\n\n• `Readonly` **start**: `vec3`\n\nThe start of the line",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.LineValues.md", "loc": { "lines": { "from": 1, "to": 49 } } }
    }
  ],
  [
    "105",
    {
      "pageContent": "---\nid: \"Measure.ManholeMeasureValues\"\ntitle: \"Measure API\"\nsidebar_label: \"ManholeMeasureValues\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).ManholeMeasureValues\n\nGives values based on selected manhole, \r\nmust contain a top plane, bottom plane an a cylinder running for atleast 50% of the distance between top and bottom \r\nTesselated manholes will not work",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.ManholeMeasureValues.md", "loc": { "lines": { "from": 1, "to": 13 } } }
    }
  ],
  [
    "106",
    {
      "pageContent": "Properties\n\n### ObjectId\n\n• `Readonly` **ObjectId**: `ObjectId`\n\nObject id from the web-gl api\n\n___\n\n### bottomInner\n\n• `Optional` `Readonly` **bottomInner**: [`PlaneValues`](Measure.PlaneValues.md)\n\nInner bottom plane, can only be found if circular planes are used, else this is always undefiend\n\n___\n\n### bottomInnerElevation\n\n• `Optional` `Readonly` **bottomInnerElevation**: `number`\n\nZ value of the inner bottom plane, center is used if tilted\n\n___\n\n### bottomOuter\n\n• `Readonly` **bottomOuter**: [`PlaneValues`](Measure.PlaneValues.md)\n\nOuter bottom plane of the manhole\n\n___\n\n### bottomOuterElevation\n\n• `Readonly` **bottomOuterElevation**: `number`\n\nZ value of the outer bottom plane, center is used if tilted\n\n___\n\n### drawKind\n\n• `Readonly` **drawKind**: ``\"manhole\"``\n\nCan be drawn by Api.getDrawMeasureEntity\n\n___\n\n### inner\n\n• `Optional` `Readonly` **inner**: [`CylinderValues`](Measure.CylinderValues.md)\n\nInner cylinder if there are 2 cylinders in the manhole\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.ManholeMeasureValues.md", "loc": { "lines": { "from": 15, "to": 71 } } }
    }
  ],
  [
    "107",
    {
      "pageContent": "inner\n\n• `Optional` `Readonly` **inner**: [`CylinderValues`](Measure.CylinderValues.md)\n\nInner cylinder if there are 2 cylinders in the manhole\n\n___\n\n### innerRadius\n\n• `Optional` `Readonly` **innerRadius**: `number`\n\nRadius of the inner cylinder\n\n___\n\n### internal\n\n• `Readonly` **internal**: `Object`\n\nInternal values used for drawing\n\n#### Type declaration\n\n| Name | Type |\n| :------ | :------ |\n| `bottomInner?` | `FaceData` |\n| `bottomOuter` | `FaceData` |\n| `inner?` | `FaceData` |\n| `outer` | `FaceData` |\n| `top` | `FaceData` |\n\n___\n\n### outer\n\n• `Readonly` **outer**: [`CylinderValues`](Measure.CylinderValues.md)\n\nRadius of the outer cylinder, outer will be chosen if only one exists\n\n___\n\n### outerRadius\n\n• `Readonly` **outerRadius**: `number`\n\nRadius of the outer cylinder\n\n___\n\n### top\n\n• `Readonly` **top**: [`PlaneValues`](Measure.PlaneValues.md)\n\nPlane at the top of the manhole\n\n___\n\n### topElevation\n\n• `Readonly` **topElevation**: `number`\n\nZ value of the top plane, center is used if tilted",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.ManholeMeasureValues.md", "loc": { "lines": { "from": 71, "to": 133 } } }
    }
  ],
  [
    "108",
    {
      "pageContent": "---\nid: \"Measure.MeasureAPI\"\ntitle: \"Measure API\"\nsidebar_label: \"MeasureAPI\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).MeasureAPI\n\nMeasure api loads from same scene assets. Brep files are required",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.MeasureAPI.md", "loc": { "lines": { "from": 1, "to": 11 } } }
    }
  ],
  [
    "109",
    {
      "pageContent": "Methods\n\n### dispose\n\n▸ **dispose**(): `Promise`<`void`\\>\n\n#### Returns\n\n`Promise`<`void`\\>\n\n___\n\n### getDrawMeasureEntity\n\n▸ **getDrawMeasureEntity**(`view`, `scene`, `entity`, `setting?`): `Promise`<[`DrawProduct`](Measure.DrawProduct.md)\\>\n\nReturns a hierarcical structure of the element, describing how it should be drawn in 2d\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `view` | `View` |\n| `scene` | [`MeasureScene`](Measure.MeasureScene.md) |\n| `entity` | [`DrawableEntity`](Measure.DrawableEntity.md) |\n| `setting?` | [`MeasureSettings`](Measure.MeasureSettings.md) |\n\n#### Returns\n\n`Promise`<[`DrawProduct`](Measure.DrawProduct.md)\\>\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.MeasureAPI.md", "loc": { "lines": { "from": 13, "to": 44 } } }
    }
  ],
  [
    "110",
    {
      "pageContent": "getDrawObjectFromPoints\n\n▸ **getDrawObjectFromPoints**(`view`, `points`, `closed`, `angles`): [`DrawProduct`](Measure.DrawProduct.md)\n\nReturns a hierarcical structure describing how it should be drawn in 2d, \r\nshould be used instead of getDrawMeasureEntity when a drawable entity is not available\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `view` | `View` |\n| `points` | `ReadonlyVec3`[] |\n| `closed` | `boolean` |\n| `angles` | `boolean` |\n\n#### Returns\n\n[`DrawProduct`](Measure.DrawProduct.md)\n\n___\n\n### getDrawText\n\n▸ **getDrawText**(`view`, `points`, `text`): [`DrawProduct`](Measure.DrawProduct.md)\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `view` | `View` |\n| `points` | `ReadonlyVec3`[] |\n| `text` | `string` |\n\n#### Returns\n\n[`DrawProduct`](Measure.DrawProduct.md)\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.MeasureAPI.md", "loc": { "lines": { "from": 46, "to": 84 } } }
    }
  ],
  [
    "111",
    {
      "pageContent": "loadScene\n\n▸ **loadScene**(`url`): `Promise`<[`MeasureScene`](Measure.MeasureScene.md)\\>\n\nSame scene url as the corresponding webgl api load scene\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `url` | `string` \\| `URL` |\n\n#### Returns\n\n`Promise`<[`MeasureScene`](Measure.MeasureScene.md)\\>\n\n___\n\n### toMarkerPoints\n\n▸ **toMarkerPoints**(`view`, `points`): `ReadonlyVec2`[]\n\nConverts world space points to on screen pixel points. Input and output are of equal length.\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `view` | `View` |\n| `points` | `ReadonlyVec3`[] |\n\n#### Returns\n\n`ReadonlyVec2`[]\n\n___\n\n### toPathPoints\n\n▸ **toPathPoints**(`points`, `view`): [pathPoints: ReadonlyVec2[], pixelPoints: ReadonlyVec2[]]\n\nConverts world space points to on screen pixel path and points\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `points` | `ReadonlyVec3`[] |\n| `view` | `View` |\n\n#### Returns\n\n[pathPoints: ReadonlyVec2[], pixelPoints: ReadonlyVec2[]]",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.MeasureAPI.md", "loc": { "lines": { "from": 86, "to": 138 } } }
    }
  ],
  [
    "112",
    {
      "pageContent": "---\nid: \"Measure.MeasureScene\"\ntitle: \"Measure API\"\nsidebar_label: \"MeasureScene\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).MeasureScene\n\nScene with objects being measured. Brep files are required",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.MeasureScene.md", "loc": { "lines": { "from": 1, "to": 11 } } }
    }
  ],
  [
    "113",
    {
      "pageContent": "Methods\n\n### areaFromPolygon\n\n▸ **areaFromPolygon**(`vertices`, `normals`): `Object`\n\nCalculates the area from polygon.\r\nTreat polygon as closed.\r\ny is treated as height and is ignored.\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `vertices` | `ReadonlyVec3`[] |\n| `normals` | `ReadonlyVec3`[] |\n\n#### Returns\n\n`Object`\n\n| Name | Type |\n| :------ | :------ |\n| `area` | `number` |\n| `polygon` | `ReadonlyVec3`[] |\n\n___\n\n### collision\n\n▸ **collision**(`a`, `b`, `setting?`): `Promise`<[`CollisionValues`](Measure.CollisionValues.md)\\>\n\nReturns collision values between 2 entities\r\ncurrently only works for two cylinders\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `a` | [`SelectedEntity`](Measure.SelectedEntity.md) |\n| `b` | [`SelectedEntity`](Measure.SelectedEntity.md) |\n| `setting?` | [`MeasureSettings`](Measure.MeasureSettings.md) |\n\n#### Returns\n\n`Promise`<[`CollisionValues`](Measure.CollisionValues.md)\\>\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.MeasureScene.md", "loc": { "lines": { "from": 13, "to": 60 } } }
    }
  ],
  [
    "114",
    {
      "pageContent": "followParametricObjectFromPosition\n\n▸ **followParametricObjectFromPosition**(`id`, `selectionPosition`, `setting?`): `Promise`<[`FollowParametricObject`](Measure.FollowParametricObject.md)\\>\n\nReturns an object that can be used to calculate camera posisiotns that follow the object\r\nSupports Edges, curve segments and cylinder\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `id` | `ObjectId` |\n| `selectionPosition` | `ReadonlyVec3` |\n| `setting?` | [`MeasureSettings`](Measure.MeasureSettings.md) |\n\n#### Returns\n\n`Promise`<[`FollowParametricObject`](Measure.FollowParametricObject.md)\\>\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.MeasureScene.md", "loc": { "lines": { "from": 62, "to": 81 } } }
    }
  ],
  [
    "115",
    {
      "pageContent": "followParametricObjects\n\n▸ **followParametricObjects**(`ids`, `setting?`): `Promise`<[`FollowParametricObject`](Measure.FollowParametricObject.md)\\>\n\nReturns an object that can be used to calculate camera posisiotns that follow the objects\r\nSupports multiple cylinder,\r\nIn case of one object, and that object only containing one curve segment it will return curve segment\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `ids` | `ObjectId`[] |\n| `setting?` | [`MeasureSettings`](Measure.MeasureSettings.md) |\n\n#### Returns\n\n`Promise`<[`FollowParametricObject`](Measure.FollowParametricObject.md)\\>\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.MeasureScene.md", "loc": { "lines": { "from": 83, "to": 102 } } }
    }
  ],
  [
    "116",
    {
      "pageContent": "getCameraValues\n\n▸ **getCameraValues**(`a`, `cameraDir`): `Promise`<[`CameraValues`](Measure.CameraValues.md)\\>\n\nGet suggested camea values for selected object\r\nFor cylinder values snap to the closest axis on the cylinder\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `a` | [`MeasureEntity`](../namespaces/Measure.md#measureentity) |\n| `cameraDir` | `vec3` |\n\n#### Returns\n\n`Promise`<[`CameraValues`](Measure.CameraValues.md)\\>\n\n___\n\n### getCrossSections\n\n▸ **getCrossSections**(`roadIds`, `profileNumber`): `Promise`<[`RoadCrossSection`](Measure.RoadCrossSection.md)[]\\>\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `roadIds` | `string`[] |\n| `profileNumber` | `number` |\n\n#### Returns\n\n`Promise`<[`RoadCrossSection`](Measure.RoadCrossSection.md)[]\\>\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.MeasureScene.md", "loc": { "lines": { "from": 104, "to": 139 } } }
    }
  ],
  [
    "117",
    {
      "pageContent": "getCrossSlope\n\n▸ **getCrossSlope**(`roadId`): `Promise`<[`CrossSlope`](Measure.CrossSlope.md)\\>\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `roadId` | `string` |\n\n#### Returns\n\n`Promise`<[`CrossSlope`](Measure.CrossSlope.md)\\>\n\n___\n\n### getParametricProduct\n\n▸ **getParametricProduct**(`id`): `Promise`<`any`\\>\n\nReturns the entire parametric hierarchy,\r\n returns undefined upon abort\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `id` | `ObjectId` |\n\n#### Returns\n\n`Promise`<`any`\\>\n\n___\n\n### getProfileViewFromEntity\n\n▸ **getProfileViewFromEntity**(`entity`, `setting?`): `Promise`<[`Profile`](Measure.Profile.md)\\>\n\nReturns the profile view of a linestrip where x is the length of the line and y is the height\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `entity` | [`MeasureEntity`](../namespaces/Measure.md#measureentity) |\n| `setting?` | [`MeasureSettings`](Measure.MeasureSettings.md) |\n\n#### Returns\n\n`Promise`<[`Profile`](Measure.Profile.md)\\>\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.MeasureScene.md", "loc": { "lines": { "from": 141, "to": 193 } } }
    }
  ],
  [
    "118",
    {
      "pageContent": "getProfileViewFromMultiSelect\n\n▸ **getProfileViewFromMultiSelect**(`ids`, `setting?`): `Promise`<[`Profile`](Measure.Profile.md)\\>\n\nReturns the profile view of selected objects where x is the length of the line and y is the height,\r\ncurrently only supports cylinders\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `ids` | `ObjectId`[] |\n| `setting?` | [`MeasureSettings`](Measure.MeasureSettings.md) |\n\n#### Returns\n\n`Promise`<[`Profile`](Measure.Profile.md)\\>\n\n___\n\n### getRoadProfile\n\n▸ **getRoadProfile**(`roadId`): `Promise`<[`RoadProfiles`](Measure.RoadProfiles.md)\\>\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `roadId` | `string` |\n\n#### Returns\n\n`Promise`<[`RoadProfiles`](Measure.RoadProfiles.md)\\>\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.MeasureScene.md", "loc": { "lines": { "from": 195, "to": 229 } } }
    }
  ],
  [
    "119",
    {
      "pageContent": "inspectObject\n\n▸ **inspectObject**(`productId`, `objectType`): `Promise`<[`ManholeMeasureValues`](Measure.ManholeMeasureValues.md)\\>\n\nObject inspection, where the entire parametric object is treated as the input object type\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `productId` | `number` |\n| `objectType` | ``\"manhole\"`` |\n\n#### Returns\n\n`Promise`<[`ManholeMeasureValues`](Measure.ManholeMeasureValues.md)\\>\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.MeasureScene.md", "loc": { "lines": { "from": 231, "to": 248 } } }
    }
  ],
  [
    "120",
    {
      "pageContent": "measure\n\n▸ **measure**(`a`, `b?`, `settingA?`, `settingB?`): `Promise`<[`MeasurementValues`](../namespaces/Measure.md#measurementvalues)\\>\n\nMeasure objet, if b is undefined then single measure values are returned else the measurement between 2 objects\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `a` | [`MeasureEntity`](../namespaces/Measure.md#measureentity) |\n| `b?` | [`MeasureEntity`](../namespaces/Measure.md#measureentity) |\n| `settingA?` | [`MeasureSettings`](Measure.MeasureSettings.md) |\n| `settingB?` | [`MeasureSettings`](Measure.MeasureSettings.md) |\n\n#### Returns\n\n`Promise`<[`MeasurementValues`](../namespaces/Measure.md#measurementvalues)\\>\n\n___\n\n### measureLineStrip\n\n▸ **measureLineStrip**(`vertices`): [`LineStripMeasureValues`](Measure.LineStripMeasureValues.md)\n\nMeasure between multiple points.\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `vertices` | `ReadonlyVec3`[] |\n\n#### Returns\n\n[`LineStripMeasureValues`](Measure.LineStripMeasureValues.md)\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.MeasureScene.md", "loc": { "lines": { "from": 250, "to": 287 } } }
    }
  ],
  [
    "121",
    {
      "pageContent": "measureToPoint\n\n▸ **measureToPoint**(`a`, `b`, `setting?`): `Promise`<[`DuoMeasurementValues`](Measure.DuoMeasurementValues.md)\\>\n\nMeasure distance between a measurement object an a 3d point\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `a` | [`MeasureEntity`](../namespaces/Measure.md#measureentity) |\n| `b` | `ReadonlyVec3` |\n| `setting?` | [`MeasureSettings`](Measure.MeasureSettings.md) |\n\n#### Returns\n\n`Promise`<[`DuoMeasurementValues`](Measure.DuoMeasurementValues.md)\\>\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.MeasureScene.md", "loc": { "lines": { "from": 289, "to": 307 } } }
    }
  ],
  [
    "122",
    {
      "pageContent": "pickMeasureEntity\n\n▸ **pickMeasureEntity**(`id`, `selectionPosition`, `tolerance?`): `Promise`<{ `connectionPoint?`: `vec3` ; `entity`: [`MeasureEntity`](../namespaces/Measure.md#measureentity) ; `status`: [`BrepStatus`](../namespaces/Measure.md#brepstatus)  }\\>\n\nReturns the measure entity for given object and location*\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `id` | `ObjectId` |\n| `selectionPosition` | `ReadonlyVec3` |\n| `tolerance?` | [`SnapTolerance`](Measure.SnapTolerance.md) |\n\n#### Returns\n\n`Promise`<{ `connectionPoint?`: `vec3` ; `entity`: [`MeasureEntity`](../namespaces/Measure.md#measureentity) ; `status`: [`BrepStatus`](../namespaces/Measure.md#brepstatus)  }\\>\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.MeasureScene.md", "loc": { "lines": { "from": 309, "to": 327 } } }
    }
  ],
  [
    "123",
    {
      "pageContent": "pickMeasureEntityOnCurrentObject\n\n▸ **pickMeasureEntityOnCurrentObject**(`id`, `selectionPosition`, `tolerance`): `Promise`<{ `connectionPoint?`: `vec3` ; `entity`: [`MeasureEntity`](../namespaces/Measure.md#measureentity) ; `status`: [`BrepStatus`](../namespaces/Measure.md#brepstatus)  }\\>\n\nReturns the measure entity for given object and location if the current object is selected\r\n This is much faster than pickMeasureEntity and can be used for hover*\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `id` | `ObjectId` |\n| `selectionPosition` | `ReadonlyVec3` |\n| `tolerance` | [`SnapTolerance`](Measure.SnapTolerance.md) |\n\n#### Returns\n\n`Promise`<{ `connectionPoint?`: `vec3` ; `entity`: [`MeasureEntity`](../namespaces/Measure.md#measureentity) ; `status`: [`BrepStatus`](../namespaces/Measure.md#brepstatus)  }\\>\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.MeasureScene.md", "loc": { "lines": { "from": 329, "to": 348 } } }
    }
  ],
  [
    "124",
    {
      "pageContent": "pointToPoint\n\n▸ **pointToPoint**(`a`, `b`): [`DuoMeasurementValues`](Measure.DuoMeasurementValues.md)\n\nMeasure distance between 2 points\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `a` | `ReadonlyVec3` |\n| `b` | `ReadonlyVec3` |\n\n#### Returns\n\n[`DuoMeasurementValues`](Measure.DuoMeasurementValues.md)\n\n___\n\n### reverseProfile\n\n▸ **reverseProfile**(`inProfile`): [`Profile`](Measure.Profile.md)\n\nReturn reveresed input profile\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `inProfile` | [`Profile`](Measure.Profile.md) |\n\n#### Returns\n\n[`Profile`](Measure.Profile.md)\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.MeasureScene.md", "loc": { "lines": { "from": 350, "to": 385 } } }
    }
  ],
  [
    "125",
    {
      "pageContent": "swapCylinder\n\n▸ **swapCylinder**(`entity`, `to`): `Promise`<[`MeasureEntity`](../namespaces/Measure.md#measureentity)\\>\n\nSwaps between inner and outer cylinder, returns undefined if there is only one\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `entity` | [`MeasureEntity`](../namespaces/Measure.md#measureentity) |\n| `to` | ``\"inner\"`` \\| ``\"outer\"`` |\n\n#### Returns\n\n`Promise`<[`MeasureEntity`](../namespaces/Measure.md#measureentity)\\>",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.MeasureScene.md", "loc": { "lines": { "from": 387, "to": 402 } } }
    }
  ],
  [
    "126",
    {
      "pageContent": "---\nid: \"Measure.MeasureSettings\"\ntitle: \"Measure API\"\nsidebar_label: \"MeasureSettings\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).MeasureSettings\n\nAdditional options for measurement\n\n## Properties\n\n### cylinderMeasure\n\n• **cylinderMeasure**: `any`\n\nWhere to measure cylinder from, in case of measure between two cylinder, same option will be used for both",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.MeasureSettings.md", "loc": { "lines": { "from": 1, "to": 19 } } }
    }
  ],
  [
    "127",
    {
      "pageContent": "---\nid: \"Measure.ParameterBounds\"\ntitle: \"Measure API\"\nsidebar_label: \"ParameterBounds\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).ParameterBounds\n\nParameter bounds\n\n## Properties\n\n### end\n\n• `Readonly` **end**: `number`\n\nEnd of parameter\n\n___\n\n### start\n\n• `Readonly` **start**: `number`\n\nStart of parameter",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.ParameterBounds.md", "loc": { "lines": { "from": 1, "to": 27 } } }
    }
  ],
  [
    "128",
    {
      "pageContent": "---\nid: \"Measure.PlaneValues\"\ntitle: \"Measure API\"\nsidebar_label: \"PlaneValues\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).PlaneValues\n\nPlaneValues is a collection of values for measuring a single Plane",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.PlaneValues.md", "loc": { "lines": { "from": 1, "to": 11 } } }
    }
  ],
  [
    "129",
    {
      "pageContent": "Properties\n\n### area\n\n• `Optional` `Readonly` **area**: `number`\n\nCalculated area of the plane\n\n___\n\n### entity\n\n• `Readonly` **entity**: [`SelectedEntity`](Measure.SelectedEntity.md)\n\n___\n\n### height\n\n• `Optional` `Readonly` **height**: `number`\n\nHeight of the plane\n\n___\n\n### heightAboveXyPlane\n\n• `Optional` `Readonly` **heightAboveXyPlane**: `number`\n\nY value of the plane origin\n\n___\n\n### innerEdges\n\n• `Readonly` **innerEdges**: [`EdgeValues`](../namespaces/Measure.md#edgevalues)[][]\n\nInner edges of the plane\n\n___\n\n### innerRadius\n\n• `Optional` `Readonly` **innerRadius**: `number`\n\nLargest inner radius of the plane in case of only arcs\n\n___\n\n### kind\n\n• `Readonly` **kind**: ``\"plane\"``\n\n___\n\n### normal\n\n• `Readonly` **normal**: `vec3`\n\nNormal of the plane\n\n___\n\n### outerEdges\n\n• `Readonly` **outerEdges**: [`EdgeValues`](../namespaces/Measure.md#edgevalues)[]\n\nOuter edges of the plane\n\n___\n\n### outerRadius\n\n• `Optional` `Readonly` **outerRadius**: `number`\n\nLargest outer radius of the plane in case of only arcs\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.PlaneValues.md", "loc": { "lines": { "from": 13, "to": 89 } } }
    }
  ],
  [
    "130",
    {
      "pageContent": "outerRadius\n\n• `Optional` `Readonly` **outerRadius**: `number`\n\nLargest outer radius of the plane in case of only arcs\n\n___\n\n### vertices\n\n• `Readonly` **vertices**: `vec3`[]\n\nCorner vertices of the plane\n\n___\n\n### width\n\n• `Optional` `Readonly` **width**: `number`\n\nWidth of the plane",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.PlaneValues.md", "loc": { "lines": { "from": 89, "to": 109 } } }
    }
  ],
  [
    "131",
    {
      "pageContent": "---\nid: \"Measure.PointEntity\"\ntitle: \"Measure API\"\nsidebar_label: \"PointEntity\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).PointEntity\n\n## Properties\n\n### ObjectId\n\n• **ObjectId**: `ObjectId`\n\n___\n\n### drawKind\n\n• **drawKind**: ``\"vertex\"``\n\n___\n\n### instanceIndex\n\n• `Optional` **instanceIndex**: `number`\n\nUsed internally\n\n___\n\n### parameter\n\n• **parameter**: `ReadonlyVec3`\n\nUsed internally\n\n___\n\n### pathIndex\n\n• `Optional` **pathIndex**: `number`\n\nUsed internally",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.PointEntity.md", "loc": { "lines": { "from": 1, "to": 45 } } }
    }
  ],
  [
    "132",
    {
      "pageContent": "---\nid: \"Measure.Profile\"\ntitle: \"Measure API\"\nsidebar_label: \"Profile\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).Profile\n\n2d profile with slope information\n\n## Properties\n\n### bottom\n\n• `Readonly` **bottom**: `number`\n\nLowest Z value on the profile\n\n___\n\n### endElevation\n\n• `Readonly` **endElevation**: `number`\n\nEnd Z value of the profile\n\n___\n\n### profilePoints\n\n• `Readonly` **profilePoints**: `ReadonlyVec2`[]\n\n___\n\n### slopes\n\n• `Readonly` **slopes**: `number`[]\n\nslope between points for n and n -1\n\n___\n\n### startElevation\n\n• `Readonly` **startElevation**: `number`\n\nStart Z value of the profile\n\n___\n\n### top\n\n• `Readonly` **top**: `number`\n\nHighetst Z value on the profile",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.Profile.md", "loc": { "lines": { "from": 1, "to": 57 } } }
    }
  ],
  [
    "133",
    {
      "pageContent": "---\nid: \"Measure.RoadCrossSection\"\ntitle: \"Measure API\"\nsidebar_label: \"RoadCrossSection\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).RoadCrossSection\n\n## Properties\n\n### codes\n\n• `Readonly` **codes**: `number`[]\n\n___\n\n### labels\n\n• `Readonly` **labels**: `string`[]\n\n___\n\n### points\n\n• `Readonly` **points**: `ReadonlyVec3`[]\n\n___\n\n### points2D\n\n• `Readonly` **points2D**: `ReadonlyVec2`[]\n\n___\n\n### slopes\n\n• `Readonly` **slopes**: `Object`\n\n#### Type declaration\n\n| Name | Type |\n| :------ | :------ |\n| `left` | { `end`: `ReadonlyVec3` ; `slope`: `number` ; `start`: `ReadonlyVec3`  } |\n| `left.end` | `ReadonlyVec3` |\n| `left.slope` | `number` |\n| `left.start` | `ReadonlyVec3` |\n| `right` | { `end`: `ReadonlyVec3` ; `slope`: `number` ; `start`: `ReadonlyVec3`  } |\n| `right.end` | `ReadonlyVec3` |\n| `right.slope` | `number` |\n| `right.start` | `ReadonlyVec3` |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.RoadCrossSection.md", "loc": { "lines": { "from": 1, "to": 52 } } }
    }
  ],
  [
    "134",
    {
      "pageContent": "---\nid: \"Measure.RoadProfile\"\ntitle: \"Measure API\"\nsidebar_label: \"RoadProfile\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).RoadProfile\n\n## Properties\n\n### elevations\n\n• **elevations**: `number`[]\n\n___\n\n### name\n\n• **name**: `string`",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.RoadProfile.md", "loc": { "lines": { "from": 1, "to": 21 } } }
    }
  ],
  [
    "135",
    {
      "pageContent": "---\nid: \"Measure.RoadProfiles\"\ntitle: \"Measure API\"\nsidebar_label: \"RoadProfiles\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).RoadProfiles\n\n## Properties\n\n### intervals\n\n• `Readonly` **intervals**: `number`[]\n\n___\n\n### name\n\n• `Readonly` **name**: `strig`\n\n___\n\n### profiles\n\n• `Readonly` **profiles**: [`RoadProfile`](Measure.RoadProfile.md)[]",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.RoadProfiles.md", "loc": { "lines": { "from": 1, "to": 27 } } }
    }
  ],
  [
    "136",
    {
      "pageContent": "---\nid: \"Measure.SelectedEntity\"\ntitle: \"Measure API\"\nsidebar_label: \"SelectedEntity\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).SelectedEntity\n\nInterface often returned from measure-api calles, can be used as input to modify the entity\n\n## Properties\n\n### ObjectId\n\n• **ObjectId**: `ObjectId`\n\nObject id from the web-gl api\n\n___\n\n### drawKind\n\n• **drawKind**: ``\"curveSegment\"`` \\| ``\"edge\"`` \\| ``\"face\"``\n\n___\n\n### instanceIndex\n\n• **instanceIndex**: `number`\n\nUsed internally\n\n___\n\n### parameter\n\n• `Optional` **parameter**: `number` \\| readonly [`number`, `number`] \\| `Float32Array` \\| readonly [`number`, `number`, `number`]\n\nUsed internally\n\n___\n\n### pathIndex\n\n• **pathIndex**: `number`\n\nUsed internally",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.SelectedEntity.md", "loc": { "lines": { "from": 1, "to": 49 } } }
    }
  ],
  [
    "137",
    {
      "pageContent": "---\nid: \"Measure.SnapTolerance\"\ntitle: \"Measure API\"\nsidebar_label: \"SnapTolerance\"\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n[Measure](../namespaces/Measure.md).SnapTolerance\n\nTolerance for picking and snapping to parametric objects\n\n## Properties\n\n### edge\n\n• `Optional` **edge**: `number`\n\n___\n\n### face\n\n• `Optional` **face**: `number`\n\n___\n\n### point\n\n• `Optional` **point**: `number`\n\n___\n\n### segment\n\n• `Optional` **segment**: `number`",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/interfaces/Measure.SnapTolerance.md", "loc": { "lines": { "from": 1, "to": 35 } } }
    }
  ],
  [
    "138",
    {
      "pageContent": "---\nid: \"modules\"\ntitle: \"Measure API\"\nsidebar_label: \"Exports\"\nsidebar_position: 0.5\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n## Namespaces\n\n- [Measure](namespaces/Measure.md)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/modules.md", "loc": { "lines": { "from": 1, "to": 12 } } }
    }
  ],
  [
    "139",
    {
      "pageContent": "---\nid: \"Measure\"\ntitle: \"Measure API\"\nsidebar_label: \"Measure\"\nsidebar_position: 0\ncustom_edit_url: null\ndescription: \"for detailed measuring show distances, differences, elevations and more.\"\n---\n\n## Classes\n\n- [MeasureError](../classes/Measure.MeasureError.md)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/namespaces/Measure.md", "loc": { "lines": { "from": 1, "to": 12 } } }
    }
  ],
  ["140", { "pageContent": "Interfaces", "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/namespaces/Measure.md", "loc": { "lines": { "from": 14, "to": 14 } } } }],
  [
    "141",
    {
      "pageContent": "- [ArcValues](../interfaces/Measure.ArcValues.md)\n- [CameraValues](../interfaces/Measure.CameraValues.md)\n- [CollisionValues](../interfaces/Measure.CollisionValues.md)\n- [CrossSlope](../interfaces/Measure.CrossSlope.md)\n- [CylinderValues](../interfaces/Measure.CylinderValues.md)\n- [DrawObject](../interfaces/Measure.DrawObject.md)\n- [DrawPart](../interfaces/Measure.DrawPart.md)\n- [DrawProduct](../interfaces/Measure.DrawProduct.md)\n- [DrawVoid](../interfaces/Measure.DrawVoid.md)\n- [DrawableEntity](../interfaces/Measure.DrawableEntity.md)\n- [DuoMeasurementValues](../interfaces/Measure.DuoMeasurementValues.md)\n- [FollowParametricObject](../interfaces/Measure.FollowParametricObject.md)\n- [LineStripMeasureValues](../interfaces/Measure.LineStripMeasureValues.md)\n- [LineStripValues](../interfaces/Measure.LineStripValues.md)\n- [LineValues](../interfaces/Measure.LineValues.md)\n- [ManholeMeasureValues](../interfaces/Measure.ManholeMeasureValues.md)\n- [MeasureAPI](../interfaces/Measure.MeasureAPI.md)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/namespaces/Measure.md", "loc": { "lines": { "from": 16, "to": 32 } } }
    }
  ],
  [
    "142",
    {
      "pageContent": "- [LineValues](../interfaces/Measure.LineValues.md)\n- [ManholeMeasureValues](../interfaces/Measure.ManholeMeasureValues.md)\n- [MeasureAPI](../interfaces/Measure.MeasureAPI.md)\n- [MeasureScene](../interfaces/Measure.MeasureScene.md)\n- [MeasureSettings](../interfaces/Measure.MeasureSettings.md)\n- [ParameterBounds](../interfaces/Measure.ParameterBounds.md)\n- [PlaneValues](../interfaces/Measure.PlaneValues.md)\n- [PointEntity](../interfaces/Measure.PointEntity.md)\n- [Profile](../interfaces/Measure.Profile.md)\n- [RoadCrossSection](../interfaces/Measure.RoadCrossSection.md)\n- [RoadProfile](../interfaces/Measure.RoadProfile.md)\n- [RoadProfiles](../interfaces/Measure.RoadProfiles.md)\n- [SelectedEntity](../interfaces/Measure.SelectedEntity.md)\n- [SnapTolerance](../interfaces/Measure.SnapTolerance.md)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/namespaces/Measure.md", "loc": { "lines": { "from": 32, "to": 45 } } }
    }
  ],
  [
    "143",
    {
      "pageContent": "Type Aliases\n\n### AtLeastOne\n\nƬ **AtLeastOne**<`T`, `U`\\>: `Partial`<`T`\\> & `U`[keyof `U`]\n\n#### Type parameters\n\n| Name | Type |\n| :------ | :------ |\n| `T` | `T` |\n| `U` | { [K in keyof T]: Pick<T, K\\> } |\n\n___\n\n### BrepStatus\n\nƬ **BrepStatus**: ``\"loaded\"`` \\| ``\"unknown\"`` \\| ``\"missing\"``\n\n___\n\n### CylinderOptions\n\nƬ **CylinderOptions**: typeof `cylinderOptions`\n\n___\n\n### CylinerMeasureType\n\nƬ **CylinerMeasureType**: { [K in keyof CylinderOptions]: CylinderOptions[K] extends string ? CylinderOptions[K] : never }[keyof `CylinderOptions`]\n\n___\n\n### EdgeValues\n\nƬ **EdgeValues**: [`LineValues`](../interfaces/Measure.LineValues.md) \\| [`ArcValues`](../interfaces/Measure.ArcValues.md) \\| [`LineStripValues`](../interfaces/Measure.LineStripValues.md)\n\nEdgeValues is a collection of values for measurment on a single edge\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/namespaces/Measure.md", "loc": { "lines": { "from": 47, "to": 86 } } }
    }
  ],
  [
    "144",
    {
      "pageContent": "FaceValues\n\nƬ **FaceValues**: [`PlaneValues`](../interfaces/Measure.PlaneValues.md) \\| [`CylinderValues`](../interfaces/Measure.CylinderValues.md)\n\nFaceValues is a collection of values for measurment on a single face\n\n___\n\n### MeasureEntity\n\nƬ **MeasureEntity**: [`SelectedEntity`](../interfaces/Measure.SelectedEntity.md) \\| [`PointEntity`](../interfaces/Measure.PointEntity.md)\n\nInterface often used in the measure-api to describe a selected parametric object,\r\nIt can either be an object or a simple 3d point\r\nAny measure entity can be drawn using getDrawMeasureEntity\n\n___\n\n### MeasurementValues\n\nƬ **MeasurementValues**: [`EdgeValues`](Measure.md#edgevalues) \\| [`FaceValues`](Measure.md#facevalues) \\| [`DuoMeasurementValues`](../interfaces/Measure.DuoMeasurementValues.md)\n\nMeasurementValues is a collection of values for any measurment",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/namespaces/Measure.md", "loc": { "lines": { "from": 88, "to": 110 } } }
    }
  ],
  [
    "145",
    {
      "pageContent": "Functions\n\n### createMeasureAPI\n\n▸ **createMeasureAPI**(`scriptBaseUrl?`): [`MeasureAPI`](../interfaces/Measure.MeasureAPI.md)\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `scriptBaseUrl?` | `string` |\n\n#### Returns\n\n[`MeasureAPI`](../interfaces/Measure.MeasureAPI.md)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/measure-api/namespaces/Measure.md", "loc": { "lines": { "from": 112, "to": 126 } } }
    }
  ],
  [
    "146",
    {
      "pageContent": "---\ntitle: \"Clipping Volumes\"\ndescription: \"Clipping allows you to render only part of a scene.\"\nkeywords: [\"novorender api docs\", \"webgl api\", \"clipping volumes\"]\n---\n\nimport { tutorials } from \"@site/demo-snippets/index\";\n\nClipping allows you to render only part of a scene.\nThis can be useful to reveal internal structures that would otherwise be obscured by surrounding geometry, such as walls and outer shells.\n\n:::note\nClipping volumes does not currently apply to dynamic objects or the test cube scene!\n:::\n\nClipping volumes are formed by a set of planes, or halfspaces.\nEach halfspace is defined by a plane normal vector `nx,ny,nz` and an offset (negative distance) along that vector `o`.\nFrom this we can compute a signed distance to that plane for any given 3D coordinate (x,y,z).\n\n```typescript\nsigned_distance = (x, y, z) => x * nx + y * ny + z * nz + o;",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/clipping_volumes.mdx", "loc": { "lines": { "from": 1, "to": 21 } } }
    }
  ],
  [
    "147",
    {
      "pageContent": "This can be expressed as a 4D dot product where the w component of the input is 1.\n\n```typescript\nsigned_distance = dot_product([x, y, z, 1], [nx, ny, nz, o]);\n```\n\nThe positive side of this plane, i.e. signed_distance > 0, is considered \"outside\" the halfspace, whereas the negative sinde \"inside\".\nPoints that lie outside will we clipped, while the negative ones will be rendered.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/clipping_volumes.mdx", "loc": { "lines": { "from": 24, "to": 31 } } }
    }
  ],
  [
    "148",
    {
      "pageContent": "Single plane\n\nTo illustrate this, let's create a simple clipping volume with a single plane along the yz axes, effectively clipping everything to the right of center.\n\n<PlaygroundComponent {...tutorials.clippingVolumes.single}></PlaygroundComponent>\n\n### Single plane with offset\n\nWe used the center of the scene (which is far from origo) to position the plane.\nLet's add a few meters extra to observe the effects\n\n<PlaygroundComponent {...tutorials.clippingVolumes.offset}></PlaygroundComponent>\n\n### Single plane, flipped\n\nYou may flip the plane by flipping the direction of the normal.\nWhen doing so, also remember to negate the offset.\nOr, to put another way, simply negate all the elements `[-nx,-ny,-nz,-o]`.\n\n<PlaygroundComponent {...tutorials.clippingVolumes.flipped}></PlaygroundComponent>\n\n### Single plane, rotated\n\nOf course, you may use any normal you like for the plane, as long as it's length = 1.\n\n<PlaygroundComponent {...tutorials.clippingVolumes.rotated}></PlaygroundComponent>",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/clipping_volumes.mdx", "loc": { "lines": { "from": 33, "to": 58 } } }
    }
  ],
  [
    "149",
    {
      "pageContent": "Dual plane\n\nAdding additional planes allows us to further shape the clipping volume.\nEach plane forms a half space, which you may think of as the volume of everything that lies on the positive side of the plane to infinity.\nWhen combining multiple such half spaces, we must determine whether to use the intersection or union of these halfspace volumes.\nPut simply, intersection is the volume that lies on the positive side of all the planes, while union is the volume that lines on the positive side of any of the planes.\n\n```typescript\nintersection = sd1 > 0 && sd2 > 0;\nunion = sd1 > 0 || sd2 > 0;",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/clipping_volumes.mdx", "loc": { "lines": { "from": 60, "to": 69 } } }
    }
  ],
  [
    "150",
    {
      "pageContent": ":::info\nFor those familiar with [CSG (constructive solid geometry)](https://en.wikipedia.org/wiki/Constructive_solid_geometry), the clipping volume is defined by a simple CSG expression.\n:::\n\nLet's create a more complex clipping volume with an additional plane along the xz axes, effectively clipping everything to the right and above center.\n\n<PlaygroundComponent {...tutorials.clippingVolumes.dual}></PlaygroundComponent>",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/clipping_volumes.mdx", "loc": { "lines": { "from": 72, "to": 78 } } }
    }
  ],
  [
    "151",
    {
      "pageContent": "Dual plane, slab\n\nA perhaps more useful volume is a slab, consisting of a top and bottom plane, but otherwise extending into infinity.\n\n<PlaygroundComponent {...tutorials.clippingVolumes.slab}></PlaygroundComponent>\n\n### Inverted slab\n\nIf you wish to clip everything inside of the volume, rather than outside, simply flip the planes (negate all elements) and change the combination mode.\n\n<PlaygroundComponent {...tutorials.clippingVolumes.slab_inv}></PlaygroundComponent>",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/clipping_volumes.mdx", "loc": { "lines": { "from": 80, "to": 90 } } }
    }
  ],
  [
    "152",
    {
      "pageContent": "Box\n\nWe currently support up to 6 planes, allowing you to define simple polyhedra of any size, rotation and position.\nLet's define an axis aligned clipping box.\n\n<PlaygroundComponent {...tutorials.clippingVolumes.box}></PlaygroundComponent>\n<br />\n\n:::info\n\nUsing clipping volumes currently does not affect memory usage or significantly impact rendering performance.\nThey simply work by excluding pixels that lie outside the volume at the very last stage of the rendering pipeline.\nTheir intended use it as a visual aid, not as an optimization.\n\n:::",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/clipping_volumes.mdx", "loc": { "lines": { "from": 92, "to": 106 } } }
    }
  ],
  [
    "153",
    {
      "pageContent": "---\ntitle: \"Draw measure objects and results\"\ndescription: \"Draw measure entity or results into a 2D canvas using Measure API.\"\nkeywords: [\"novorender api docs\", \"measure api\", \"2D drawing\"]\n---\n\nimport { tutorials } from \"@site/demo-snippets/index\";\n\nNovoRender measure API can be used to draw measure entity or results into a 2D canvas.\nIt can be used with utility functions found in the open source Novoweb [github repository](https://github.com/novorender/novoweb/blob/develop/src/features/engine2D/utils.ts).\nThese functions are placed in the frontend code to make it easy for developers to change the style of 2d drawings to fit their own application.\nThese functions can also be found at the bottom of the demo",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/drawing2D.mdx", "loc": { "lines": { "from": 1, "to": 12 } } }
    }
  ],
  [
    "154",
    {
      "pageContent": "Draw entites\n\nMany objects returned from the measure API contains a <code>[drawkind](/docs/measure-api/interfaces/Measure.DrawableEntity#drawkind)</code>, as long as the returned value contains this value then it can be drawn using <code>[getDrawMeasureEntity()](/docs/measure-api/interfaces/Measure.MeasureAPI#getdrawmeasureentity)</code>. <code>[getDrawMeasureEntity()](/docs/measure-api/interfaces/Measure.MeasureAPI#getdrawmeasureentity)</code> found in the measure API will return a hierarchical set of objects that be used to draw to screen.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/drawing2D.mdx", "loc": { "lines": { "from": 14, "to": 16 } } }
    }
  ],
  [
    "155",
    {
      "pageContent": "The objects contains both 3d and 2d data and various information about drawing types, names, display text and more.\nThe function will require <code>[view](/docs/webgl-api/interfaces/NovoRender.View)</code> from the NovoRender webgl-API to transform the 3d data to 2d.\nThe <code>[camera](/docs/webgl-api/interfaces/NovoRender.View#camera)</code> from webgl-API view is also used in the draw utility function to remove certain drawing parts and text based on camera angle and distance\n\n:::note\nCheck the parametric measure tutorial on how to select measure entities.\n:::",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/drawing2D.mdx", "loc": { "lines": { "from": 18, "to": 24 } } }
    }
  ],
  [
    "156",
    {
      "pageContent": ":::note\nCheck the parametric measure tutorial on how to select measure entities.\n:::\n\n```typescript\nconst entity = await measureScene.pickMeasureEntity(objectId, position);\nconst drawProd = await measureApi.getDrawMeasureEntity(view, measureScene, entity);\nconst { camera } = view;\nconst cameraDirection = vec3.transformQuat(vec3.create(), vec3.fromValues(0, 0, -1), camera.rotation);\nconst camSettings = { pos: camera.position, dir: cameraDirection };\nif (drawProd) {\n  //Function found in the utility ts file\n  drawProduct(context2D, camSettings, drawProd, { lineColor: \"yellow\", fillColor: \"blue\" }, 3);\n}\n```",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/drawing2D.mdx", "loc": { "lines": { "from": 24, "to": 38 } } }
    }
  ],
  [
    "157",
    {
      "pageContent": "Draw measure result\n\nThe measure result also contains <code>[drawkind](/docs/measure-api/interfaces/Measure.DrawableEntity#drawkind)</code> and can be drawn using <code>[getDrawMeasureEntity()](/docs/measure-api/interfaces/Measure.MeasureAPI#getdrawmeasureentity)</code>.\nThe result will contain information on how to draw the measure line, x, y and z dimensions of the measurement as well as certain angles.\nThe result object can be drawn using the utility function <code>[drawProduct()](https://github.com/novorender/novoweb/blob/develop/src/features/engine2D/utils.ts#L24)</code> as above but we have chosen to handle each part of the result separately to give more flexibility on style and colour.\n\nExample shows distance line drawn in blue, the z-axis line and angle drawn in green",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/drawing2D.mdx", "loc": { "lines": { "from": 40, "to": 46 } } }
    }
  ],
  [
    "158",
    {
      "pageContent": "Example shows distance line drawn in blue, the z-axis line and angle drawn in green\n\n```typescript\nconst measureResult = await measurescene.measure(entity1, entity2);\nconst drawProd = await measureApi.getDrawMeasureEntity(view, measureScene, measureResult);\nfor (const obj of drawProd.objects) {\n  for (const part of obj.parts) {\n    if (part.vertices2D === undefined) {\n      continue;\n    }\n    switch (part.name) {\n      case \"result\":\n        drawPart(context2D, camSettings, part, { lineColor: \"blue\" }, 3, {\n          type: \"distance\",\n        });\n        break;\n      case \"z-axis\":\n        drawPart(context2D, camSettings, part, { lineColor: \"green\" }, 3, {\n          type: \"distance\",\n        });\n        break;\n      case \"z-angle\":\n        drawPart(context2D, camSettings, part, { lineColor: \"green\" }, 2, {\n          type: \"distance\",\n        });\n        break;\n    }\n  }\n}\n```",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/drawing2D.mdx", "loc": { "lines": { "from": 46, "to": 75 } } }
    }
  ],
  [
    "159",
    {
      "pageContent": "Draw line strip or polygon\n\nThe measure API allows for multiple 3d points to be transformed to an on screen-linestrip or polygon.\nThis is used in the Novoweb frontend to display area and measurement between multiple points.\nTo get draw objects from a list of points use <code>[getDrawObjectFromPoints()](/docs/measure-api/interfaces/Measure.MeasureAPI#getdrawobjectfrompoints)</code> on the measure API.\nLike other draw function it takes the webgl API view as an input, there are also options to display angle between the lines and whether or not to close it to create a polygon.\nThe position from webgl API <code>[pick()](/docs/webgl-api/interfaces/NovoRender.View#pick)</code> function can be stored to create lines between multiple clicked points.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/drawing2D.mdx", "loc": { "lines": { "from": 77, "to": 83 } } }
    }
  ],
  [
    "160",
    {
      "pageContent": "```typescript\n//Draw a point line with line names and angles\nconst drawProd = measureApi.getDrawObjectFromPoints(view, pointLinePoints, false, true);\nif (drawProd) {\n  const textList = pointLineResult.segmentLengths.map((v) => v.toFixed(2));\n  drawProd.objects.forEach((obj) => {\n    obj.parts.forEach((part) => {\n      drawPart(context2D, camSettings, part, { lineColor: \"yellow\", pointColor: { start: \"green\" } }, 2, { type: \"distance\", customText: textList });\n    });\n  });\n}\n```",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/drawing2D.mdx", "loc": { "lines": { "from": 85, "to": 96 } } }
    }
  ],
  [
    "161",
    {
      "pageContent": "Demo\n\nClick to select parametric object, the selected parametric object will be draw, do note that a point will be drawn if the selected object does not contain parametric info.\nClick another object to measure against, the parametric object will be drawn as well as the measure result.\nContinued clicks will alternate between objects and log out the measurement values.\n\n<PlaygroundComponent {...tutorials.drawing2D.drawing_2d}></PlaygroundComponent>",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/drawing2D.mdx", "loc": { "lines": { "from": 98, "to": 104 } } }
    }
  ],
  [
    "162",
    {
      "pageContent": "---\ntitle: \"Dynamic Objects\"\ndescription: \"Adding dynamic 3D objects into the view.\"\nkeywords: [\"novorender api docs\", \"webgl api\", \"dynamic objects\"]\n---\n\nimport { tutorials } from \"@site/demo-snippets/index\";\n\nWhile NovoRender is mostly about streaming and rendering large, static 3D scenes, sometimes you may want to add smaller, dynamic 3D objects into the view.\nDynamic objects are meant for small and lightweight objects, such as 3D widgets or avatars.\nCurrently we support [glTF 2.0](https://www.khronos.org/gltf/) (.gltf/.glb).\nYou can download these from any url, but we do provide a few gltf models on our server: https://api.novorender.com/assets/gltf/\n\n:::caution\nPlease note that we don't currently support any glTF extensions. Nor do we support animations or skinning, among other things.\nWe recommend verifying your files using https://github.khronos.org/glTF-Validator/ or similar before use.\n:::",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/dynamic_objects.mdx", "loc": { "lines": { "from": 1, "to": 17 } } }
    }
  ],
  [
    "163",
    {
      "pageContent": "Creation\n\nTo download and parse a gltf file, call the <code>[api.loadAsset()](/docs/webgl-api/interfaces/NovoRender.API#loadasset)</code> function with a valid url, where api is an instance of our [webgl-api](/docs/webgl-api/interfaces/NovoRender.API).\n\n```typescript\nconst asset = await api.loadAsset(new URL(\"https://api.novorender.com/assets/gltf/logo.glb\"));\n```\n\n:::caution\nAvoid using large gltf files on mobile devices as these have quite severe memory and triangle restrictions!\n:::\nNow you can create instances of this asset in your scenes. You may reuse the same asset in multiple scenes.\n\n```typescript\nconst instance = scene.createDynamicObject(asset);",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/dynamic_objects.mdx", "loc": { "lines": { "from": 19, "to": 33 } } }
    }
  ],
  [
    "164",
    {
      "pageContent": "By default, new objects will have position `[0,0,0]` and no rotation `[0,0,0,1]`.\n\n:::info\nThe size of the gltf files should match the size of your scene.\nThe camera will not auto-fit to dynamic objects, so make sure the units are in meters and that the coordinates are in the same space as your scene, which could be geo-referenced.\n:::\n\nTo change object orientation, assign new position and/or rotation.\n\n```typescript\ninstance.position = [x, y, z]; // 3D vector\ninstance.rotation = [0, 0, 0, 1]; // identity quaternion\n```\n\nWhile you can use raw arrays like above for trivial cases, it's likely that you will want to use a linear algebra library, like [gl-matrix](https://glmatrix.net/).\n\n```typescript\ninstance.position = vec3.fromValues(px, py, pz); // 3D vector\ninstance.rotation = quat.fromEuler(quat.create(), rx, ry, rz); // Quaternion from euler angles\n```\n\nNew objects are invisible by default. To actually render your object, change the visible flag.\n\n```typescript\ninstance.visible = true;\n```",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/dynamic_objects.mdx", "loc": { "lines": { "from": 36, "to": 61 } } }
    }
  ],
  [
    "165",
    {
      "pageContent": "Demo\n\n<PlaygroundComponent {...tutorials.dynamicObjects.dynamic_object}></PlaygroundComponent>\n\n### Disposing\n\nTo delete/remove an instance, call <code>[dispose()](/docs/webgl-api/interfaces/NovoRender.API#dispose)</code>.\n\n```typescript\ninstance.dispose();\n```\n\nOnce you've disposed all the instances of an asset, you may dispose the asset itself to free up all the associated memory.\n\n```typescript\nasset.dispose();\n```\n\n:::note\nWhen disposing an asset, the render pipeline may still have a reference to the model for the next frame.\nIf so, you would get an error.\nYou may want to render a frame or two first, to flush out any such lingering references.\n:::",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/dynamic_objects.mdx", "loc": { "lines": { "from": 63, "to": 85 } } }
    }
  ],
  [
    "166",
    {
      "pageContent": "---\ntitle: \"Getting started\"\nsidebar_position: 1\ndescription: \"Setting up instructions for the various Novorender packages.\"\nkeywords: [\"novorender api docs\", \"webgl api\", \"measure api\", \"data js api\", \"getting started\"]\n---\n\nimport { tutorials } from \"@site/demo-snippets/index\";\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport Link from \"@docusaurus/Link\";",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/getting_started.mdx", "loc": { "lines": { "from": 1, "to": 11 } } }
    }
  ],
  [
    "167",
    {
      "pageContent": "Installation\n\nAll our APIs are available on NPM and can be installed with your preferred JS package manager.  \nTo get started with Novorender and load a demo scene you will only need our [webgl-api](https://www.npmjs.com/package/@novorender/webgl-api) package.\n\n<Tabs groupId=\"package-managers-choice\">\n  <TabItem value=\"npm\" label=\"NPM\" default>\n\n```bash\nnpm install @novorender/webgl-api@next @novorender/data-js-api @novorender/measure-api\n```\n\n  </TabItem>\n  <TabItem value=\"yarn\" label=\"Yarn\">\n\n```bash\nyarn add @novorender/webgl-api@next @novorender/data-js-api @novorender/measure-api\n```\n\n  </TabItem>\n</Tabs>\n\n---",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/getting_started.mdx", "loc": { "lines": { "from": 13, "to": 35 } } }
    }
  ],
  [
    "168",
    {
      "pageContent": "Bundlers\n\nThe webgl and measure APIs depend on workers which are not bundled and should be hosted as static files on your server.  \nThe recommended approach is to copy them over to a static folder (often called public) after installation, which can be done with the `dependencies` or `postinstall` lifecycle scripts depending on your package manager.\n\n```js title=\"scripts/copy-novorender-workers.js\"\nconst fs = require(\"fs\");\n\nconst options = {\n  force: true, // overwrite files\n  recursive: true,\n};\n\nfs.cpSync(\"node_modules/@novorender/webgl-api\", \"public/novorender/webgl-api\", options);\nfs.cpSync(\"node_modules/@novorender/measure-api\", \"public/novorender/measure-api\", options);\n```\n\n<Tabs groupId=\"package-managers-choice\">\n  <TabItem value=\"npm\" label=\"NPM\" default>\n\n```json title=\"package.json\"\n{\n  // ...,\n  \"scripts\": {\n    //  ...,\n    \"dependencies\": \"node ./scripts/copy-novorender-workers.js\"\n  }\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/getting_started.mdx", "loc": { "lines": { "from": 37, "to": 64 } } }
    }
  ],
  [
    "169",
    {
      "pageContent": "</TabItem>\n  <TabItem value=\"yarn\" label=\"Yarn\">\n\n```json title=\"package.json\"\n{\n  // ...,\n  \"scripts\": {\n    //  ...,\n    \"postinstall\": \"node ./scripts/copy-novorender-workers.js\"\n  }\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/getting_started.mdx", "loc": { "lines": { "from": 67, "to": 77 } } }
    }
  ],
  [
    "170",
    {
      "pageContent": "</TabItem>\n</Tabs>\n\nexport const CodeExamplesTip = () => (\n  <div\n    style={{\n      border: \"1px solid var(--ifm-color-primary)\",\n      margin: \"20px 0\",\n      padding: 10,\n      borderRadius: \"var(--ifm-code-border-radius)\",\n    }}\n  >\n    <div style={{ display: \"flex\" }}>\n      <div style={{ fontSize: 38 }}>💡</div>\n      <div>\n        <p style={{ fontSize: 24, margin: 0 }}>Looking for more examples?</p>\n        <p style={{ fontSize: 12 }}>Check out these sample projects that utilise some of the common module bundlers.</p>\n      </div>\n    </div>\n    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n      {[\"vite\", \"webpack\", \"local_esm\"].map((i) => (\n        <Link to={`https://github.com/novorender/novorender-examples/tree/master/${i}`} key={i} style={{ margin: 5 }}>\n          <img src={require(`../../static/img/${i}.png`).default} style={{ width: 100, borderRadius: 5 }} />\n        </Link>\n      ))}\n    </div>\n  </div>\n);\n\n<CodeExamplesTip />\n\n---",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/getting_started.mdx", "loc": { "lines": { "from": 80, "to": 111 } } }
    }
  ],
  [
    "171",
    {
      "pageContent": "Basic usage\n\n```html title=\"index.html\"\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Novorender demo</title>\n    <style>\n      body {\n        margin: 0;\n        overflow: hidden;\n      }\n\n      canvas {\n        outline: 0;\n        touch-action: none;\n        height: 100vh;\n        width: 100vw;\n      }\n    </style>\n  </head>\n  <body>\n    <canvas id=\"canvas\"></canvas>\n    <script type=\"module\" src=\"/main.js\"></script>\n  </body>\n</html>",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/getting_started.mdx", "loc": { "lines": { "from": 113, "to": 140 } } }
    }
  ],
  [
    "172",
    {
      "pageContent": "```typescript title=\"src/main.ts\"\nimport { API, createAPI, WellKnownSceneUrls } from \"@novorender/webgl-api\";\n\nconst api = createAPI({\n  // Path to where the files previously copied from node_modules are hosted\n  scriptBaseUrl: `${window.location.origin}/novorender/webgl-api/`,\n});\nconst canvas = document.querySelector<HTMLCanvasElement>(\"#canvas\")!;\nmain(api, canvas);\n\nasync function main(api: API, canvas: HTMLCanvasElement) {\n  // create a view\n  const view = await api.createView(\n    { background: { color: [0, 0, 0, 0] } }, // transparent\n    canvas\n  );\n\n  // provide a camera controller\n  view.camera.controller = api.createCameraController({ kind: \"turntable\" });\n\n  // load the Condos demo scene\n  view.scene = await api.loadScene(WellKnownSceneUrls.condos);\n\n  // create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/getting_started.mdx", "loc": { "lines": { "from": 143, "to": 167 } } }
    }
  ],
  [
    "173",
    {
      "pageContent": "// load the Condos demo scene\n  view.scene = await api.loadScene(WellKnownSceneUrls.condos);\n\n  // create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // main render loop\n  while (true) {\n    // handle canvas resizes\n    const { clientWidth, clientHeight } = canvas;\n    view.applySettings({\n      display: { width: clientWidth, height: clientHeight },\n    });\n\n    // render frame\n    const output = await view.render();\n    {\n      // finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // display in canvas\n        ctx?.transferFromImageBitmap(image);\n        image.close();\n      }\n    }\n  }\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/getting_started.mdx", "loc": { "lines": { "from": 167, "to": 193 } } }
    }
  ],
  ["174", { "pageContent": "---", "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/getting_started.mdx", "loc": { "lines": { "from": 193, "to": 193 } } } }],
  [
    "175",
    {
      "pageContent": "Demo\n\nOnly the function `main()` is included in the live editors.  \nTry changing the [background color](../webgl-api/interfaces/NovoRender.RenderSettings#background) on line 18 or the [camera controller](../webgl-api/interfaces/NovoRender.API#createcameracontroller) on line 23 in the example below.\n\n<PlaygroundComponent {...tutorials.gettingStarted.basic_condos_1} />",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/getting_started.mdx", "loc": { "lines": { "from": 386, "to": 391 } } }
    }
  ],
  [
    "176",
    {
      "pageContent": "<PlaygroundComponent {...tutorials.gettingStarted.basic_condos_1} />\n\nexport const PlaygroundTip = () => (\n  <div\n    style={{\n      border: \"1px solid var(--ifm-color-primary)\",\n      margin: \"20px 0\",\n      padding: 10,\n      borderRadius: \"var(--ifm-code-border-radius)\",\n    }}\n  >\n    <div style={{ display: \"flex\" }}>\n      <div style={{ fontSize: 38 }}>💡</div>\n      <div>\n        <p style={{ fontSize: 24, margin: 0 }}>Need more demonstrations?</p>\n        <p style={{ fontSize: 12 }}>The Playground page contains 20+ demos covering various aspects of different Novorender packages.</p>\n      </div>\n    </div>\n    <Link to=\"/playground\" className=\"button button--primary\" style={{ display: \"block\", margin: \"0 auto\", maxWidth: 300 }}>\n      Go to Playground\n    </Link>\n  </div>\n);\n\n<PlaygroundTip />",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/getting_started.mdx", "loc": { "lines": { "from": 391, "to": 415 } } }
    }
  ],
  [
    "177",
    {
      "pageContent": "---\ntitle: \"Loading scenes\"\nsidebar_position: 2\ndescription: \"Loading scenes via Data JS API or Data REST API.\"\nkeywords: [\"novorender api docs\", \"webgl api\", \"data js api\", \"loading scenes\"]\n---\n\nimport { tutorials } from \"@site/demo-snippets/index\";\n\nTo load your own scenes we recommend that you use the [`@novorender/data-js-api`](../data-js-api) package, but you can also use the [Novorender data REST API](/data-rest-api) directly if you prefer.\nWe will be using the npm package in all our examples.\n\n## Public scenes\n\n<PlaygroundComponent {...tutorials.loadingScenes.public_scene} />",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/loading_scenes.mdx", "loc": { "lines": { "from": 1, "to": 15 } } }
    }
  ],
  [
    "178",
    {
      "pageContent": "Private scenes\n\nOnly scene related endpoints are covered by the NPM package, so for user / authentication endpoints you will have to use the REST API as well.\n\n### Username / Password\n\n<PlaygroundComponent {...tutorials.loadingScenes.private_scene} />\n\n### Active Directory\n\nTo get started authenticating with Active Directory we recommend you use [MSAL](https://learn.microsoft.com/en-us/azure/active-directory/develop/msal-overview) with the following config:\n\n```json\n{\n  \"clientId\": \"074eb42a-f94a-4a97-b7ad-0a187eb57f96\",\n  \"authority\": \"https://login.microsoftonline.com/{YOUR_TENANT_ID}\",\n  \"scopes\": [\"api://074eb42a-f94a-4a97-b7ad-0a187eb57f96/resource.read\", \"api://074eb42a-f94a-4a97-b7ad-0a187eb57f96/scene.edit\"]\n}\n```\n\nOnce you have authenticated and acquired an access token you can follow the [example for username/password flow](#username--password), just use the access token you got from AD instead of <code>POST [/api/user/login](/data-rest-api/#/operations/Login)</code>.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/loading_scenes.mdx", "loc": { "lines": { "from": 17, "to": 37 } } }
    }
  ],
  [
    "179",
    {
      "pageContent": "---\ntitle: \"Object groups\"\nsidebar_position: 5\ndescription: \"Object grouping.\"\nkeywords: [\"novorender api docs\", \"webgl api\", \"data js api\", \"object groups\"]\n---\n\nimport { tutorials } from \"@site/demo-snippets/index\";\n\nAlthough the [ObjectGroup interface](/docs/data-js-api/interfaces/DataJsAPI.ObjectGroup) itself is not particularly noteworthy,\nthe <code>[SceneData.objectGroups](/docs/data-js-api/interfaces/DataJsAPI.SceneData#objectgroups)</code> property can be extremely useful.\nObject IDs in Novorender are not fixed and may change whenever the scene's resources are modified.\nTherefore if you store the IDs from a search (e.g. all objects on the first floor) and then later modify the scene's resources,\nthe scene's objects' IDs may have changed and your stored list of IDs will be stale.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/object_groups.mdx", "loc": { "lines": { "from": 1, "to": 14 } } }
    }
  ],
  [
    "180",
    {
      "pageContent": "The search patterns assigned to each object group is run every time a scene's resources are modified so that the list of IDs always will be correct.\nThat way you can easily create cached searches by using object groups.\n\nIn the case where the <code>[objectGroups.ids](/docs/data-js-api/interfaces/DataJsAPI.Bookmark.ObjectGroup#ids)</code> list is quite large, the .ids property is `undefined` and should be explicity loaded as shown in the [Floors example](#floors-example).",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/object_groups.mdx", "loc": { "lines": { "from": 16, "to": 19 } } }
    }
  ],
  [
    "181",
    {
      "pageContent": "Create group\n\n```typescript\n// Search utility fn to return array of object IDs\nasync function search(scene: Scene, searchPattern: SearchPattern[]): Promise<number[]> {\n  const iterator = scene.search({ searchPattern });\n\n  const result: number[] = [];\n  for await (const object of iterator) {\n    result.push(object.id);\n  }\n\n  return result;\n}\n\n// Search pattern to assign to group\nconst searchPattern: SearchPattern[] = [\n  {\n    property: \"path\",\n    value: \"Farger.IFC/3/Surface:2481563/Apartment with 12 condos/2ND FLOOR\",\n    exact: true,\n  },\n];",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/object_groups.mdx", "loc": { "lines": { "from": 21, "to": 43 } } }
    }
  ],
  [
    "182",
    {
      "pageContent": "const secondFloor: ObjectGroup = {\n  // This search is run on the server every time the scene is rebuilt\n  // and the resulting object IDs are saved to the group.ids property\n  search: searchPattern,\n  // The search is not run when the groups are saved\n  // so you have to run it client side and set the .ids property yourself when you create the group\n  ids: await search(scene, searchPattern),\n  // Search deep\n  includeDescendants: true,\n  // The remaining properties are not used for anything on the server\n  // Group id - UUIDv4 in this case, but it's up to you\n  id: \"56196cbf-f5aa-4f65-9934-911546f89225\",\n  name: \"2nd floor\", // Display name\n  grouping: \"\", // We use this as a path style string to nest groups in the UI\n  color: [1, 0, 0, 1], // Can be used to highlight objects in group\n  selected: false,\n  hidden: false,\n};",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/object_groups.mdx", "loc": { "lines": { "from": 45, "to": 62 } } }
    }
  ],
  [
    "183",
    {
      "pageContent": "// Before saving it is a good idea to load the latest scene data\n// in case it has been modified by someone else as there is currently no way of just adding groups\nconst sceneData = await dataApi.loadScene(SCENE_ID);\n\ndataApi.putScene({\n  // Keep most of the data\n  ...sceneData,\n  // scene.id is the id of the main/admin scene while SCENE_ID is the viewer scene id\n  url: `${SCENE_ID}:${scene.id}`,\n  // Overwrite .objectGroups\n  objectGroups: [secondFloor],\n});\n\n// Now that the group is saved the .ids property will be kept up to date by the server\n```",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/object_groups.mdx", "loc": { "lines": { "from": 64, "to": 78 } } }
    }
  ],
  [
    "184",
    {
      "pageContent": "Modify groups\n\n```typescript title=\"Edit a group\"\n// Load scene data\nconst sceneData = await dataApi.loadScene(SCENE_ID);\n// ID of group to edit\nconst toEdit = \"56196cbf-f5aa-4f65-9934-911546f89225\";\n// Create new array with the changes applied.\n// In this case name is set to \"Updated name\"\nconst updatedGroups = sceneData.objectGroups.map((group) => (group.id === toEdit ? { ...group, name: \"Updated name\" } : group));\n\n// Save scene\ndataApi.putScene({\n  ...sceneData,\n  url: `${SCENE_ID}:${scene.id}`,\n  objectGroups: updatedGroups,\n});\n```\n\n```typescript title=\"Delete a group\"\n// Load scene data\nconst sceneData = await dataApi.loadScene(SCENE_ID);\n// ID of group to delete\nconst toDelete = \"56196cbf-f5aa-4f65-9934-911546f89225\";\n// Create new array without the group to delete\nconst updatedGroups = sceneData.objectGroups.filter((group) => group.id !== toDelete);\n\n// Save scene\ndataApi.putScene({\n  ...sceneData,\n  url: `${SCENE_ID}:${scene.id}`,\n  objectGroups: updatedGroups,\n});\n```",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/object_groups.mdx", "loc": { "lines": { "from": 80, "to": 113 } } }
    }
  ],
  [
    "185",
    {
      "pageContent": "Floors example\n\nIn this example we have predefined groups which are set up for each floor and created buttons to isolate <code>[objectGroups](/docs/data-js-api/interfaces/DataJsAPI.Bookmark-1#objectgroups)</code>\nin clicked floor's group.\n\n<PlaygroundComponent {...tutorials.objectGroups.floors} />",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/object_groups.mdx", "loc": { "lines": { "from": 115, "to": 120 } } }
    }
  ],
  [
    "186",
    {
      "pageContent": "---\ntitle: \"Object metadata\"\nsidebar_position: 6\ndescription: \"Object metadata.\"\ntags:\n  - Properties\n  - Zoom to\n  - Move to\n  - Fly to\nkeywords: [\"novorender api docs\", \"webgl api\", \"object metadata\"]\n---\n\nimport { tutorials } from \"@site/demo-snippets/index\";\n\nObject metadata is not loaded automatically with the scene and may require additional server requests depending on what data you need.\nGenerally you will work with either <code>[HierarchicalObjectReference](/docs/webgl-api/interfaces/NovoRender.HierarcicalObjectReference)</code> or the full <code>[ObjectData](/docs/webgl-api/interfaces/NovoRender.ObjectData)</code> metadata set.\n\n## From pick\n\nIf you are not already familiar with picking, see [Object selection](./object_selection) first.\n\n<PlaygroundComponent {...tutorials.objectMetadata.metadata_from_pick} />",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/object_metadata.mdx", "loc": { "lines": { "from": 1, "to": 22 } } }
    }
  ],
  [
    "187",
    {
      "pageContent": "From pick\n\nIf you are not already familiar with picking, see [Object selection](./object_selection) first.\n\n<PlaygroundComponent {...tutorials.objectMetadata.metadata_from_pick} />\n\n## From search\n\nIf you are not already familiar with searching, see [Searching](./searching) first.\n\n<PlaygroundComponent {...tutorials.objectMetadata.metadata_from_search} />\n\n## Fly to objects\n\nThe previous examples show how to load object data and dump it in a box.  \nIn this example we will show how to fly to objects using <code>[CameraController.zoomTo()](/docs/webgl-api/interfaces/NovoRender.CameraController#zoomto)</code>.  \nWhen the example is run it will first do a quick search for 4 objects and fly to them. After that it will fly to any object you click.\n\n<PlaygroundComponent {...tutorials.objectMetadata.fly_to} />",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/object_metadata.mdx", "loc": { "lines": { "from": 22, "to": 40 } } }
    }
  ],
  [
    "188",
    {
      "pageContent": "---\ntitle: \"Object Selection\"\nsidebar_position: 3\ndescription: \"Highlighting sets of objects using WebGL API.\"\nkeywords: [\"novorender api docs\", \"webgl api\", \"object selection\"]\n---\n\nimport { tutorials } from \"@site/demo-snippets/index\";\n\nNovoRender lets you highlight sets of objects.\nThis could be used to visualize current object selection, or groups of objects, for instance the results of data queries.\n\n### Object Identity\n\nAll the objects in a scene are enumerated and assigned a unique integer id/index, expressed as <code>[ObjectId](/docs/webgl-api/interfaces/NovoRender.PickInfo#objectid)</code>.\n\nOne way of obtaining such an id is using the <code>[pick()](/docs/webgl-api/interfaces/NovoRender.View#pick)</code> function, which lets you pick the frontmost object, if any, at the given x,y canvas coordinate.\n\n```typescript\nconst result = await renderOutput.pick(x, y);\nif (result) {\n  const { objectId } = result;\n}\n```",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/object_selection.mdx", "loc": { "lines": { "from": 1, "to": 24 } } }
    }
  ],
  [
    "189",
    {
      "pageContent": "Object highlighting\n\nTo highlight the picked object, we must create a highlight object.\nHighlighting works by performing a linear transform of the red, green, blue and alpha (opacity) channels.\nFor now, we'll simply make the selected object lime green.\n\n```typescript\nconst red = 0.0;\nconst green = 1.0;\nconst blue = 0.0;\nconst highlightGroup1 = api.createHighlight({\n  kind: \"color\",\n  color: [red, green, blue],\n});\n```\n\nHighlights are applied to groups of objects.\nBy default, all objects are assigned to group #0.\nTo make our picked object stand out, we assign it to group #1.\n\n```typescript\nscene.objectHighlighter.objectHighlightIndices[objectId] = 1;\nscene.objectHighlighter.commit(); // call this to commit all changes\n```\n\nTo make our selected objects stand out even further, we make all other objects less colorful by halving their color saturation.\n\n```typescript\nconst highlightGroup0 = api.createHighlight({ kind: \"hsla\", saturation: 0.5 });",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/object_selection.mdx", "loc": { "lines": { "from": 26, "to": 54 } } }
    }
  ],
  [
    "190",
    {
      "pageContent": "We then assign these highlights to our two groups, default and selected respectively:\n\n```typescript\nview.settings.objectHighlights = [highlightGroup0, highlightGroup1];\n```",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/object_selection.mdx", "loc": { "lines": { "from": 57, "to": 61 } } }
    }
  ],
  [
    "191",
    {
      "pageContent": "Demo\n\nClick on objects to turn them green.\n\n<PlaygroundComponent {...tutorials.objectSelection.pick}></PlaygroundComponent>\n<br />\n\n:::note\nCurrently, there are a maximum of 256 highlight groups, the last one (#255) being reserved for objects that should not be rendered.\n:::",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/object_selection.mdx", "loc": { "lines": { "from": 63, "to": 72 } } }
    }
  ],
  [
    "192",
    {
      "pageContent": "---\ntitle: \"Parametric measure\"\ndescription: \"Fetch parametric data based on real world position, and calculate measurements between 2 objects using Measure API.\"\nkeywords: [\"novorender api docs\", \"webgl api\", \"measure api\", \"parametric measure\"]\n---\n\nimport { tutorials } from \"@site/demo-snippets/index\";\n\nNovoRender measure API can be used to fetch parametric data based on real world position, and calculate measurements between 2 objects",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/parametric_measure.mdx", "loc": { "lines": { "from": 1, "to": 9 } } }
    }
  ],
  [
    "193",
    {
      "pageContent": "Measure entity\n\nA measure entity refers to a part of a parametric object, for example the inner or outer cylinder of a pipe.\nA measure entity can also be a single point, this is usually used if no parametric object exists at a clicked location.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/parametric_measure.mdx", "loc": { "lines": { "from": 11, "to": 14 } } }
    }
  ],
  [
    "194",
    {
      "pageContent": "The normal way of getting measure entities is to used the <code>[pickMeasureEntity()](/docs/measure-api/interfaces/Measure.MeasureScene#pickmeasureentity)</code> function on the measure <code>[scene](/docs/measure-api/interfaces/Measure.MeasureScene#pickmeasureentity)</code> object. This will use world coordinates and <code>[objectId](/docs/webgl-api/interfaces/NovoRender.PickInfo#objectid)</code> to find the closest edge surface or point. It will return the picked point if no parametric data is found near the input point. <code>[objectId](/docs/webgl-api/interfaces/NovoRender.PickInfo#objectid)</code> and <code>[position](/docs/webgl-api/interfaces/NovoRender.PickInfo#position)</code> can be used from the novorender webgl-api <code>[pick](/docs/webgl-api/interfaces/NovoRender.View#pick)</code> function on render <code>[renderOutput](/docs/webgl-api/interfaces/NovoRender.RenderOutput)</code>",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/parametric_measure.mdx", "loc": { "lines": { "from": 16, "to": 16 } } }
    }
  ],
  [
    "195",
    {
      "pageContent": "```typescript\nconst output = await view.render();\nconst result = output.pick(x, y);\nif (result) {\n  const entity = await measureScene.pickMeasureEntity(result.objectId, result.position);\n}\n```",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/parametric_measure.mdx", "loc": { "lines": { "from": 18, "to": 24 } } }
    }
  ],
  [
    "196",
    {
      "pageContent": "Parametric values on entity\n\nTo get the parametric values such as the the radius, and centerline of a cylinder the <code>[measure()](/docs/measure-api/interfaces/Measure.MeasureScene#measure)</code>\nfunction can be used. This function be be used to get values from a single object by leaving the second argument as undefined.\n\n```typescript\nconst measureValues = measurescene.measure(entity);\nif (measureValues.kind === \"cylinder\") {\n  console.log(`Radius of cylinder is: ${measureValues.radius}`);\n}\n```",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/parametric_measure.mdx", "loc": { "lines": { "from": 26, "to": 36 } } }
    }
  ],
  [
    "197",
    {
      "pageContent": "Measure against another entity\n\nA measure between two entities is done by using the <code>[measure()](/docs/measure-api/interfaces/Measure.MeasureScene#measure)</code> function on scene with 2 arguments.\nWhat property the resulting object has will depend on the input arguments. There is also an option parameter\nto support additional options such as where a cylinder should measure from\n\n```typescript\nconst output = await view.render();\nconst result1 = output.pick(x1, y1);\n\nconst result2 = output.pick(x2, y2);\nif (result1 && result2) {\n  const entity1 = await measureScene.pickMeasureEntity(result1.objectId, result1.position);\n\n  const entity2 = await measureScene.pickMeasureEntity(result2.objectId, result2.position);\n\n  const measureValues = (await measurescene.measure(entity1, entity2)) as DuoMeasurementValues | undefined;\n  if (measureValues && measureValues.distance) {\n    console.log(`Distance between objects is: ${measureValues.distance}`);\n  }\n}\n```",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/parametric_measure.mdx", "loc": { "lines": { "from": 38, "to": 59 } } }
    }
  ],
  [
    "198",
    {
      "pageContent": "Demo\n\nClick to select parametric object, parametric data will be shown in an alert dialog. Select another object and the measurement data between the objects will be shown in the alert dialog.\nClicking further objects will alternate between first and second selected and show measure values within an alert dialog.\n\n<PlaygroundComponent {...tutorials.measure.parametric_measure}></PlaygroundComponent>\n<br />\n\n:::note\nCurrently, there are a maximum of 256 highlight groups, the last one (#255) being reserved for objects that should not be rendered.\n:::",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/parametric_measure.mdx", "loc": { "lines": { "from": 61, "to": 71 } } }
    }
  ],
  [
    "199",
    {
      "pageContent": "---\ntitle: \"Utility to place PDF correctly on a 3D asset\"\ndescription: \"Use two reference points on both the model and the PDF to place and scale the PDF in 3D space\"\nkeywords: [\"novorender api docs\", \"webgl api\", \"measure api\", \"data js api\", \"placing pdf\"]\n---\n\nimport { tutorials } from \"@site/demo-snippets/index\";\n\nNormally PDF drawing are not scaled to the 3D geometry, correctly placing and scaling the PDF to fit the 3D geometry\nby manipulaing scale, rotation and translations can be difficult. This tutorial will show how we can use the Novorender framework\nto help place the PDF correctly. The tutorial is using a floorplan for a building as an example.\n\n:::note\nThis tutorial is using database search multiple times, For more information on how to search and loading SceneData, see [Searching](./searching) first.\n:::",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/placing_pdf.mdx", "loc": { "lines": { "from": 1, "to": 15 } } }
    }
  ],
  [
    "200",
    {
      "pageContent": "Fetch and draw PDF preview\n\nPDF documents uploaded to Novorender will have a preview property that can be used to display the PDF as an image.\nThis image can be found by using database search and getting the metadata.\n\n```typescript\nconst pdfScene = (await dataApi.loadScene(\"bad260f94a5340b9b767ea2756392be4\")) as SceneData;\nif (pdfScene.db) {\n  //Search for preview Property\n  const iterator = pdfScene.db.search(\n    {\n      searchPattern: [{ property: \"Novorender/Document/Preview\", exact: true }],\n    },\n    undefined\n  );\n  const iteratorResult = await iterator.next();\n  const data = await iteratorResult.value.loadMetaData();\n  for (const prop of data.properties) {\n    if (prop[0] === \"Novorender/Document/Preview\") {\n      const url = new URL((scene as any).url);\n      url.pathname += prop[1];\n      // This is the PDF image URL\n      return url.toString();\n    }\n  }\n}\nreturn undefined;\n\nfor (let i = 0; i < 5; i++) {\n  const iteratorResult = await iterator.next();",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/placing_pdf.mdx", "loc": { "lines": { "from": 17, "to": 46 } } }
    }
  ],
  [
    "201",
    {
      "pageContent": "for (let i = 0; i < 5; i++) {\n  const iteratorResult = await iterator.next();\n\n  if (iteratorResult.done) {\n    break;\n  }\n\n  // Because we have set the search option \"full: true\"\n  // .loadMetadata() will not result in any more requests being made\n  // Try flipping it to false and see the difference in the network request log\n  const objectWithMetadata = await iteratorResult.value.loadMetaData();\n  searchResult.push(objectWithMetadata);\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/placing_pdf.mdx", "loc": { "lines": { "from": 46, "to": 58 } } }
    }
  ],
  [
    "202",
    {
      "pageContent": "The image can be drawn on a 2d canvas\n\n```typescript\nconst img = new Image();\nimg.onload = function () {\n  if (context) {\n    context.drawImage(img, 0, 0, img.width, img.height, 0, 0, img.width, img.height);\n  }\n};\nimg.src = previewImage;\n```\n\n:::note\nThis tutorial is written without scaling or moving the image, if scaling and translations are used then these needs to be reveresed in\ncalculation section below\n:::",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/placing_pdf.mdx", "loc": { "lines": { "from": 61, "to": 76 } } }
    }
  ],
  [
    "203",
    {
      "pageContent": "Fetch elevation from storey info\n\nStorey elevations are normally stored in IFC files so this can be used to find the PDF elevation,\nif not then manual input or other metadata is needed, the SceneData for this will need to be from the 3D model asset.\n\n```typescript\nconst iterator = scene.search(\n  {\n    searchPattern: [\n      { property: \"IfcClass\", value: \"IfcBuildingStorey\", exact: true },\n    ],\n  },\n  undefined\n);\n...\n      if (prop[0] === \"Novorender/Elevation\") {\n        return Number(prop[1]);\n      }\n...\n```",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/placing_pdf.mdx", "loc": { "lines": { "from": 78, "to": 97 } } }
    }
  ],
  [
    "204",
    {
      "pageContent": "Calculate rotation, scale and position\n\n:::note\nThe PDF is scaled to fit one meter on the Y axis\n:::\n\nFor these calculations we rely on two selected points from the PDF in pixels, that match two points on the 3D model.\nTo get the points from the PDF simply use the x and y position on the canvas, for points in the 3D model a top down\northographic camera can be used with the pick() functionality on the webgl view. Elevation can be used to set a clipping plane,\nfor information on how to clip the model see [Clipping Volumes](./clipping_volumes), and for more information on\npicking and drawing on top of a novorender model see [Draw measure object](./drawing2D).\n\n:::note\nTo move the model coordinates to 2D Y must be discarded, Z will be flipped and used instead,\nElevation will be used to put it into 3D pace again\n:::",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/placing_pdf.mdx", "loc": { "lines": { "from": 99, "to": 114 } } }
    }
  ],
  [
    "205",
    {
      "pageContent": ":::note\nTo move the model coordinates to 2D Y must be discarded, Z will be flipped and used instead,\nElevation will be used to put it into 3D pace again\n:::\n\n```typescript\nconst modelPosA = vec2.fromValues(pickPositionA[0], pickPositionA[2] * -1);\nconst modelPosB = vec2.fromValues(pickPositionB[0], pickPositionB[2] * -1);\n//Invert Y axis on the pixel positions on the pdf image\nconst pixelPosA = vec2.fromValues(pdfPosA[0], imgHeight.current - pdfPosA[1]);\nconst pixelPosB = vec2.fromValues(pdfPosB[0], imgHeight.current - pdfPosB[1]);\nconst pixelLength = vec2.dist(pixelPosA, pixelPosB);\nconst modelLength = vec2.dist(modelPosA, modelPosB);\nconst modelDir = vec2.sub(vec2.create(), modelPosB, modelPosA);\nvec2.normalize(modelDir, modelDir);\nconst pixDir = vec2.sub(vec2.create(), pixelPosB, pixelPosA);\nvec2.normalize(pixDir, pixDir);\nconst scale = modelLength / pixelLength;",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/placing_pdf.mdx", "loc": { "lines": { "from": 114, "to": 131 } } }
    }
  ],
  [
    "206",
    {
      "pageContent": "const radAroundZ = Math.acos(vec2.dot(modelDir, pixDir)) * -1;\nconst degreesAroundZ = (angleAroundZRad / Math.PI) * 180;\nconst pdfToWorldScale = imgHeight.current * scale;\nconst translation = vec2.sub(vec2.create(), modelPos[0], vec2.fromValues(pixelPosA[0] * scale * Math.cos(radAroundZ), pixelPosA[1] * scale * Math.sin(radAroundZ)));\n```",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/placing_pdf.mdx", "loc": { "lines": { "from": 133, "to": 137 } } }
    }
  ],
  [
    "207",
    {
      "pageContent": "Placing a preview of PDF in scene and update\n\nDynamic object will be used to place a preview of the PDF in model space, for more information on how dynamic objects are used\nsee [Dynamic Objects](./dynamic_objects). The dynamic model data can be found using the data api. Values found in the previous\nsection will be used to set scale, translation and rotation.\n\n```typescript\nconst resource = await this.dataApi.getResource(\"bad260f94a5340b9b767ea2756392be4\");\nconst url = new URL(resource.gltf);\nconst asset = await this.api.loadAsset(url);\nconst instance = this.view.scene.createDynamicObject(asset);\ninstance.scale = vec3.fromValues(pdfToWorldScale, pdfToWorldScale, 1);\ninstance.visible = true;\n\n// Rotate back to y as height\nconst rotation = quat.fromValues(-0.70710677, 0, 0, 0.70710677);\ninstance.position = vec3.transformQuat(vec3.create(), vec3.fromValues(translation[0], translation[1], 161.9), rotation);",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/placing_pdf.mdx", "loc": { "lines": { "from": 139, "to": 155 } } }
    }
  ],
  [
    "208",
    {
      "pageContent": "// Rotate around Z to match\ninstance.rotation = quat.multiply(rotation, rotation, quat.fromEuler(quat.create(), 0, 0, degreesAroundZ));",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/placing_pdf.mdx", "loc": { "lines": { "from": 157, "to": 158 } } }
    }
  ],
  ["209", { "pageContent": "When it looks good this asset can be added to the scene.", "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/placing_pdf.mdx", "loc": { "lines": { "from": 161, "to": 161 } } } }],
  [
    "210",
    {
      "pageContent": "Demo\n\nBelow example shows how to create a 2d view of the model and the PDF. placing two matching points on each will calculate the translation scale and roatation needed to place the pdf properly in model space\n\n<PlaygroundComponent {...tutorials.PDFPlacement.pdf_placement}></PlaygroundComponent>",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/placing_pdf.mdx", "loc": { "lines": { "from": 163, "to": 167 } } }
    }
  ],
  [
    "211",
    {
      "pageContent": "---\ntitle: \"Searching\"\nsidebar_position: 4\ndescription: \"Search using Novorender.\"\nkeywords: [\"novorender api docs\", \"webgl api\", \"searching\"]\n---\n\nimport { tutorials } from \"@site/demo-snippets/index\";\n\nSearching will be integral part of most applications using Novorender.\nIn the example below we demonstrate a few different search patterns where the resulting objects are isolated in the view.  \nMake sure to also check out the <code>[Scene.search()](/docs/webgl-api/interfaces/NovoRender.Scene#search)</code> documentation.\n\n### Search By Path\n\nExample of a Path search pattern where the isolated objects represent the results.\n\n<PlaygroundComponent {...tutorials.searching.searchByPath} />\n<br />\n\n### Fluffy Search\n\nFluffy search pattern that looks for terms beginning with \"Roof\" in all properties.\n\n<PlaygroundComponent {...tutorials.searching.fluffySearch} />\n<br />",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/searching.mdx", "loc": { "lines": { "from": 1, "to": 26 } } }
    }
  ],
  [
    "212",
    {
      "pageContent": "Fluffy Search\n\nFluffy search pattern that looks for terms beginning with \"Roof\" in all properties.\n\n<PlaygroundComponent {...tutorials.searching.fluffySearch} />\n<br />\n\n### Exact Search\n\nExact search that only checks the property \"ifcClass\" and the exact value \"ifcRoof\".\n\n<PlaygroundComponent {...tutorials.searching.exactSearch} />\n<br />\n\n### Exact Search Excluding Results\n\nVery similar to the Exact search pattern, but with exclude. All objects other than those located above will be returned.\n\n<PlaygroundComponent {...tutorials.searching.exactSearchExcludingResult} />",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/tutorials/searching.mdx", "loc": { "lines": { "from": 26, "to": 44 } } }
    }
  ],
  [
    "213",
    {
      "pageContent": "---\nid: \"NovoRender.NodeType\"\ntitle: \"WebGL API\"\nsidebar_label: \"NodeType\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).NodeType\n\nType of node\n\n## Enumeration Members\n\n### Internal\n\n• **Internal** = ``0``\n\nNode has children.\n\n___\n\n### Leaf\n\n• **Leaf** = ``1``\n\nNode has no children.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/enums/NovoRender.NodeType.md", "loc": { "lines": { "from": 1, "to": 27 } } }
    }
  ],
  [
    "214",
    {
      "pageContent": "---\nid: \"NovoRender.WellKnownSceneUrls\"\ntitle: \"WebGL API\"\nsidebar_label: \"WellKnownSceneUrls\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).WellKnownSceneUrls\n\nList of well known scene ids used for testing or demos.\n\n## Enumeration Members\n\n### condos\n\n• **condos** = ``\"https://blobs.novorender.com/1169297611ae33f63132f264ed34e265/\"``\n\n___\n\n### cube\n\n• **cube** = ``\"cube\"``\n\n___\n\n### empty\n\n• **empty** = ``\"empty\"``\n\n___\n\n### oilrig\n\n• **oilrig** = ``\"https://blobs.novorender.com/9fb7bdf8ae8445189573681194718db8/\"``",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/enums/NovoRender.WellKnownSceneUrls.md", "loc": { "lines": { "from": 1, "to": 35 } } }
    }
  ],
  [
    "215",
    {
      "pageContent": "---\nid: \"index\"\ntitle: \"WebGL API\"\nsidebar_label: \"Readme\"\nsidebar_position: 0\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n<img src=\"https://novorender.com/wp-content/uploads/2021/06/novorender_logo_RGB_2021.png\"/>\n\n# [NovoRender](http://novorender.com/)\n\n> A Web API for scalable 3D rendering in the cloud.\n\n<!-- [![build-api](https://github.com/novorender/NovoRender-API/actions/workflows/build.yml/badge.svg)](https://github.com/novorender/NovoRender-API/actions/workflows/build.yml) -->\n\n[![Latest NPM Version](https://img.shields.io/npm/v/@novorender/webgl-api.svg?label=@novorender/webgl-api)](https://www.npmjs.com/package/@novorender/webgl-api)  \r\nBuild version: 0.4.24  \r\nBuild date: Wed, 22 Feb 2023 09:18:49 GMT",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/index.md", "loc": { "lines": { "from": 1, "to": 20 } } }
    }
  ],
  [
    "216",
    {
      "pageContent": "Requirements\n\nNovorender requires a modern web browser with [WebGL2](https://get.webgl.org/webgl2/) and\r\n[WebAssembly](https://webassembly.org/) support.<br/>\r\n<img height=\"64\" src=\"https://www.khronos.org/assets/images/api_logos/webgl.svg\"/>\r\n<img height=\"64\" src=\"https://upload.wikimedia.org/wikipedia/commons/1/1f/WebAssembly_Logo.svg\"/>",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/index.md", "loc": { "lines": { "from": 22, "to": 27 } } }
    }
  ],
  [
    "217",
    {
      "pageContent": "Dependencies\n\nFor linear algebra (vector and matrix math) we use the [gl-matrix](http://glmatrix.net/) library internally. Colors and 3D vectors are defined as `vec3` types, which equates to a array of `length=3`. If all you wish to do is to pass in parameters or read values, you may treat these types a regular array of numbers, i.e. you don't need the gl-matrix library itself for this. If you do wish to perform some linear algebra yourself, however, we recommend you do add it to your own code as well. Just make sure you use same major version as us (^3.3.0). Also note that we use Array instead of Float32Array for vector types, since this is more performant on most modern browsers: `glMatrix.setMatrixArrayType(Array);`\n\n## Further information\n\nFor tutorials and more detailed documentation, please visit [docs.novorender.com](https://docs.novorender.com/)!",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/index.md", "loc": { "lines": { "from": 29, "to": 35 } } }
    }
  ],
  [
    "218",
    {
      "pageContent": "---\nid: \"NovoRender.AABB\"\ntitle: \"WebGL API\"\nsidebar_label: \"AABB\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).AABB\n\nAxis-aligned bounding box\n\n## Properties\n\n### max\n\n• `Readonly` **max**: `ReadonlyVec3`\n\nmaximum coordinates\n\n___\n\n### min\n\n• `Readonly` **min**: `ReadonlyVec3`\n\nminimum coordinates",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.AABB.md", "loc": { "lines": { "from": 1, "to": 27 } } }
    }
  ],
  [
    "219",
    {
      "pageContent": "---\nid: \"NovoRender.API\"\ntitle: \"WebGL API\"\nsidebar_label: \"API\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).API\n\nA NovoRender API instance.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.API.md", "loc": { "lines": { "from": 1, "to": 11 } } }
    }
  ],
  [
    "220",
    {
      "pageContent": "Properties\n\n### animate\n\n• **animate**: `FrameRequestCallback`\n\nCallback that is called on each frame just before rendering.\n\n**`Remarks`**\n\nUsing this callback instead of in your own requestAnimationFrame() callback is recommended to ensure your updates are applied consistently and are properly synchronized.\r\nIf you have disabled automatic rendering by setting [run](NovoRender.API.md#run) = false, this callback is not called unless you manually call [update](NovoRender.API.md#update).\n\n___\n\n### deviceProfile\n\n• **deviceProfile**: [`DeviceProfile`](NovoRender.DeviceProfile.md)\n\nPerformance profile for current device.\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.API.md", "loc": { "lines": { "from": 13, "to": 34 } } }
    }
  ],
  [
    "221",
    {
      "pageContent": "deviceProfile\n\n• **deviceProfile**: [`DeviceProfile`](NovoRender.DeviceProfile.md)\n\nPerformance profile for current device.\n\n___\n\n### run\n\n• **run**: `boolean`\n\nEnable or disable automatic rendering.\n\n**`Remarks`**\n\nThis value is set to true by default when a new API is created.\r\nWhen true, the api will use requestAnimationFrame() callback to automatically update all active views and controllers.\r\nSetting it to false will have the effect of pausing all rendering and camera motion.\r\nYou may still call [update](NovoRender.API.md#update) to manually render all views frame and update camera motion controllers.\n\n___\n\n### version\n\n• `Readonly` **version**: `string`\n\nAPI version string, expressed using semantic versioning [https://semver.org/](https://semver.org/).",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.API.md", "loc": { "lines": { "from": 34, "to": 61 } } }
    }
  ],
  ["222", { "pageContent": "Methods", "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.API.md", "loc": { "lines": { "from": 63, "to": 63 } } } }],
  [
    "223",
    {
      "pageContent": "availableEnvironments\n\n▸ **availableEnvironments**(`indexUrl?`): `Promise`<readonly [`EnvironmentDescription`](NovoRender.EnvironmentDescription.md)[]\\>\n\nRetrieve list of available background/IBL environments.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `indexUrl?` | `string` | The absolute or relative url of the index.json file. Relative url will be relative to the novorender api script url. If undefined, \"/assets/env/index.json\" will be used by default. |\n\n#### Returns\n\n`Promise`<readonly [`EnvironmentDescription`](NovoRender.EnvironmentDescription.md)[]\\>\n\nThe controller object\n\n▸ **availableEnvironments**(`indexUrl?`): `Promise`<readonly [`EnvironmentDescription`](NovoRender.EnvironmentDescription.md)[]\\>\n\nRetrieve list of available background/IBL environments.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.API.md", "loc": { "lines": { "from": 65, "to": 85 } } }
    }
  ],
  [
    "224",
    {
      "pageContent": "Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `indexUrl?` | `string` | The absolute or relative url of the index.json file. Relative url will be relative to the novorender api script url. If undefined, \"/assets/env/index.json\" will be used by default. |\n\n#### Returns\n\n`Promise`<readonly [`EnvironmentDescription`](NovoRender.EnvironmentDescription.md)[]\\>\n\nThe controller object\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.API.md", "loc": { "lines": { "from": 87, "to": 99 } } }
    }
  ],
  [
    "225",
    {
      "pageContent": "createCameraController\n\n▸ **createCameraController**(`params`): [`CameraController`](NovoRender.CameraController.md)\n\nCreate a camera motion controller.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `params` | [`StaticControllerParams`](NovoRender.StaticControllerParams.md) | The controller parameters. |\n\n#### Returns\n\n[`CameraController`](NovoRender.CameraController.md)\n\nThe controller object\n\n▸ **createCameraController**(`params`): [`CameraController`](NovoRender.CameraController.md)\n\nCreate a camera motion controller.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `params` | [`TurntableControllerParams`](NovoRender.TurntableControllerParams.md) | The controller parameters. |\n\n#### Returns\n\n[`CameraController`](NovoRender.CameraController.md)\n\nThe controller object\n\n▸ **createCameraController**(`params`, `domElement`): [`CameraController`](NovoRender.CameraController.md)\n\nCreate a camera motion controller.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.API.md", "loc": { "lines": { "from": 101, "to": 137 } } }
    }
  ],
  [
    "226",
    {
      "pageContent": "Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `params` | [`OrbitControllerParams`](NovoRender.OrbitControllerParams.md) | The controller parameters. |\n| `domElement` | `HTMLElement` | The HTML DOM element to listen for mouse/touch events. This can only be set when the controller is created. |\n\n#### Returns\n\n[`CameraController`](NovoRender.CameraController.md)\n\nThe controller object\n\n▸ **createCameraController**(`params`, `domElement`): [`CameraController`](NovoRender.CameraController.md)\n\nCreate a camera motion controller.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `params` | [`FlightControllerParams`](NovoRender.FlightControllerParams.md) | The controller parameters. |\n| `domElement` | `HTMLElement` | The HTML DOM element to listen for mouse/touch events. This can only be set when the controller is created. |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.API.md", "loc": { "lines": { "from": 139, "to": 161 } } }
    }
  ],
  [
    "227",
    {
      "pageContent": "Returns\n\n[`CameraController`](NovoRender.CameraController.md)\n\nThe controller object\n\n▸ **createCameraController**(`params`, `domElement`): [`CameraController`](NovoRender.CameraController.md)\n\nCreate a camera motion controller.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `params` | [`OrthoControllerParams`](NovoRender.OrthoControllerParams.md) | The controller parameters. |\n| `domElement` | `HTMLElement` | The HTML DOM element to listen for mouse/touch events. This can only be set when the controller is created. |\n\n#### Returns\n\n[`CameraController`](NovoRender.CameraController.md)\n\nThe controller object\n\n▸ **createCameraController**(`params`): [`CameraController`](NovoRender.CameraController.md)\n\nCreate a camera motion controller.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `params` | [`StaticControllerParams`](NovoRender.StaticControllerParams.md) | The controller parameters. |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.API.md", "loc": { "lines": { "from": 163, "to": 194 } } }
    }
  ],
  [
    "228",
    {
      "pageContent": "Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `params` | [`StaticControllerParams`](NovoRender.StaticControllerParams.md) | The controller parameters. |\n\n#### Returns\n\n[`CameraController`](NovoRender.CameraController.md)\n\nThe controller object\n\n▸ **createCameraController**(`params`): [`CameraController`](NovoRender.CameraController.md)\n\nCreate a camera motion controller.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `params` | [`TurntableControllerParams`](NovoRender.TurntableControllerParams.md) | The controller parameters. |\n\n#### Returns\n\n[`CameraController`](NovoRender.CameraController.md)\n\nThe controller object\n\n▸ **createCameraController**(`params`, `domElement`): [`CameraController`](NovoRender.CameraController.md)\n\nCreate a camera motion controller.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.API.md", "loc": { "lines": { "from": 194, "to": 224 } } }
    }
  ],
  [
    "229",
    {
      "pageContent": "Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `params` | [`OrbitControllerParams`](NovoRender.OrbitControllerParams.md) | The controller parameters. |\n| `domElement` | `HTMLElement` | The HTML DOM element to listen for mouse/touch events. This can only be set when the controller is created. |\n\n#### Returns\n\n[`CameraController`](NovoRender.CameraController.md)\n\nThe controller object\n\n▸ **createCameraController**(`params`, `domElement`): [`CameraController`](NovoRender.CameraController.md)\n\nCreate a camera motion controller.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `params` | [`FlightControllerParams`](NovoRender.FlightControllerParams.md) | The controller parameters. |\n| `domElement` | `HTMLElement` | The HTML DOM element to listen for mouse/touch events. This can only be set when the controller is created. |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.API.md", "loc": { "lines": { "from": 226, "to": 248 } } }
    }
  ],
  [
    "230",
    {
      "pageContent": "Returns\n\n[`CameraController`](NovoRender.CameraController.md)\n\nThe controller object\n\n▸ **createCameraController**(`params`, `domElement`): [`CameraController`](NovoRender.CameraController.md)\n\nCreate a camera motion controller.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `params` | [`OrthoControllerParams`](NovoRender.OrthoControllerParams.md) | The controller parameters. |\n| `domElement` | `HTMLElement` | The HTML DOM element to listen for mouse/touch events. This can only be set when the controller is created. |\n\n#### Returns\n\n[`CameraController`](NovoRender.CameraController.md)\n\nThe controller object\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.API.md", "loc": { "lines": { "from": 333, "to": 356 } } }
    }
  ],
  [
    "231",
    {
      "pageContent": "createHighlight\n\n▸ **createHighlight**(`params`): [`Highlight`](NovoRender.Highlight.md)\n\nCreate an object highlight\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `params` | [`NeutralHighlightParams`](NovoRender.NeutralHighlightParams.md) | Highlight parameters. |\n\n#### Returns\n\n[`Highlight`](NovoRender.Highlight.md)\n\nA highlight object that can be used in [objectHighlights](NovoRender.RenderSettings.md#objecthighlights).\n\n▸ **createHighlight**(`params`): [`Highlight`](NovoRender.Highlight.md)\n\nCreate an object highlight\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `params` | [`TransparentHighlightParams`](NovoRender.TransparentHighlightParams.md) | Highlight parameters. |\n\n#### Returns\n\n[`Highlight`](NovoRender.Highlight.md)\n\nA highlight object that can be used in [objectHighlights](NovoRender.RenderSettings.md#objecthighlights).\n\n▸ **createHighlight**(`params`): [`Highlight`](NovoRender.Highlight.md)\n\nCreate an object highlight",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.API.md", "loc": { "lines": { "from": 358, "to": 394 } } }
    }
  ],
  [
    "232",
    {
      "pageContent": "Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `params` | [`ColorHighlightParams`](NovoRender.ColorHighlightParams.md) | Highlight parameters. |\n\n#### Returns\n\n[`Highlight`](NovoRender.Highlight.md)\n\nA highlight object that can be used in [objectHighlights](NovoRender.RenderSettings.md#objecthighlights).\n\n▸ **createHighlight**(`params`): [`Highlight`](NovoRender.Highlight.md)\n\nCreate an object highlight\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `params` | [`RGBATransformHighlightParams`](../namespaces/NovoRender.md#rgbatransformhighlightparams) | Highlight parameters. |\n\n#### Returns\n\n[`Highlight`](NovoRender.Highlight.md)\n\nA highlight object that can be used in [objectHighlights](NovoRender.RenderSettings.md#objecthighlights).\n\n▸ **createHighlight**(`params`): [`Highlight`](NovoRender.Highlight.md)\n\nCreate an object highlight",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.API.md", "loc": { "lines": { "from": 396, "to": 426 } } }
    }
  ],
  [
    "233",
    {
      "pageContent": "Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `params` | [`HSLATransformHighlightParams`](../namespaces/NovoRender.md#hslatransformhighlightparams) | Highlight parameters. |\n\n#### Returns\n\n[`Highlight`](NovoRender.Highlight.md)\n\nA highlight object that can be used in [objectHighlights](NovoRender.RenderSettings.md#objecthighlights).\n\n▸ **createHighlight**(`params`): [`Highlight`](NovoRender.Highlight.md)\n\nCreate an object highlight\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `params` | [`NeutralHighlightParams`](NovoRender.NeutralHighlightParams.md) | Highlight parameters. |\n\n#### Returns\n\n[`Highlight`](NovoRender.Highlight.md)\n\nA highlight object that can be used in [objectHighlights](NovoRender.RenderSettings.md#objecthighlights).\n\n▸ **createHighlight**(`params`): [`Highlight`](NovoRender.Highlight.md)\n\nCreate an object highlight",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.API.md", "loc": { "lines": { "from": 428, "to": 458 } } }
    }
  ],
  [
    "234",
    {
      "pageContent": "Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `params` | [`TransparentHighlightParams`](NovoRender.TransparentHighlightParams.md) | Highlight parameters. |\n\n#### Returns\n\n[`Highlight`](NovoRender.Highlight.md)\n\nA highlight object that can be used in [objectHighlights](NovoRender.RenderSettings.md#objecthighlights).\n\n▸ **createHighlight**(`params`): [`Highlight`](NovoRender.Highlight.md)\n\nCreate an object highlight\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `params` | [`ColorHighlightParams`](NovoRender.ColorHighlightParams.md) | Highlight parameters. |\n\n#### Returns\n\n[`Highlight`](NovoRender.Highlight.md)\n\nA highlight object that can be used in [objectHighlights](NovoRender.RenderSettings.md#objecthighlights).\n\n▸ **createHighlight**(`params`): [`Highlight`](NovoRender.Highlight.md)\n\nCreate an object highlight",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.API.md", "loc": { "lines": { "from": 458, "to": 488 } } }
    }
  ],
  [
    "235",
    {
      "pageContent": "Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `params` | [`RGBATransformHighlightParams`](../namespaces/NovoRender.md#rgbatransformhighlightparams) | Highlight parameters. |\n\n#### Returns\n\n[`Highlight`](NovoRender.Highlight.md)\n\nA highlight object that can be used in [objectHighlights](NovoRender.RenderSettings.md#objecthighlights).\n\n▸ **createHighlight**(`params`): [`Highlight`](NovoRender.Highlight.md)\n\nCreate an object highlight\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `params` | [`HSLATransformHighlightParams`](../namespaces/NovoRender.md#hslatransformhighlightparams) | Highlight parameters. |\n\n#### Returns\n\n[`Highlight`](NovoRender.Highlight.md)\n\nA highlight object that can be used in [objectHighlights](NovoRender.RenderSettings.md#objecthighlights).\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.API.md", "loc": { "lines": { "from": 570, "to": 598 } } }
    }
  ],
  [
    "236",
    {
      "pageContent": "createView\n\n▸ **createView**(`settings?`, `htmlRenderCanvas?`): `Promise`<[`View`](NovoRender.View.md)\\>\n\nCreate a 3D View.\n\n**`Remarks`**\n\nIt is recommend that you specify the initial display pixel width and height here to avoid unnecessary reallocation of render buffers.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `settings?` | `Partial`<`Readonly`<[`RenderSettings`](NovoRender.RenderSettings.md)\\>\\> | Initial RenderSettingParams settings to use for view. |\n| `htmlRenderCanvas?` | `HTMLCanvasElement` | - |\n\n#### Returns\n\n`Promise`<[`View`](NovoRender.View.md)\\>\n\nA promise of a newly created [View](NovoRender.View.md).\n\n▸ **createView**(`settings?`, `htmlRenderCanvas?`): `Promise`<[`View`](NovoRender.View.md)\\>\n\nCreate a 3D View.\n\n**`Remarks`**\n\nIt is recommend that you specify the initial display pixel width and height here to avoid unnecessary reallocation of render buffers.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.API.md", "loc": { "lines": { "from": 600, "to": 629 } } }
    }
  ],
  [
    "237",
    {
      "pageContent": "Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `settings?` | `Partial`<`Readonly`<[`RenderSettings`](NovoRender.RenderSettings.md)\\>\\> | Initial RenderSettingParams settings to use for view. |\n| `htmlRenderCanvas?` | `HTMLCanvasElement` | Canvas to render to. If none is specified, an OffscreenCanvas is used instead. Beware that not all browsers support OffscreenCanvas yet. |\n\n#### Returns\n\n`Promise`<[`View`](NovoRender.View.md)\\>\n\nA promise of a newly created [View](NovoRender.View.md).\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.API.md", "loc": { "lines": { "from": 631, "to": 644 } } }
    }
  ],
  [
    "238",
    {
      "pageContent": "dispose\n\n▸ **dispose**(): `void`\n\nStop all rendering and release all resources.\n\n**`Remarks`**\n\nCalling this function will effectively destroy this instance of the API and any associated scenes and views etc.\r\nThis function allows you to explicitly release the associated GPU resources and memory caches used by the API without waiting for the garbage collector to do so.\n\n#### Returns\n\n`void`\n\n▸ **dispose**(): `void`\n\nStop all rendering and release all resources.\n\n**`Remarks`**\n\nCalling this function will effectively destroy this instance of the API and any associated scenes and views etc.\r\nThis function allows you to explicitly release the associated GPU resources and memory caches used by the API without waiting for the garbage collector to do so.\n\n#### Returns\n\n`void`\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.API.md", "loc": { "lines": { "from": 646, "to": 674 } } }
    }
  ],
  [
    "239",
    {
      "pageContent": "loadAsset\n\n▸ **loadAsset**(`url`): `Promise`<[`DynamicAsset`](NovoRender.DynamicAsset.md)\\>\n\nLoad the specificed asset into memory.\n\n**`Remarks`**\n\nAssets must be passed to [createDynamicObject](NovoRender.Scene.md#createdynamicobject) to be rendered.\r\nCurrently, this must be a [glTF](https://www.khronos.org/gltf/) file (*.gltf | *.glb).\r\nCross domain urls requires CORS headers to be set appropriately.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `url` | `URL` | The asset url. |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.API.md", "loc": { "lines": { "from": 676, "to": 692 } } }
    }
  ],
  [
    "240",
    {
      "pageContent": "Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `url` | `URL` | The asset url. |\n\n#### Returns\n\n`Promise`<[`DynamicAsset`](NovoRender.DynamicAsset.md)\\>\n\nA promise of the loaded [DynamicAsset](NovoRender.DynamicAsset.md).\n\n▸ **loadAsset**(`url`): `Promise`<[`DynamicAsset`](NovoRender.DynamicAsset.md)\\>\n\nLoad the specificed asset into memory.\n\n**`Remarks`**\n\nAssets must be passed to [createDynamicObject](NovoRender.Scene.md#createdynamicobject) to be rendered.\r\nCurrently, this must be a [glTF](https://www.khronos.org/gltf/) file (*.gltf | *.glb).\r\nCross domain urls requires CORS headers to be set appropriately.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `url` | `URL` | The asset url. |\n\n#### Returns\n\n`Promise`<[`DynamicAsset`](NovoRender.DynamicAsset.md)\\>\n\nA promise of the loaded [DynamicAsset](NovoRender.DynamicAsset.md).\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.API.md", "loc": { "lines": { "from": 692, "to": 726 } } }
    }
  ],
  [
    "241",
    {
      "pageContent": "loadEnvironment\n\n▸ **loadEnvironment**(`environment`): `Promise`<[`Environment`](NovoRender.Environment.md)\\>\n\nLoad the specificed environment into memory.\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `environment` | [`EnvironmentDescription`](NovoRender.EnvironmentDescription.md) |\n\n#### Returns\n\n`Promise`<[`Environment`](NovoRender.Environment.md)\\>\n\nA promise of the loaded [Environment](NovoRender.Environment.md).\n\n▸ **loadEnvironment**(`environment`): `Promise`<[`Environment`](NovoRender.Environment.md)\\>\n\nLoad the specificed environment into memory.\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `environment` | [`EnvironmentDescription`](NovoRender.EnvironmentDescription.md) |\n\n#### Returns\n\n`Promise`<[`Environment`](NovoRender.Environment.md)\\>\n\nA promise of the loaded [Environment](NovoRender.Environment.md).\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.API.md", "loc": { "lines": { "from": 728, "to": 762 } } }
    }
  ],
  [
    "242",
    {
      "pageContent": "loadScene\n\n▸ **loadScene**(`id`, `db?`): `Promise`<[`Scene`](NovoRender.Scene.md)\\>\n\nLoad the specificed scene into memory.\n\n**`Remarks`**\n\nThe loaded scene will not include all 3D or object data immediately as these are automatically downloaded on demand.\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `id` | `string` \\| `URL` |\n| `db?` | [`ObjectDB`](NovoRender.ObjectDB.md) |\n\n#### Returns\n\n`Promise`<[`Scene`](NovoRender.Scene.md)\\>\n\nA promise of the loaded [Scene](NovoRender.Scene.md).\n\n▸ **loadScene**(`id`, `db?`): `Promise`<[`Scene`](NovoRender.Scene.md)\\>\n\nLoad the specificed scene into memory.\n\n**`Remarks`**\n\nThe loaded scene will not include all 3D or object data immediately as these are automatically downloaded on demand.\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `id` | `string` \\| `URL` |\n| `db?` | [`ObjectDB`](NovoRender.ObjectDB.md) |\n\n#### Returns\n\n`Promise`<[`Scene`](NovoRender.Scene.md)\\>\n\nA promise of the loaded [Scene](NovoRender.Scene.md).\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.API.md", "loc": { "lines": { "from": 764, "to": 808 } } }
    }
  ],
  [
    "243",
    {
      "pageContent": "update\n\n▸ **update**(): `Promise`<`void`\\>\n\nManually update all views and camera controllers.\n\n**`Remarks`**\n\nIf you have disabled automatic rendering by setting [run](NovoRender.API.md#run) = false, you can call this function to manually update instead.\r\nThis may be useful if you are using requestAnimationFrame yourself and want to have full control over the order by which state gets updated.\r\nThe returned promise will resolve at the next animation frame, typically 1/60 of a second, which can be useful if you intend to run a realtime update loop.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.API.md", "loc": { "lines": { "from": 810, "to": 820 } } }
    }
  ],
  [
    "244",
    {
      "pageContent": "Returns\n\n`Promise`<`void`\\>\n\n▸ **update**(): `Promise`<`void`\\>\n\nManually update all views and camera controllers.\n\n**`Remarks`**\n\nIf you have disabled automatic rendering by setting [run](NovoRender.API.md#run) = false, you can call this function to manually update instead.\r\nThis may be useful if you are using requestAnimationFrame yourself and want to have full control over the order by which state gets updated.\r\nThe returned promise will resolve at the next animation frame, typically 1/60 of a second, which can be useful if you intend to run a realtime update loop.\n\n#### Returns\n\n`Promise`<`void`\\>",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.API.md", "loc": { "lines": { "from": 822, "to": 838 } } }
    }
  ],
  [
    "245",
    {
      "pageContent": "---\nid: \"NovoRender.APIOptions\"\ntitle: \"WebGL API\"\nsidebar_label: \"APIOptions\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).APIOptions\n\nAPI creation options\n\n## Properties\n\n### assetsUrl\n\n• `Optional` **assetsUrl**: `string`\n\nUrl (without trailing slash) for alternative assets location. The default value is \"https://blobs.novorender.com\".\n\n___\n\n### noOffscreenCanvas\n\n• `Optional` **noOffscreenCanvas**: `boolean`\n\nFlag to disable use of offscreen canvas.\n\n___\n\n### scriptBaseUrl\n\n• `Optional` **scriptBaseUrl**: `string`\n\nBase URL from where to load worker script and wasm files.\n\n**`Remarks`**\n\nThe URL can be absolute or relative to the location of the main api script.\n\n___\n\n### webGL1Only\n\n• `Optional` **webGL1Only**: `boolean`",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.APIOptions.md", "loc": { "lines": { "from": 1, "to": 45 } } }
    }
  ],
  [
    "246",
    {
      "pageContent": "---\nid: \"NovoRender.ArcValues\"\ntitle: \"WebGL API\"\nsidebar_label: \"ArcValues\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).ArcValues\n\nArcValues is a collection of values for measuring a single arc\n\n## Properties\n\n### kind\n\n• **kind**: ``\"arc\"``\n\n___\n\n### radius\n\n• **radius**: `number`\n\nRadius of the arc\n\n___\n\n### totalAngle\n\n• **totalAngle**: `number`\n\nAngle of the arc segment",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.ArcValues.md", "loc": { "lines": { "from": 1, "to": 33 } } }
    }
  ],
  [
    "247",
    {
      "pageContent": "---\nid: \"NovoRender.BoundingSphere\"\ntitle: \"WebGL API\"\nsidebar_label: \"BoundingSphere\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).BoundingSphere\n\nBounding sphere\n\n## Properties\n\n### center\n\n• `Readonly` **center**: `vec3`\n\nSphere center.\n\n___\n\n### radius\n\n• `Readonly` **radius**: `number`\n\nSphere radius.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.BoundingSphere.md", "loc": { "lines": { "from": 1, "to": 27 } } }
    }
  ],
  [
    "248",
    {
      "pageContent": "---\nid: \"NovoRender.Camera\"\ntitle: \"WebGL API\"\nsidebar_label: \"Camera\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).Camera\n\nCamera Object.\n\n## Hierarchy\n\n- [`CameraProperties`](NovoRender.CameraProperties.md)\n\n  ↳ **`Camera`**\n\n  ↳↳ [`CameraExt`](NovoRender.Internal.CameraExt.md)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Camera.md", "loc": { "lines": { "from": 1, "to": 19 } } }
    }
  ],
  [
    "249",
    {
      "pageContent": "Properties\n\n### controller\n\n• **controller**: [`CameraController`](NovoRender.CameraController.md)\n\nGet or set the motion controller assigned to this camera. By default, this will be a static controller, whose only function is to provide a reasonable default view for a given scene.\n\n___\n\n### far\n\n• **far**: `number`\n\nDistance to the view frustum far clipping plane.\n\n**`Remarks`**\n\nThe value must be larger than [near](NovoRender.Camera.md#near) and and large enough to include the desired maximum viewing distance, which typically is some multiple of the scene size.\r\n Camera controllers will automatically adjust this value whenever a new scene is assigned to their view, so setting it manually is generally not required.\r\n See [https://en.wikipedia.org/wiki/Viewing_frustum](https://en.wikipedia.org/wiki/Viewing_frustum) for more details.\n\n#### Inherited from\n\n[CameraProperties](NovoRender.CameraProperties.md).[far](NovoRender.CameraProperties.md#far)\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Camera.md", "loc": { "lines": { "from": 21, "to": 47 } } }
    }
  ],
  [
    "250",
    {
      "pageContent": "fieldOfView\n\n• **fieldOfView**: `number`\n\nField of view expressed as the vertical viewing angle in degrees for pinhole cameras, or vertical aperature dimension in meters for orthographic cameras.\n\n#### Inherited from\n\n[CameraProperties](NovoRender.CameraProperties.md).[fieldOfView](NovoRender.CameraProperties.md#fieldofview)\n\n___\n\n### kind\n\n• `Readonly` **kind**: ``\"pinhole\"`` \\| ``\"orthographic\"``\n\nCamera type.\n\n#### Inherited from\n\n[CameraProperties](NovoRender.CameraProperties.md).[kind](NovoRender.CameraProperties.md#kind)\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Camera.md", "loc": { "lines": { "from": 49, "to": 71 } } }
    }
  ],
  [
    "251",
    {
      "pageContent": "near\n\n• **near**: `number`\n\nDistance to the view frustum near clipping plane.\n\n**`Remarks`**\n\nThe value must be larger than 0 and preferably as large as possible without creating undesired clipping effects near the camera.\r\n Camera controllers will automatically adjust this value whenever a new scene is assigned to their view, so setting it manually is generally not required.\r\n See [https://en.wikipedia.org/wiki/Viewing_frustum](https://en.wikipedia.org/wiki/Viewing_frustum) for more details.\n\n#### Inherited from\n\n[CameraProperties](NovoRender.CameraProperties.md).[near](NovoRender.CameraProperties.md#near)\n\n___\n\n### position\n\n• `Readonly` **position**: `vec3`\n\nCamera position expressed as a world space 3D vector.\n\n#### Inherited from\n\n[CameraProperties](NovoRender.CameraProperties.md).[position](NovoRender.CameraProperties.md#position)\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Camera.md", "loc": { "lines": { "from": 73, "to": 101 } } }
    }
  ],
  [
    "252",
    {
      "pageContent": "rotation\n\n• `Readonly` **rotation**: `quat`\n\nCamera orientation expressed as a world space 3D quaternion.\n\n#### Inherited from\n\n[CameraProperties](NovoRender.CameraProperties.md).[rotation](NovoRender.CameraProperties.md#rotation)\n\n___\n\n### view\n\n• `Readonly` **view**: [`View`](NovoRender.View.md)\n\nThe view to which this camera belongs.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Camera.md", "loc": { "lines": { "from": 103, "to": 119 } } }
    }
  ],
  [
    "253",
    {
      "pageContent": "Methods\n\n### getDistanceFromViewPlane\n\n▸ **getDistanceFromViewPlane**(`point`): `number`\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `point` | `ReadonlyVec3` |\n\n#### Returns\n\n`number`\n\n▸ **getDistanceFromViewPlane**(`point`): `number`\n\nCompute the distance of point from camera view plane.\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `point` | `ReadonlyVec3` |\n\n#### Returns\n\n`number`",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Camera.md", "loc": { "lines": { "from": 121, "to": 149 } } }
    }
  ],
  [
    "254",
    {
      "pageContent": "---\nid: \"NovoRender.CameraController\"\ntitle: \"WebGL API\"\nsidebar_label: \"CameraController\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).CameraController\n\nCamera motion controller.\n\n**`Remarks`**\n\nA motion controller fascilitates navigating a camera in space from user input.\n\n## Hierarchy\n\n- **`CameraController`**\n\n  ↳ [`CameraControllerExt`](NovoRender.Internal.CameraControllerExt.md)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.CameraController.md", "loc": { "lines": { "from": 1, "to": 21 } } }
    }
  ],
  [
    "255",
    {
      "pageContent": "Properties\n\n### autoZoomToScene\n\n• `Optional` **autoZoomToScene**: `boolean`\n\nWhether to automatically zoom to scene extents when new scene is selected. Default is true.\n\n___\n\n### enabled\n\n• **enabled**: `boolean`\n\nWhether controller is enabled. Default is true.\n\n___\n\n### fingersMap\n\n• **fingersMap**: `Object`\n\nDefines touch fingers actions.\n\n**`Param`**\n\ndefines how many fingers will rotate, pan and orbit camera.\n\n**`Remarks`**\n\nDefault value: { rotate: 1, pan: 3, orbit: 3, pivot: 3 }\r\nrotate, pan and orbit are movement while holding fingers\r\npivot is setting of pivot point for orbit rotation\r\nYou could disable some action by do not set it or set to 0, like { rotate: 1, pan: 2 } or { rotate: 1, pan: 2, orbit: 0}\n\n#### Type declaration\n\n| Name | Type |\n| :------ | :------ |\n| `orbit` | `number` |\n| `pan` | `number` |\n| `pivot` | `number` |\n| `rotate` | `number` |\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.CameraController.md", "loc": { "lines": { "from": 23, "to": 67 } } }
    }
  ],
  [
    "256",
    {
      "pageContent": "mouseButtonsMap\n\n• **mouseButtonsMap**: `Object`\n\nDefines mouse buttons actions.\n\n**`Param`**\n\nBitmask definition what buttons will rotate, pan and orbit camera.\n\n**`Remarks`**\n\nBit mask of buttons:\r\n1 - left button.\r\n2 - right button.\r\n4 - middle button.\r\nDefault value: { rotate: 1, pan: 4, orbit: 2, pivot: 2 }\r\nrotate, pan and orbit are movement while button hold\r\npivot is setting of pivot point for orbit rotation on button down\r\nYou could disable some action by do not set it or set to 0, like { rotate: 1, pan: 2 } or { rotate: 1, pan: 2, orbit: 0}\r\nHere could be combination of buttons, for example if you want use right button for rotation and left or middle button for panning and no orbit then value should be { rotate: 2, pan: 5 }\n\n#### Type declaration\n\n| Name | Type |\n| :------ | :------ |\n| `orbit` | `number` |\n| `pan` | `number` |\n| `pivot` | `number` |\n| `rotate` | `number` |\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.CameraController.md", "loc": { "lines": { "from": 69, "to": 100 } } }
    }
  ],
  [
    "257",
    {
      "pageContent": "params\n\n• `Readonly` **params**: `Required`<[`CameraControllerParams`](../namespaces/NovoRender.md#cameracontrollerparams)\\>\n\nController parameters",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.CameraController.md", "loc": { "lines": { "from": 102, "to": 106 } } }
    }
  ],
  [
    "258",
    {
      "pageContent": "Methods\n\n### moveTo\n\n▸ **moveTo**(`position`, `rotation`): `void`\n\nMove camera to exact position and rotation.\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `position` | `vec3` |\n| `rotation` | `quat` |\n\n#### Returns\n\n`void`\n\n▸ **moveTo**(`position`, `rotation`): `void`\n\nMove camera to exact position and rotation.\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `position` | `ReadonlyVec3` |\n| `rotation` | `ReadonlyQuat` |\n\n#### Returns\n\n`void`\n\n___\n\n### reset\n\n▸ **reset**(): `void`\n\nReset camera position and rotation to scene default.\n\n#### Returns\n\n`void`\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.CameraController.md", "loc": { "lines": { "from": 108, "to": 154 } } }
    }
  ],
  [
    "259",
    {
      "pageContent": "zoomTo\n\n▸ **zoomTo**(`bounds`): `void`\n\nZoom to area of interest.\n\n**`Remarks`**\n\nBounding volumes can be gotten from the scene itself, or an selection of objects within the scene.\r\nA typical case is to update the 3D view to reflect some object selection.\r\nThe controller will attempt to position the camera at a reasonable distance from the specified volume, using its center as the focal point.\r\nThe controller will not attempt to avoid moving through walls etc.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `bounds` | [`BoundingSphere`](NovoRender.BoundingSphere.md) | The bounding volume that should be brought into view. |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.CameraController.md", "loc": { "lines": { "from": 156, "to": 173 } } }
    }
  ],
  [
    "260",
    {
      "pageContent": "Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `bounds` | [`BoundingSphere`](NovoRender.BoundingSphere.md) | The bounding volume that should be brought into view. |\n\n#### Returns\n\n`void`\n\n▸ **zoomTo**(`bounds`): `void`\n\nZoom to area of interest.\n\n**`Remarks`**\n\nBounding volumes can be gotten from the scene itself, or an selection of objects within the scene.\r\nA typical case is to update the 3D view to reflect some object selection.\r\nThe controller will attempt to position the camera at a reasonable distance from the specified volume, using its center as the focal point.\r\nThe controller will not attempt to avoid moving through walls etc.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `bounds` | [`BoundingSphere`](NovoRender.BoundingSphere.md) | The bounding volume that should be brought into view. |\n\n#### Returns\n\n`void`",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.CameraController.md", "loc": { "lines": { "from": 173, "to": 202 } } }
    }
  ],
  [
    "261",
    {
      "pageContent": "---\nid: \"NovoRender.CameraProperties\"\ntitle: \"WebGL API\"\nsidebar_label: \"CameraProperties\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).CameraProperties\n\n## Hierarchy\n\n- **`CameraProperties`**\n\n  ↳ [`Camera`](NovoRender.Camera.md)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.CameraProperties.md", "loc": { "lines": { "from": 1, "to": 15 } } }
    }
  ],
  [
    "262",
    {
      "pageContent": "Properties\n\n### far\n\n• **far**: `number`\n\nDistance to the view frustum far clipping plane.\n\n**`Remarks`**\n\nThe value must be larger than [near](NovoRender.CameraProperties.md#near) and and large enough to include the desired maximum viewing distance, which typically is some multiple of the scene size.\r\n Camera controllers will automatically adjust this value whenever a new scene is assigned to their view, so setting it manually is generally not required.\r\n See [https://en.wikipedia.org/wiki/Viewing_frustum](https://en.wikipedia.org/wiki/Viewing_frustum) for more details.\n\n___\n\n### fieldOfView\n\n• **fieldOfView**: `number`\n\nField of view expressed as the vertical viewing angle in degrees for pinhole cameras, or vertical aperature dimension in meters for orthographic cameras.\n\n___\n\n### kind\n\n• `Readonly` **kind**: ``\"pinhole\"`` \\| ``\"orthographic\"``\n\nCamera type.\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.CameraProperties.md", "loc": { "lines": { "from": 17, "to": 47 } } }
    }
  ],
  [
    "263",
    {
      "pageContent": "kind\n\n• `Readonly` **kind**: ``\"pinhole\"`` \\| ``\"orthographic\"``\n\nCamera type.\n\n___\n\n### near\n\n• **near**: `number`\n\nDistance to the view frustum near clipping plane.\n\n**`Remarks`**\n\nThe value must be larger than 0 and preferably as large as possible without creating undesired clipping effects near the camera.\r\n Camera controllers will automatically adjust this value whenever a new scene is assigned to their view, so setting it manually is generally not required.\r\n See [https://en.wikipedia.org/wiki/Viewing_frustum](https://en.wikipedia.org/wiki/Viewing_frustum) for more details.\n\n___\n\n### position\n\n• `Readonly` **position**: `vec3`\n\nCamera position expressed as a world space 3D vector.\n\n___\n\n### rotation\n\n• `Readonly` **rotation**: `quat`\n\nCamera orientation expressed as a world space 3D quaternion.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.CameraProperties.md", "loc": { "lines": { "from": 47, "to": 81 } } }
    }
  ],
  [
    "264",
    {
      "pageContent": "---\nid: \"NovoRender.CameraValues\"\ntitle: \"WebGL API\"\nsidebar_label: \"CameraValues\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).CameraValues\n\nGives values to create a camera based on selected object\n\n## Properties\n\n### normal\n\n• **normal**: `vec3`\n\n___\n\n### position\n\n• **position**: `vec3`",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.CameraValues.md", "loc": { "lines": { "from": 1, "to": 23 } } }
    }
  ],
  [
    "265",
    {
      "pageContent": "---\nid: \"NovoRender.ColorHighlightParams\"\ntitle: \"WebGL API\"\nsidebar_label: \"ColorHighlightParams\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).ColorHighlightParams\n\nColor assign highlight parameters\n\n## Properties\n\n### color\n\n• **color**: readonly [`number`, `number`, `number`] \\| `Float32Array` \\| readonly [`number`, `number`, `number`, `number`]\n\nThe color to assign.\n\n___\n\n### kind\n\n• **kind**: ``\"color\"``\n\nThe kind of highlight.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.ColorHighlightParams.md", "loc": { "lines": { "from": 1, "to": 27 } } }
    }
  ],
  [
    "266",
    {
      "pageContent": "---\nid: \"NovoRender.CylinderValues\"\ntitle: \"WebGL API\"\nsidebar_label: \"CylinderValues\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).CylinderValues\n\nCylinderValues is a collection of values for measuring a single cylinder\n\n## Properties\n\n### centerLineEnd\n\n• **centerLineEnd**: `vec3`\n\nEnd of the line going in the center of the cylinder\n\n___\n\n### centerLineStart\n\n• **centerLineStart**: `vec3`\n\nStart of the line going in the center of the cylinder\n\n___\n\n### kind\n\n• **kind**: ``\"cylinder\"``\n\n___\n\n### radius\n\n• **radius**: `number`\n\nCylinder radius",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.CylinderValues.md", "loc": { "lines": { "from": 1, "to": 41 } } }
    }
  ],
  [
    "267",
    {
      "pageContent": "---\nid: \"NovoRender.DeviationColorGradientNode\"\ntitle: \"WebGL API\"\nsidebar_label: \"DeviationColorGradientNode\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).DeviationColorGradientNode\n\nNode for point cloud deviation color gradient curve.\n\n## Properties\n\n### color\n\n• `Readonly` **color**: `ReadonlyVec4`\n\nColor to use at this deviation.\n\n___\n\n### deviation\n\n• `Readonly` **deviation**: `number`\n\nDeviation.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.DeviationColorGradientNode.md", "loc": { "lines": { "from": 1, "to": 27 } } }
    }
  ],
  [
    "268",
    {
      "pageContent": "---\nid: \"NovoRender.DeviceProfile\"\ntitle: \"WebGL API\"\nsidebar_label: \"DeviceProfile\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).DeviceProfile\n\nHost device performance profile.\n\n**`Remarks`**\n\nThis profile is used to adjust rendering quality and detail to fit the contraints of of the host device.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.DeviceProfile.md", "loc": { "lines": { "from": 1, "to": 15 } } }
    }
  ],
  [
    "269",
    {
      "pageContent": "Properties\n\n### detailBias\n\n• `Readonly` **detailBias**: `number`\n\nGeometry detail bias.\n\n___\n\n### discreteGPU\n\n• `Readonly` **discreteGPU**: `boolean`\n\nDoes the host device have a discrete GPU / graphics card.\n\n___\n\n### gpuBytesLimit\n\n• `Readonly` **gpuBytesLimit**: `number`\n\nHard limit of gpu memory usage for static geometry.\n\n___\n\n### hasMajorPerformanceCaveat\n\n• `Readonly` **hasMajorPerformanceCaveat**: `boolean`\n\nWhether WebGL has some major performance caveat, such as CPU or remote rendering.\n\n___\n\n### name\n\n• `Readonly` **name**: `string`\n\nDevice type name.\n\n___\n\n### renderResolution\n\n• `Readonly` **renderResolution**: `number`\n\nRender resolution bias.\n\n___\n\n### renderResolutionIdle\n\n• `Readonly` **renderResolutionIdle**: `number`\n\nRender resolution bias for when camera is not moving.\n\n___\n\n### textureResolution\n\n• `Readonly` **textureResolution**: `number`\n\nTexture resolution bias.\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.DeviceProfile.md", "loc": { "lines": { "from": 17, "to": 81 } } }
    }
  ],
  [
    "270",
    {
      "pageContent": "textureResolution\n\n• `Readonly` **textureResolution**: `number`\n\nTexture resolution bias.\n\n___\n\n### throttleFrames\n\n• `Readonly` **throttleFrames**: `number`\n\n# of frames to idle to avoid crashes/kill due to excessive power consumption on problematic mobile devices.\n\n___\n\n### triangleLimit\n\n• `Readonly` **triangleLimit**: `number`\n\nHard limit of # triangles for static geometry.\n\n___\n\n### weakDevice\n\n• `Readonly` **weakDevice**: `boolean`\n\nIs this a device weak, i.e. unsuitable for demanding post processing and rendering techniques?",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.DeviceProfile.md", "loc": { "lines": { "from": 81, "to": 109 } } }
    }
  ],
  [
    "271",
    {
      "pageContent": "---\nid: \"NovoRender.DirectionalLight\"\ntitle: \"WebGL API\"\nsidebar_label: \"DirectionalLight\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).DirectionalLight\n\nParameters for directional lighting.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.DirectionalLight.md", "loc": { "lines": { "from": 1, "to": 11 } } }
    }
  ],
  [
    "272",
    {
      "pageContent": "---\nid: \"NovoRender.DrawObject\"\ntitle: \"WebGL API\"\nsidebar_label: \"DrawObject\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).DrawObject\n\nInformation about object to draw for measurement\n\n## Properties\n\n### drawType\n\n• **drawType**: ``\"lines\"`` \\| ``\"filled\"`` \\| ``\"vertex\"`` \\| ``\"curveSegment\"``\n\nType of object to draw\n\n___\n\n### vertices\n\n• **vertices**: `ReadonlyVec2`[]\n\n2d screen coordinates according to current camera",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.DrawObject.md", "loc": { "lines": { "from": 1, "to": 27 } } }
    }
  ],
  [
    "273",
    {
      "pageContent": "---\nid: \"NovoRender.DuoMeasurementValues\"\ntitle: \"WebGL API\"\nsidebar_label: \"DuoMeasurementValues\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).DuoMeasurementValues\n\nDuoMeasurementValues is a collection of values for measuring two objects",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.DuoMeasurementValues.md", "loc": { "lines": { "from": 1, "to": 11 } } }
    }
  ],
  [
    "274",
    {
      "pageContent": "Properties\n\n### distance\n\n• `Optional` **distance**: `number`\n\nTotal distance between the objects\n\n___\n\n### distanceX\n\n• **distanceX**: `number`\n\nDistance on the X plane between the objects\n\n___\n\n### distanceY\n\n• **distanceY**: `number`\n\nDistance on the Y plane between the objects\n\n___\n\n### distanceZ\n\n• **distanceZ**: `number`\n\nDistance on the Z plane between the objects\n\n___\n\n### normalDistance\n\n• `Optional` **normalDistance**: `number`\n\nTotal normdistance between the objects from object A\n\n___\n\n### normalPoints\n\n• `Optional` **normalPoints**: `vec3`[]\n\nPoint to display normal distance between objects from object A\n\n___\n\n### pointA\n\n• `Optional` **pointA**: `vec3`\n\nClosest point on object A\n\n___\n\n### pointB\n\n• `Optional` **pointB**: `vec3`\n\nClosest point on object B\n\n___\n\n### validMeasureSettings\n\n• `Optional` **validMeasureSettings**: `Object`\n\nThe valid measurement settings for the current measure objects A and B\n\n#### Type declaration\n\n| Name | Type |\n| :------ | :------ |\n| `a` | `boolean` |\n| `b` | `boolean` |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.DuoMeasurementValues.md", "loc": { "lines": { "from": 13, "to": 90 } } }
    }
  ],
  [
    "275",
    {
      "pageContent": "---\nid: \"NovoRender.DynamicAsset\"\ntitle: \"WebGL API\"\nsidebar_label: \"DynamicAsset\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).DynamicAsset\n\nAsset data used for dynamic objects.\n\n**`Remarks`**\n\nDynamic assets represents some combination of 3D geometry, textures, animations, sound and physics data.\r\nThey can then be introduced into a scene as dynamic objects, allowing multiple instances of each assets.\r\nAssets can be imported from an existing file, such as a gltf model.\n\n## Properties\n\n### boundingSphere\n\n• `Readonly` **boundingSphere**: [`BoundingSphere`](NovoRender.BoundingSphere.md)\n\nThe bounding sphere of the loaded asset.\n\n___\n\n### id\n\n• `Readonly` **id**: `number`\n\nThe id assigned to this asset.\n\n___\n\n### url\n\n• `Optional` `Readonly` **url**: `URL`\n\nThe url used for loading data, if any.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.DynamicAsset.md", "loc": { "lines": { "from": 1, "to": 41 } } }
    }
  ],
  [
    "276",
    {
      "pageContent": "Methods\n\n### dispose\n\n▸ **dispose**(): `void`\n\nDispose of asset data.\n\n**`Remarks`**\n\nDisposing of asset data will free up associated system memory.\r\nDoing so will make it impossible to create new dynamic objects from this asset.\r\nAlready created dynamic objects will remain, however, since they are essentially GPU memory copies.\n\n#### Returns\n\n`void`\n\n▸ **dispose**(): `void`\n\nDispose of asset data.\n\n**`Remarks`**\n\nDisposing of asset data will free up associated system memory.\r\nDoing so will make it impossible to create new dynamic objects from this asset.\r\nAlready created dynamic objects will remain, however, since they are essentially GPU memory copies.\n\n#### Returns\n\n`void`",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.DynamicAsset.md", "loc": { "lines": { "from": 43, "to": 73 } } }
    }
  ],
  [
    "277",
    {
      "pageContent": "---\nid: \"NovoRender.DynamicObject\"\ntitle: \"WebGL API\"\nsidebar_label: \"DynamicObject\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).DynamicObject\n\n3D object that can be animated and moved.\n\n**`Remarks`**\n\nUnlike the static geometry of a scene, dynamic objects can be added/removed and moved around after a scene has been created.\r\nThis functionality comes at a cost, however.\r\nDynamic objects must be fully loaded into client memory before they can be rendered, which restricts their practial use to relatively trivial geometry only.\r\nNor can they take advantage of globally pre-baked information, such as indirect light.\r\nThey also lack several features of static scene geometry, such as object picking and clipping volumes etc.\r\nDynamic objects can be helpful for 3D UI widgets, background animations of e.g. moving people, cars or animals etc.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.DynamicObject.md", "loc": { "lines": { "from": 1, "to": 20 } } }
    }
  ],
  [
    "278",
    {
      "pageContent": "Properties\n\n### geometry\n\n• `Readonly` **geometry**: [`DynamicAsset`](NovoRender.DynamicAsset.md)\n\nThe geometry used for rendering.\n\n___\n\n### position\n\n• **position**: `ReadonlyVec3`\n\nThe 3D position of object in world space coordinates.\n\n___\n\n### rotation\n\n• **rotation**: `ReadonlyQuat`\n\nThe 3D orientation of object in world space expressed as a quaternion.\n\n___\n\n### scale\n\n• **scale**: `ReadonlyVec3`\n\nThe scale of object in local coordinates.\n\n___\n\n### scene\n\n• `Readonly` **scene**: [`Scene`](NovoRender.Scene.md)\n\nThe scene from this this object was created.\n\n___\n\n### visible\n\n• **visible**: `boolean`\n\nWhether to render object or not.\n\n## Methods\n\n### dispose\n\n▸ **dispose**(): `void`\n\nRemove object from scene and free up any associated resources.\n\n#### Returns\n\n`void`\n\n▸ **dispose**(): `void`\n\nRemove object from scene and free up any associated resources.\n\n#### Returns\n\n`void`",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.DynamicObject.md", "loc": { "lines": { "from": 22, "to": 88 } } }
    }
  ],
  [
    "279",
    {
      "pageContent": "---\nid: \"NovoRender.ElevationColorGradientNode\"\ntitle: \"WebGL API\"\nsidebar_label: \"ElevationColorGradientNode\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).ElevationColorGradientNode\n\nNode for terrain elevation color gradient curve.\n\n## Properties\n\n### color\n\n• `Readonly` **color**: `ReadonlyVec3`\n\nColor to use at this elevation.\n\n___\n\n### elevation\n\n• `Readonly` **elevation**: `number`\n\nElevation above/below sea level in meters.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.ElevationColorGradientNode.md", "loc": { "lines": { "from": 1, "to": 27 } } }
    }
  ],
  [
    "280",
    {
      "pageContent": "---\nid: \"NovoRender.Environment\"\ntitle: \"WebGL API\"\nsidebar_label: \"Environment\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).Environment\n\nAn in-memory instance of an environment, ready for rendering.\n\n## Properties\n\n### id\n\n• `Readonly` **id**: `number`\n\nLoaded environment id.\n\n## Methods\n\n### dispose\n\n▸ **dispose**(): `Promise`<`void`\\>\n\nUnload environment instance and release all resources.\n\n**`Remarks`**\n\nIt is safe to call this function on an environment if it's currently not assigned to any view, or if all assigned views have rendered it at least once.\n\n#### Returns\n\n`Promise`<`void`\\>\n\n▸ **dispose**(): `Promise`<`void`\\>\n\nUnload environment instance and release all resources.\n\n**`Remarks`**\n\nIt is safe to call this function on an environment if it's currently not assigned to any view, or if all assigned views have rendered it at least once.\n\n#### Returns\n\n`Promise`<`void`\\>",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Environment.md", "loc": { "lines": { "from": 1, "to": 47 } } }
    }
  ],
  [
    "281",
    {
      "pageContent": "---\nid: \"NovoRender.EnvironmentDescription\"\ntitle: \"WebGL API\"\nsidebar_label: \"EnvironmentDescription\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).EnvironmentDescription\n\nBackground/IBL environment description\n\n## Properties\n\n### name\n\n• `Readonly` **name**: `string`\n\nDisplay name of environment\n\n___\n\n### thumnbnailURL\n\n• `Readonly` **thumnbnailURL**: `string`\n\nThumbnail URL.\n\n___\n\n### url\n\n• `Readonly` **url**: `string`\n\nData URL.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.EnvironmentDescription.md", "loc": { "lines": { "from": 1, "to": 35 } } }
    }
  ],
  [
    "282",
    {
      "pageContent": "---\nid: \"NovoRender.FlightControllerParams\"\ntitle: \"WebGL API\"\nsidebar_label: \"FlightControllerParams\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).FlightControllerParams\n\nFlight type camera motion controller",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.FlightControllerParams.md", "loc": { "lines": { "from": 1, "to": 11 } } }
    }
  ],
  [
    "283",
    {
      "pageContent": "Properties\n\n### autoZoomSpeed\n\n• `Optional` **autoZoomSpeed**: `boolean`\n\nThe allow automatic zoom velocity according last pivot point distance\n\n___\n\n### far\n\n• `Optional` **far**: `number`\n\nFar camera clipping distance\n\n___\n\n### fieldOfView\n\n• `Optional` **fieldOfView**: `number`\n\nCamera Field of View in degrees\n\n___\n\n### flightTime\n\n• `Optional` **flightTime**: `number`\n\nCamera flight time in zoomTo\n\n___\n\n### kind\n\n• **kind**: ``\"flight\"``\n\nThe kind of camera controller.\n\n___\n\n### linearVelocity\n\n• `Optional` **linearVelocity**: `number`\n\nThe velocity with which the camera moves through space in meters/second\n\n___\n\n### near\n\n• `Optional` **near**: `number`\n\nNear camera clipping distance\n\n___\n\n### pitch\n\n• `Optional` **pitch**: `number`\n\nThe current pitch of camera in degrees (+/-90)\n\n___\n\n### pivotPoint\n\n• `Optional` **pivotPoint**: ``false`` \\| `vec3`\n\nThe world space coordinate to orbit around. (0,0,0) is default.\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.FlightControllerParams.md", "loc": { "lines": { "from": 13, "to": 85 } } }
    }
  ],
  [
    "284",
    {
      "pageContent": "pivotPoint\n\n• `Optional` **pivotPoint**: ``false`` \\| `vec3`\n\nThe world space coordinate to orbit around. (0,0,0) is default.\n\n___\n\n### position\n\n• `Optional` **position**: `vec3`\n\nThe world space coordinate of camera. (0,0,0) is default.\n\n___\n\n### yaw\n\n• `Optional` **yaw**: `number`\n\nThe current yaw of camera in degrees (+/-180)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.FlightControllerParams.md", "loc": { "lines": { "from": 85, "to": 105 } } }
    }
  ],
  [
    "285",
    {
      "pageContent": "---\nid: \"NovoRender.GeoLocation\"\ntitle: \"WebGL API\"\nsidebar_label: \"GeoLocation\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).GeoLocation\n\nGeographic coordinate expressed by angles\n\n## Properties\n\n### latitude\n\n• **latitude**: `number`\n\nAngle ranging from 0° at the Equator to +90° (North pole) and -90° (South pole).\n\n___\n\n### longitude\n\n• **longitude**: `number`\n\nAngle ranging from 0° at the Prime Meridian to +180° eastward and −180° westward.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.GeoLocation.md", "loc": { "lines": { "from": 1, "to": 27 } } }
    }
  ],
  [
    "286",
    {
      "pageContent": "---\nid: \"NovoRender.GrayscaleParams\"\ntitle: \"WebGL API\"\nsidebar_label: \"GrayscaleParams\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).GrayscaleParams\n\nGrayscale post effect.\n\n## Properties\n\n### colorTransform\n\n• `Optional` `Readonly` **colorTransform**: `ReadonlyMat3`\n\n3x3 matrix for color transformation matrix for e.g. sephia look.\n\n___\n\n### kind\n\n• `Readonly` **kind**: ``\"gs\"``\n\nPost effect kind/discriminator.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.GrayscaleParams.md", "loc": { "lines": { "from": 1, "to": 27 } } }
    }
  ],
  [
    "287",
    {
      "pageContent": "---\nid: \"NovoRender.HSLAOptions\"\ntitle: \"WebGL API\"\nsidebar_label: \"HSLAOptions\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).HSLAOptions\n\nOptions for HSL + alpha color transformation.\n\n**`Remarks`**\n\nAll input values are between 0 and 1.\r\nSee [Wikipedia](https://en.wikipedia.org/wiki/HSL_and_HSV) for more details on the HSV color space.\n\n## Properties\n\n### lightness\n\n• `Readonly` **lightness**: `number` \\| [`LinearTransform`](NovoRender.LinearTransform.md)\n\nLightness adjustment.\n\n___\n\n### opacity\n\n• `Readonly` **opacity**: `number` \\| [`LinearTransform`](NovoRender.LinearTransform.md)\n\nOpacity/alpha adjustment.\n\n___\n\n### saturation\n\n• `Readonly` **saturation**: `number`\n\nSaturation adjustment (scale).",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.HSLAOptions.md", "loc": { "lines": { "from": 1, "to": 40 } } }
    }
  ],
  [
    "288",
    {
      "pageContent": "---\nid: \"NovoRender.HierarcicalObjectReference\"\ntitle: \"WebGL API\"\nsidebar_label: \"HierarcicalObjectReference\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).HierarcicalObjectReference\n\nHierarcical object reference to a single object within a scene instance.\n\n**`Remarks`**\n\nThis interface extends [ObjectReference](NovoRender.ObjectReference.md) with data required for hierachical tree views and 3D rendering without loading the entire set of metadata.\n\n## Hierarchy\n\n- [`ObjectReference`](NovoRender.ObjectReference.md)\n\n  ↳ **`HierarcicalObjectReference`**\n\n  ↳↳ [`ObjectData`](NovoRender.ObjectData.md)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.HierarcicalObjectReference.md", "loc": { "lines": { "from": 1, "to": 23 } } }
    }
  ],
  [
    "289",
    {
      "pageContent": "Hierarchy\n\n- [`ObjectReference`](NovoRender.ObjectReference.md)\n\n  ↳ **`HierarcicalObjectReference`**\n\n  ↳↳ [`ObjectData`](NovoRender.ObjectData.md)\n\n## Properties\n\n### bounds\n\n• `Optional` `Readonly` **bounds**: `Object`\n\nBounding volume\n\n#### Type declaration\n\n| Name | Type |\n| :------ | :------ |\n| `sphere` | [`BoundingSphere`](NovoRender.BoundingSphere.md) |\n\n___\n\n### descendants\n\n• `Optional` `Readonly` **descendants**: `number`[]\n\n___\n\n### id\n\n• `Readonly` **id**: `number`\n\nThe id of the object\n\n#### Inherited from\n\n[ObjectReference](NovoRender.ObjectReference.md).[id](NovoRender.ObjectReference.md#id)\n\n___\n\n### path\n\n• `Readonly` **path**: `string`\n\nThe path of the object expressed as a hierarchical filesystem-like path string.\n\n___\n\n### type\n\n• `Readonly` **type**: [`NodeType`](../enums/NovoRender.NodeType.md)\n\nType of node.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.HierarcicalObjectReference.md", "loc": { "lines": { "from": 23, "to": 77 } } }
    }
  ],
  [
    "290",
    {
      "pageContent": "Methods\n\n### loadMetaData\n\n▸ **loadMetaData**(): `Promise`<[`ObjectData`](NovoRender.ObjectData.md)\\>\n\nLoad the associated object meta data.\n\n#### Returns\n\n`Promise`<[`ObjectData`](NovoRender.ObjectData.md)\\>\n\n#### Inherited from\n\n[ObjectReference](NovoRender.ObjectReference.md).[loadMetaData](NovoRender.ObjectReference.md#loadmetadata)\n\n▸ **loadMetaData**(): `Promise`<[`ObjectData`](NovoRender.ObjectData.md)\\>\n\nLoad the associated object meta data.\n\n#### Returns\n\n`Promise`<[`ObjectData`](NovoRender.ObjectData.md)\\>\n\n#### Inherited from\n\n[ObjectReference](NovoRender.ObjectReference.md).[loadMetaData](NovoRender.ObjectReference.md#loadmetadata)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.HierarcicalObjectReference.md", "loc": { "lines": { "from": 79, "to": 105 } } }
    }
  ],
  [
    "291",
    {
      "pageContent": "---\nid: \"NovoRender.Highlight\"\ntitle: \"WebGL API\"\nsidebar_label: \"Highlight\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).Highlight\n\nVisual highlighting for a group of objects.\n\n**`Remarks`**\n\nHighlighting is done using a linear transformation matrix per group, which allows for various visual effects in addition to simply assigning a single color.\r\nThis can be useful to preserve at least some aspects of the original material colors, by, e.g. making certain objects semi-transparent, darker/brighter or color/grayscale.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Highlight.md", "loc": { "lines": { "from": 1, "to": 16 } } }
    }
  ],
  [
    "292",
    {
      "pageContent": "Properties\n\n### rgbaTransform\n\n• **rgbaTransform**: { `0`: `number` ; `length`: ``20``  } & readonly `number`[]\n\n5x4 row-major matrix for color/opacity transform.\n\n**`Remarks`**\n\nThis matrix defines the linear transformation that is applied to the original RGBA color before rendering.\r\nThe fifth column is multiplied by a constant 1, making it useful for translation.\r\nThe resulting colors are computed thus:\r\n```\r\noutput_red = r*m[0] + g*m[1] + b*m[2] + a*m[3] + m[4]\r\noutput_green = r*m[5] + g*m[6] + b*m[7] + a*m[8] + m[9]\r\noutput_blue = r*m[10] + g*m[11] + b*m[12] + a*m[13] + m[14]\r\noutput_alpha = r*m[15] + g*m[16] + b*m[17] + a*m[18] + m[19]\r\n```\r\nAll input values are between 0 and 1 and output value will be clamped to this range.\r\nSetting this matrix directly offers the most amount of flexibility.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Highlight.md", "loc": { "lines": { "from": 18, "to": 38 } } }
    }
  ],
  [
    "293",
    {
      "pageContent": "---\nid: \"NovoRender.ImageEncodeOptions_\"\ntitle: \"WebGL API\"\nsidebar_label: \"ImageEncodeOptions_\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).ImageEncodeOptions_\n\nPolyfill for missing/removed API interface.\n\n**`Remarks`**\n\nSee https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/convertToBlob for more details.\n\n## Properties\n\n### quality\n\n• `Readonly` **quality**: `number`\n\n___\n\n### type\n\n• `Readonly` **type**: `string`",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.ImageEncodeOptions_.md", "loc": { "lines": { "from": 1, "to": 27 } } }
    }
  ],
  [
    "294",
    {
      "pageContent": "---\nid: \"NovoRender.IntensityColorGradientNode\"\ntitle: \"WebGL API\"\nsidebar_label: \"IntensityColorGradientNode\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).IntensityColorGradientNode\n\nNode for point cloud intensity color gradient curve.\n\n## Properties\n\n### color\n\n• `Readonly` **color**: `ReadonlyVec4`\n\nColor to use at this deviation.\n\n___\n\n### intensity\n\n• `Readonly` **intensity**: `number`\n\nIntensity.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.IntensityColorGradientNode.md", "loc": { "lines": { "from": 1, "to": 27 } } }
    }
  ],
  [
    "295",
    {
      "pageContent": "---\nid: \"NovoRender.Internal.CameraControllerExt\"\ntitle: \"WebGL API\"\nsidebar_label: \"CameraControllerExt\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).[Internal](../namespaces/NovoRender.Internal.md).CameraControllerExt\n\nCamera motion controller.\n\n**`Remarks`**\n\nA motion controller fascilitates navigating a camera in space from user input.\n\n## Hierarchy\n\n- [`CameraController`](NovoRender.CameraController.md)\n\n  ↳ **`CameraControllerExt`**",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.CameraControllerExt.md", "loc": { "lines": { "from": 1, "to": 21 } } }
    }
  ],
  [
    "296",
    {
      "pageContent": "Properties\n\n### autoZoomToScene\n\n• `Optional` **autoZoomToScene**: `boolean`\n\nWhether to automatically zoom to scene extents when new scene is selected. Default is true.\n\n#### Inherited from\n\n[CameraController](NovoRender.CameraController.md).[autoZoomToScene](NovoRender.CameraController.md#autozoomtoscene)\n\n___\n\n### enabled\n\n• **enabled**: `boolean`\n\nWhether controller is enabled. Default is true.\n\n#### Inherited from\n\n[CameraController](NovoRender.CameraController.md).[enabled](NovoRender.CameraController.md#enabled)\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.CameraControllerExt.md", "loc": { "lines": { "from": 23, "to": 47 } } }
    }
  ],
  [
    "297",
    {
      "pageContent": "fingersMap\n\n• **fingersMap**: `Object`\n\nDefines touch fingers actions.\n\n**`Param`**\n\ndefines how many fingers will rotate, pan and orbit camera.\n\n**`Remarks`**\n\nDefault value: { rotate: 1, pan: 3, orbit: 3, pivot: 3 }\r\nrotate, pan and orbit are movement while holding fingers\r\npivot is setting of pivot point for orbit rotation\r\nYou could disable some action by do not set it or set to 0, like { rotate: 1, pan: 2 } or { rotate: 1, pan: 2, orbit: 0}\n\n#### Type declaration\n\n| Name | Type |\n| :------ | :------ |\n| `orbit` | `number` |\n| `pan` | `number` |\n| `pivot` | `number` |\n| `rotate` | `number` |\n\n#### Inherited from\n\n[CameraController](NovoRender.CameraController.md).[fingersMap](NovoRender.CameraController.md#fingersmap)\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.CameraControllerExt.md", "loc": { "lines": { "from": 49, "to": 79 } } }
    }
  ],
  [
    "298",
    {
      "pageContent": "mouseButtonsMap\n\n• **mouseButtonsMap**: `Object`\n\nDefines mouse buttons actions.\n\n**`Param`**\n\nBitmask definition what buttons will rotate, pan and orbit camera.\n\n**`Remarks`**\n\nBit mask of buttons:\r\n1 - left button.\r\n2 - right button.\r\n4 - middle button.\r\nDefault value: { rotate: 1, pan: 4, orbit: 2, pivot: 2 }\r\nrotate, pan and orbit are movement while button hold\r\npivot is setting of pivot point for orbit rotation on button down\r\nYou could disable some action by do not set it or set to 0, like { rotate: 1, pan: 2 } or { rotate: 1, pan: 2, orbit: 0}\r\nHere could be combination of buttons, for example if you want use right button for rotation and left or middle button for panning and no orbit then value should be { rotate: 2, pan: 5 }\n\n#### Type declaration\n\n| Name | Type |\n| :------ | :------ |\n| `orbit` | `number` |\n| `pan` | `number` |\n| `pivot` | `number` |\n| `rotate` | `number` |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.CameraControllerExt.md", "loc": { "lines": { "from": 81, "to": 110 } } }
    }
  ],
  [
    "299",
    {
      "pageContent": "Type declaration\n\n| Name | Type |\n| :------ | :------ |\n| `orbit` | `number` |\n| `pan` | `number` |\n| `pivot` | `number` |\n| `rotate` | `number` |\n\n#### Inherited from\n\n[CameraController](NovoRender.CameraController.md).[mouseButtonsMap](NovoRender.CameraController.md#mousebuttonsmap)\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.CameraControllerExt.md", "loc": { "lines": { "from": 110, "to": 123 } } }
    }
  ],
  [
    "300",
    {
      "pageContent": "params\n\n• `Readonly` **params**: `Required`<[`CameraControllerParams`](../namespaces/NovoRender.md#cameracontrollerparams)\\>\n\nController parameters\n\n#### Inherited from\n\n[CameraController](NovoRender.CameraController.md).[params](NovoRender.CameraController.md#params)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.CameraControllerExt.md", "loc": { "lines": { "from": 125, "to": 133 } } }
    }
  ],
  [
    "301",
    {
      "pageContent": "Methods\n\n### connect\n\n▸ **connect**(): `void`\n\n#### Returns\n\n`void`\n\n▸ **connect**(): `void`\n\n#### Returns\n\n`void`\n\n___\n\n### disconnect\n\n▸ **disconnect**(): `void`\n\n#### Returns\n\n`void`\n\n▸ **disconnect**(): `void`\n\n#### Returns\n\n`void`\n\n___\n\n### moveTo\n\n▸ **moveTo**(`position`, `rotation`): `void`\n\nMove camera to exact position and rotation.\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `position` | `vec3` |\n| `rotation` | `quat` |\n\n#### Returns\n\n`void`\n\n#### Inherited from\n\n[CameraController](NovoRender.CameraController.md).[moveTo](NovoRender.CameraController.md#moveto)\n\n▸ **moveTo**(`position`, `rotation`): `void`\n\nMove camera to exact position and rotation.\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `position` | `ReadonlyVec3` |\n| `rotation` | `ReadonlyQuat` |\n\n#### Returns\n\n`void`\n\n#### Inherited from\n\n[CameraController](NovoRender.CameraController.md).[moveTo](NovoRender.CameraController.md#moveto)\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.CameraControllerExt.md", "loc": { "lines": { "from": 135, "to": 209 } } }
    }
  ],
  [
    "302",
    {
      "pageContent": "reset\n\n▸ **reset**(): `void`\n\nReset camera position and rotation to scene default.\n\n#### Returns\n\n`void`\n\n#### Overrides\n\n[CameraController](NovoRender.CameraController.md).[reset](NovoRender.CameraController.md#reset)\n\n___\n\n### update\n\n▸ **update**(`camera`, `sceneVolume`, `deltaTime`): `void`\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `camera` | [`Camera`](NovoRender.Camera.md) |\n| `sceneVolume` | [`BoundingSphere`](NovoRender.BoundingSphere.md) |\n| `deltaTime` | `number` |\n\n#### Returns\n\n`void`\n\n▸ **update**(`camera`, `sceneVolume`, `deltaTime`): `void`\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `camera` | [`Camera`](NovoRender.Camera.md) |\n| `sceneVolume` | [`BoundingSphere`](NovoRender.BoundingSphere.md) |\n| `deltaTime` | `number` |\n\n#### Returns\n\n`void`\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.CameraControllerExt.md", "loc": { "lines": { "from": 211, "to": 257 } } }
    }
  ],
  [
    "303",
    {
      "pageContent": "zoomTo\n\n▸ **zoomTo**(`bounds`): `void`\n\nZoom to area of interest.\n\n**`Remarks`**\n\nBounding volumes can be gotten from the scene itself, or an selection of objects within the scene.\r\nA typical case is to update the 3D view to reflect some object selection.\r\nThe controller will attempt to position the camera at a reasonable distance from the specified volume, using its center as the focal point.\r\nThe controller will not attempt to avoid moving through walls etc.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `bounds` | [`BoundingSphere`](NovoRender.BoundingSphere.md) | The bounding volume that should be brought into view. |\n\n#### Returns\n\n`void`",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.CameraControllerExt.md", "loc": { "lines": { "from": 259, "to": 280 } } }
    }
  ],
  [
    "304",
    {
      "pageContent": "Returns\n\n`void`\n\n#### Inherited from\n\n[CameraController](NovoRender.CameraController.md).[zoomTo](NovoRender.CameraController.md#zoomto)\n\n▸ **zoomTo**(`bounds`): `void`\n\nZoom to area of interest.\n\n**`Remarks`**\n\nBounding volumes can be gotten from the scene itself, or an selection of objects within the scene.\r\nA typical case is to update the 3D view to reflect some object selection.\r\nThe controller will attempt to position the camera at a reasonable distance from the specified volume, using its center as the focal point.\r\nThe controller will not attempt to avoid moving through walls etc.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `bounds` | [`BoundingSphere`](NovoRender.BoundingSphere.md) | The bounding volume that should be brought into view. |\n\n#### Returns\n\n`void`\n\n#### Inherited from\n\n[CameraController](NovoRender.CameraController.md).[zoomTo](NovoRender.CameraController.md#zoomto)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.CameraControllerExt.md", "loc": { "lines": { "from": 280, "to": 311 } } }
    }
  ],
  [
    "305",
    {
      "pageContent": "---\nid: \"NovoRender.Internal.CameraExt\"\ntitle: \"WebGL API\"\nsidebar_label: \"CameraExt\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).[Internal](../namespaces/NovoRender.Internal.md).CameraExt\n\nCamera Object.\n\n## Hierarchy\n\n- [`Camera`](NovoRender.Camera.md)\n\n  ↳ **`CameraExt`**",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.CameraExt.md", "loc": { "lines": { "from": 1, "to": 17 } } }
    }
  ],
  [
    "306",
    {
      "pageContent": "Properties\n\n### controller\n\n• **controller**: [`CameraController`](NovoRender.CameraController.md)\n\nGet or set the motion controller assigned to this camera. By default, this will be a static controller, whose only function is to provide a reasonable default view for a given scene.\n\n#### Inherited from\n\n[Camera](NovoRender.Camera.md).[controller](NovoRender.Camera.md#controller)\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.CameraExt.md", "loc": { "lines": { "from": 19, "to": 31 } } }
    }
  ],
  [
    "307",
    {
      "pageContent": "far\n\n• **far**: `number`\n\nDistance to the view frustum far clipping plane.\n\n**`Remarks`**\n\nThe value must be larger than [near](NovoRender.Internal.CameraExt.md#near) and and large enough to include the desired maximum viewing distance, which typically is some multiple of the scene size.\r\n Camera controllers will automatically adjust this value whenever a new scene is assigned to their view, so setting it manually is generally not required.\r\n See [https://en.wikipedia.org/wiki/Viewing_frustum](https://en.wikipedia.org/wiki/Viewing_frustum) for more details.\n\n#### Inherited from\n\n[Camera](NovoRender.Camera.md).[far](NovoRender.Camera.md#far)\n\n___\n\n### fieldOfView\n\n• **fieldOfView**: `number`\n\nField of view expressed as the vertical viewing angle in degrees for pinhole cameras, or vertical aperature dimension in meters for orthographic cameras.\n\n#### Inherited from\n\n[Camera](NovoRender.Camera.md).[fieldOfView](NovoRender.Camera.md#fieldofview)\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.CameraExt.md", "loc": { "lines": { "from": 33, "to": 61 } } }
    }
  ],
  [
    "308",
    {
      "pageContent": "generation\n\n• `Readonly` **generation**: `number`\n\n___\n\n### hasChanged\n\n• `Readonly` **hasChanged**: `boolean`\n\n___\n\n### kind\n\n• `Readonly` **kind**: ``\"pinhole\"`` \\| ``\"orthographic\"``\n\nCamera type.\n\n#### Inherited from\n\n[Camera](NovoRender.Camera.md).[kind](NovoRender.Camera.md#kind)\n\n___\n\n### near\n\n• **near**: `number`\n\nDistance to the view frustum near clipping plane.\n\n**`Remarks`**\n\nThe value must be larger than 0 and preferably as large as possible without creating undesired clipping effects near the camera.\r\n Camera controllers will automatically adjust this value whenever a new scene is assigned to their view, so setting it manually is generally not required.\r\n See [https://en.wikipedia.org/wiki/Viewing_frustum](https://en.wikipedia.org/wiki/Viewing_frustum) for more details.\n\n#### Inherited from\n\n[Camera](NovoRender.Camera.md).[near](NovoRender.Camera.md#near)\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.CameraExt.md", "loc": { "lines": { "from": 63, "to": 103 } } }
    }
  ],
  [
    "309",
    {
      "pageContent": "position\n\n• `Readonly` **position**: `vec3`\n\nCamera position expressed as a world space 3D vector.\n\n#### Inherited from\n\n[Camera](NovoRender.Camera.md).[position](NovoRender.Camera.md#position)\n\n___\n\n### rotation\n\n• `Readonly` **rotation**: `quat`\n\nCamera orientation expressed as a world space 3D quaternion.\n\n#### Inherited from\n\n[Camera](NovoRender.Camera.md).[rotation](NovoRender.Camera.md#rotation)\n\n___\n\n### view\n\n• `Readonly` **view**: [`View`](NovoRender.View.md)\n\nThe view to which this camera belongs.\n\n#### Inherited from\n\n[Camera](NovoRender.Camera.md).[view](NovoRender.Camera.md#view)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.CameraExt.md", "loc": { "lines": { "from": 105, "to": 137 } } }
    }
  ],
  [
    "310",
    {
      "pageContent": "Methods\n\n### getDistanceFromViewPlane\n\n▸ **getDistanceFromViewPlane**(`point`): `number`\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `point` | `ReadonlyVec3` |\n\n#### Returns\n\n`number`\n\n#### Inherited from\n\n[Camera](NovoRender.Camera.md).[getDistanceFromViewPlane](NovoRender.Camera.md#getdistancefromviewplane)\n\n▸ **getDistanceFromViewPlane**(`point`): `number`\n\nCompute the distance of point from camera view plane.\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `point` | `ReadonlyVec3` |\n\n#### Returns\n\n`number`\n\n#### Inherited from\n\n[Camera](NovoRender.Camera.md).[getDistanceFromViewPlane](NovoRender.Camera.md#getdistancefromviewplane)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.CameraExt.md", "loc": { "lines": { "from": 139, "to": 175 } } }
    }
  ],
  [
    "311",
    {
      "pageContent": "---\nid: \"NovoRender.Internal.RenderSettingsExt\"\ntitle: \"WebGL API\"\nsidebar_label: \"RenderSettingsExt\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).[Internal](../namespaces/NovoRender.Internal.md).RenderSettingsExt\n\nRender settings\n\n**`Remarks`**\n\nThese settings controls various visual aspects of the 3D view.\n\n## Hierarchy\n\n- [`RenderSettings`](NovoRender.RenderSettings.md)\n\n  ↳ **`RenderSettingsExt`**",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 1, "to": 21 } } }
    }
  ],
  [
    "312",
    {
      "pageContent": "Properties\n\n### advanced\n\n• `Readonly` **advanced**: `Object`\n\nAdvanced render settings.\n\n#### Type declaration\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `doubleSided` | { `opaque`: `boolean` ; `transparent`: `boolean`  } | Double sided face rendering. |\n| `doubleSided.opaque` | `boolean` | Render opaque surfaces as double sided. |\n| `doubleSided.transparent` | `boolean` | Render transparent surface as double sided. |\n| `hideDocuments` | `boolean` | Hide documents |\n| `hideLines` | `boolean` | Hide lines |\n| `hidePoints` | `boolean` | Hide Point Clouds |\n| `hideTerrain` | `boolean` | Hide Terrain |\n| `hideTriangles` | `boolean` | Hide triangulated geometry |\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 23, "to": 44 } } }
    }
  ],
  [
    "313",
    {
      "pageContent": "background\n\n• `Readonly` **background**: `Object`\n\nSettings for rendering of background.\n\n#### Type declaration\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `color` | `ReadonlyVec4` | Background color. **`Remarks`** Setting the alpha component < 1 will generate a transparent background. If undefined, background will use image from environment map, or default color if no environment is set. |\n\n#### Inherited from\n\n[RenderSettings](NovoRender.RenderSettings.md).[background](NovoRender.RenderSettings.md#background)\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 46, "to": 62 } } }
    }
  ],
  [
    "314",
    {
      "pageContent": "clippingPlanes\n\n• `Readonly` **clippingPlanes**: `Object`\n\nClipping planes settings.\n\n**`Deprecated`**\n\nUse clippingVolume instead.\n\n**`Remarks`**\n\nClipping planes allows for an axis alligned box to define what volume will be rendered or not.\r\nThis is useful for rendering various cross sections and revealing internal geometry.\n\n#### Type declaration\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `bounds` | [`AABB`](NovoRender.AABB.md) | The axis aligned bounding volume. |\n| `enabled` | `boolean` | Whether to clip geometry by the actual bounding box or not. |\n| `highlight` | `number` | Highlighted side. |\n| `inside` | `boolean` | Whether to clip geometry inside or outside the actual bounding box. |\n| `showBox` | `boolean` | Whether to show the actual bounding box or not. |\n\n#### Inherited from\n\n[RenderSettings](NovoRender.RenderSettings.md).[clippingPlanes](NovoRender.RenderSettings.md#clippingplanes)\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 64, "to": 93 } } }
    }
  ],
  [
    "315",
    {
      "pageContent": "clippingVolume\n\n• `Readonly` **clippingVolume**: `Object`\n\nClipping volume settings.\n\n**`Remarks`**\n\nClipping volume allows for a set of up to 6 planes to define a volume that excluded from rendering.\r\nThis is useful for rendering various cross sections and revealing internal geometry.\n\n#### Type declaration\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `enabled` | `boolean` | Whether to clip geometry by the actual bounding box or not. |\n| `mode` | ``\"intersection\"`` \\| ``\"union\"`` | How multiple clipping planes are combined. Default: \"union\" |\n| `planes` | readonly `ReadonlyVec4`[] | List of clipping planes (max 6), expressed as plane normal (x,y,z) and offset from origo (w) in a 4D world space vector. |\n\n#### Inherited from\n\n[RenderSettings](NovoRender.RenderSettings.md).[clippingVolume](NovoRender.RenderSettings.md#clippingvolume)\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 95, "to": 118 } } }
    }
  ],
  [
    "316",
    {
      "pageContent": "diagnostics\n\n• `Readonly` **diagnostics**: `Object`\n\n#### Type declaration\n\n| Name | Type |\n| :------ | :------ |\n| `holdDynamic` | `boolean` |\n| `maxQueueSize` | `number` |\n| `showBoundingBoxes` | `boolean` |\n\n___\n\n### display\n\n• `Readonly` **display**: `Object`\n\nDisplay settings\n\n#### Type declaration\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `height` | `number` | Display height in pixels. |\n| `width` | `number` | Display width in pixels. |\n\n#### Inherited from\n\n[RenderSettings](NovoRender.RenderSettings.md).[display](NovoRender.RenderSettings.md#display)\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 120, "to": 151 } } }
    }
  ],
  [
    "317",
    {
      "pageContent": "environment\n\n• `Optional` **environment**: [`Environment`](NovoRender.Environment.md)\n\nCurrent background/IBL environment.\n\n**`Remarks`**\n\nEnvironments are a pre-baked set of textures for background and lighting information.\r\nFor retrieving a list of available environments, see [availableEnvironments](NovoRender.API.md#availableenvironments).\r\nAn environment must be loaded before it can be assigned here, via View.loadEnvironment.\r\nAssigning an environment impacts lighting if no light.sun is defined, and also background images [background](NovoRender.Internal.RenderSettingsExt.md#background) if no color is defined.\r\nImage based lighting (IBL) uses light information from HDRI panoramic images to create a more natural looking light and ambience.\r\nIf undefined, a basic directional sun lighting model will be used instead, allowing for dynamic changes in light color and direction at the expense of esthetics.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 153, "to": 166 } } }
    }
  ],
  [
    "318",
    {
      "pageContent": "Inherited from\n\n[RenderSettings](NovoRender.RenderSettings.md).[environment](NovoRender.RenderSettings.md#environment)\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 168, "to": 172 } } }
    }
  ],
  [
    "319",
    {
      "pageContent": "exposure\n\n• `Optional` **exposure**: `number`\n\nCamera light exposure as stops of power of 2.\n\n**`Remarks`**\n\nNegative values darkens the image, while positive ones brightens it.\r\nThe default value is 0.0.\n\n#### Inherited from\n\n[RenderSettings](NovoRender.RenderSettings.md).[exposure](NovoRender.RenderSettings.md#exposure)\n\n___\n\n### generation\n\n• `Readonly` **generation**: `number`\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 174, "to": 195 } } }
    }
  ],
  [
    "320",
    {
      "pageContent": "generation\n\n• `Readonly` **generation**: `number`\n\n___\n\n### grid\n\n• `Readonly` **grid**: `Object`\n\nGrid settings\n\n#### Type declaration\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `axisX` | `vec3` | X axis of the grid, length determines the distance between lines |\n| `axisY` | `vec3` | Y axis of the grid, length determines the distance between lines |\n| `enabled` | `boolean` | Enable grid plane. |\n| `majorColor` | `ReadonlyVec3` | Color of major grid lines |\n| `majorLineCount` | `number` | Number of major lines, odd number needed to have lines go through origo. |\n| `minorColor` | `ReadonlyVec3` | Color of minor grid lines |\n| `minorLineCount` | `number` | Number of minor lines between major lines. |\n| `origo` | `vec3` | Origo of the grid |\n\n#### Inherited from\n\n[RenderSettings](NovoRender.RenderSettings.md).[grid](NovoRender.RenderSettings.md#grid)\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 195, "to": 224 } } }
    }
  ],
  ["321", { "pageContent": "light\n\n• `Readonly` **light**: `Object`\n\nLight settings", "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 226, "to": 230 } } } }],
  ["322", { "pageContent": "Type declaration", "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 230, "to": 230 } } } }],
  [
    "323",
    {
      "pageContent": "| Name | Type | Description |\n| :------ | :------ | :------ |\n| `ambient` | { `brightness`: `number`  } | Ambient hemisphere light, emulating indirect light scattered from atmosphere. |\n| `ambient.brightness` | `number` | Brightness expressed as a scalar from 0.0 (none), to 1.0 (max). |\n| `camera` | { `brightness`: `number` ; `distance`: `number`  } | Camera local light. |\n| `camera.brightness` | `number` | Brightness expressed as a scalar from 0.0 (none), to 1.0 (bright). |\n| `camera.distance` | `number` | Fall-off distance, beyond which this light is effectively disabled. |\n| `sun` | { `brightness`: `number` ; `position`: { `azimuth`: `number` ; `inclination`: `number`  } ; `time?`: `Date`  } | Direct sunlight. |\n| `sun.brightness` | `number` | Brightness expressed as a scalar from 0.0 (none), to 1.0 (sunny). |\n| `sun.position` | { `azimuth`: `number` ; `inclination`: `number`  } | Sun position on the sky. |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 429, "to": 438 } } }
    }
  ],
  [
    "324",
    {
      "pageContent": "| `sun.brightness` | `number` | Brightness expressed as a scalar from 0.0 (none), to 1.0 (sunny). |\n| `sun.position` | { `azimuth`: `number` ; `inclination`: `number`  } | Sun position on the sky. |\n| `sun.position.azimuth` | `number` | Solar azimuth angle in degrees, where 0° is due north, 90° is due east and 270° due west. |\n| `sun.position.inclination` | `number` | Solar elevation angle in degrees, where 0° at the horizon and 90° is straight up. |\n| `sun.time?` | `Date` | If set then sun [position](NovoRender.Internal.RenderSettingsExt.md#position) on the sky will be calculated automatically based on scene [location](NovoRender.Scene.md#location), [timezone](NovoRender.Scene.md#timezone) and this time. |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 438, "to": 442 } } }
    }
  ],
  [
    "325",
    {
      "pageContent": "Inherited from\n\n[RenderSettings](NovoRender.RenderSettings.md).[light](NovoRender.RenderSettings.md#light)\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 444, "to": 448 } } }
    }
  ],
  [
    "326",
    {
      "pageContent": "objectHighlights\n\n• **objectHighlights**: readonly [`Highlight`](NovoRender.Highlight.md)[]\n\nColor transforms for various highlighting groups.\n\n**`Remarks`**\n\nThese highlights are used by the scene.objectHighlighter.\r\nModifing the highlights is done by assigning a new array, rather than mutating the existing one.\r\nThe maximum number of highlights supported is currently 256, whereof the last (255) is reserved for hidden objects.\r\nThe highlight at index 0 is the initial default for all objects and can be used to e.g. highlight all objects that are not selected or otherwise part of another highlighting group.\n\n#### Inherited from\n\n[RenderSettings](NovoRender.RenderSettings.md).[objectHighlights](NovoRender.RenderSettings.md#objecthighlights)\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 450, "to": 467 } } }
    }
  ],
  [
    "327",
    {
      "pageContent": "ocean\n\n• `Readonly` **ocean**: `Object`\n\nOcean render settings\n\n**`Remarks`**\n\nIf undefined, ocean geometry will not be rendered.\n\n#### Type declaration\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `color` | `ReadonlyVec3` | Ocean color |\n| `enabled` | `boolean` | Enable ocean rendering (default false). |\n| `opacity` | `number` | Ocean opacity (default 0.5). |\n\n#### Inherited from\n\n[RenderSettings](NovoRender.RenderSettings.md).[ocean](NovoRender.RenderSettings.md#ocean)\n\n___\n\n### outline\n\n• `Readonly` **outline**: `Object`\n\n#### Type declaration\n\n| Name | Type |\n| :------ | :------ |\n| `color?` | `ReadonlyVec4` |\n| `enable` | `boolean` |\n\n___\n\n### pickBuffer\n\n• `Readonly` **pickBuffer**: `Object`\n\n#### Type declaration\n\n| Name | Type |\n| :------ | :------ |\n| `includeTransparent` | `bool` |\n\n#### Inherited from\n\n[RenderSettings](NovoRender.RenderSettings.md).[pickBuffer](NovoRender.RenderSettings.md#pickbuffer)\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 469, "to": 520 } } }
    }
  ],
  [
    "328",
    {
      "pageContent": "points\n\n• `Readonly` **points**: `Object`\n\nPoint cloud settings.\n\n**`Remarks`**\n\nThe sizes are cumulative and computed as follows:\r\n``effective_point_pixel_size = max(1, pixelSize + projectedSizeOf(metricSize + tolerance * toleranceFactor))``.\r\nMetric size is projected as a 3D sphere at the point origo to deterine pixel size.\r\nThe term pixel refers to the size of a pixel in the target canvas element, which resolution may differ from that of the render buffer.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 522, "to": 533 } } }
    }
  ],
  ["329", { "pageContent": "Type declaration", "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 533, "to": 533 } } } }],
  [
    "330",
    {
      "pageContent": "| Name | Type | Description |\n| :------ | :------ | :------ |\n| `deviation` | { `colors`: readonly [`DeviationColorGradientNode`](NovoRender.DeviationColorGradientNode.md)[] ; `mode`: ``\"on\"`` \\| ``\"off\"`` \\| ``\"mix\"``  } | - |\n| `deviation.colors` | readonly [`DeviationColorGradientNode`](NovoRender.DeviationColorGradientNode.md)[] | - |\n| `deviation.mode` | ``\"on\"`` \\| ``\"off\"`` \\| ``\"mix\"`` | - |\n| `intensity` | { `colors`: readonly [`IntensityColorGradientNode`](NovoRender.IntensityColorGradientNode.md)[] ; `mode`: ``\"on\"`` \\| ``\"off\"`` \\| ``\"mix\"``  } | - |\n| `intensity.colors` | readonly [`IntensityColorGradientNode`](NovoRender.IntensityColorGradientNode.md)[] | - |\n| `intensity.mode` | ``\"on\"`` \\| ``\"off\"`` \\| ``\"mix\"`` | - |\n| `shape` | ``\"disc\"`` \\| ``\"square\"`` | Point shape. Default is \"disc\". |\n| `size` | { `maxPixel`: `number` ; `metric`: `number` ; `pixel`: `number` ; `toleranceFactor`: `number`  } | - |\n| `size.maxPixel` | `number` | Max point size in pixels. |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 839, "to": 849 } } }
    }
  ],
  [
    "331",
    {
      "pageContent": "| `size` | { `maxPixel`: `number` ; `metric`: `number` ; `pixel`: `number` ; `toleranceFactor`: `number`  } | - |\n| `size.maxPixel` | `number` | Max point size in pixels. |\n| `size.metric` | `number` | Point size in meters. |\n| `size.pixel` | `number` | Point size in pixels. |\n| `size.toleranceFactor` | `number` | The scaling factor for applying the tolerance of the current level of detail to point size. **`Remarks`** Different levels of detail (LOD) will have different point densities. Taking this difference into account may result in a more uniform point coverage and visually pleasing result. The tolerance of each LOD reflects the point merging distance threshold in meters used to reduce # points, or 0 for the original level of detail. |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 849, "to": 853 } } }
    }
  ],
  [
    "332",
    {
      "pageContent": "Inherited from\n\n[RenderSettings](NovoRender.RenderSettings.md).[points](NovoRender.RenderSettings.md#points)\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 855, "to": 859 } } }
    }
  ],
  [
    "333",
    {
      "pageContent": "quality\n\n• `Readonly` **quality**: `Object`\n\nRender quality settings for adjusting performance to various devices",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 861, "to": 865 } } }
    }
  ],
  ["334", { "pageContent": "Type declaration", "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 865, "to": 865 } } } }],
  [
    "335",
    {
      "pageContent": "| Name | Type | Description |\n| :------ | :------ | :------ |\n| `detail` | { `autoAdjust`: { `enabled`: `boolean` ; `max`: `number` ; `min`: `number`  } ; `maxLodTextureBytes?`: `number` ; `maxLodTriangles?`: `number` ; `value`: `number`  } | Geometry detail settings. |\n| `detail.autoAdjust` | { `enabled`: `boolean` ; `max`: `number` ; `min`: `number`  } | Auto adjustment based on current device's rendering performance. |\n| `detail.autoAdjust.enabled` | `boolean` | Is automatic adjustment enabled? |\n| `detail.autoAdjust.max` | `number` | Upper bound for automatic adjustment. |\n| `detail.autoAdjust.min` | `number` | Lower bound for automatic adjustment. |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 1200, "to": 1206 } } }
    }
  ],
  [
    "336",
    {
      "pageContent": "| `detail.autoAdjust.max` | `number` | Upper bound for automatic adjustment. |\n| `detail.autoAdjust.min` | `number` | Lower bound for automatic adjustment. |\n| `detail.maxLodTextureBytes?` | `number` | Max limit for # of bytes used for textures in static LOD geometry. **`Remarks`** Adjust this to accomodate memory constraints on your device. Default value is undefined, which disables enforcement of this limit. The # bytes refers to the textxure image and does not include memory used for mipmapping or device specific format conversions. Hardware compressed textures only count for the compressed byte size. Textures from DynamicObjects are not included in the triangle count and thus not contrained by this value. |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 1206, "to": 1208 } } }
    }
  ],
  [
    "337",
    {
      "pageContent": "| `detail.maxLodTriangles?` | `number` | Max limit for # of triangles used for static LOD geometry. **`Remarks`** Adjust this to enforce memory and performance constraints on your device. Default value is undefined, which disables enforcement of this limit. Triangles from DynamicObjects are not included in the triangle count and thus not contrained by this value. |\n| `detail.value` | `number` | Level of geometry detail. 1.0 = reasonable default, >1 more detail, <1 less detail. |\n| `resolution` | { `autoAdjust`: { `enabled`: `boolean` ; `max`: `number` ; `min`: `number`  } ; `value`: `number`  } | Resolution settings. |\n| `resolution.autoAdjust` | { `enabled`: `boolean` ; `max`: `number` ; `min`: `number`  } | Auto adjustment based on current device's rendering performance. |\n| `resolution.autoAdjust.enabled` | `boolean` | Is automatic adjustment enabled? |\n| `resolution.autoAdjust.max` | `number` | Upper bound for automatic adjustment. |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 1209, "to": 1214 } } }
    }
  ],
  [
    "338",
    {
      "pageContent": "| `resolution.autoAdjust.enabled` | `boolean` | Is automatic adjustment enabled? |\n| `resolution.autoAdjust.max` | `number` | Upper bound for automatic adjustment. |\n| `resolution.autoAdjust.min` | `number` | Lower bound for automatic adjustment. |\n| `resolution.value` | `number` | Level of pixel resolution, where 1.0 = 1:1 ratio (default) and values lesser than 1 will render in lower resolution than screen and scale up for increased performance. |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 1214, "to": 1217 } } }
    }
  ],
  [
    "339",
    {
      "pageContent": "Inherited from\n\n[RenderSettings](NovoRender.RenderSettings.md).[quality](NovoRender.RenderSettings.md#quality)\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 1219, "to": 1223 } } }
    }
  ],
  [
    "340",
    {
      "pageContent": "terrain\n\n• **terrain**: `Object`\n\nTerrain render settings\n\n**`Remarks`**\n\nIf undefined, terrain geometry will not be rendered.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 1225, "to": 1233 } } }
    }
  ],
  [
    "341",
    {
      "pageContent": "Type declaration\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `asBackground` | `boolean` | Draw terrain as background |\n| `elevationColors` | readonly [`ElevationColorGradientNode`](NovoRender.ElevationColorGradientNode.md)[] | Elevation gradient color curve, defined by a list of nodes. **`Remarks`** Nodes must be sorted in ascending order of elevation! Elevations are defined as in meters above/below sea level (using negative values for sub sea terrain). At least two nodes are required for any sort of gradient. Nodes do not have to be uniformly distributed elevation-wise. To create a discontinuity in the gradient, two adjacent nodes with identical elevation, but different colors may be used. Any elevation outside the min/max range defined by this list will be clamped to the color of the nearest node (min or max), i.e., no extrapolation will occur. |\n\n#### Inherited from\n\n[RenderSettings](NovoRender.RenderSettings.md).[terrain](NovoRender.RenderSettings.md#terrain)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Internal.RenderSettingsExt.md", "loc": { "lines": { "from": 1235, "to": 1244 } } }
    }
  ],
  [
    "342",
    {
      "pageContent": "---\nid: \"NovoRender.LineValues\"\ntitle: \"WebGL API\"\nsidebar_label: \"LineValues\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).LineValues\n\nLineValues is a collection of values for measuring a single line\n\n## Properties\n\n### distance\n\n• **distance**: `Number`\n\nDistance from the start to the end of the line\n\n___\n\n### end\n\n• **end**: `vec3`\n\nThe end of the line\n\n___\n\n### gradient\n\n• **gradient**: `vec3`\n\nGradient of the line\n\n___\n\n### kind\n\n• **kind**: ``\"line\"``\n\n___\n\n### start\n\n• **start**: `vec3`\n\nThe start of the line",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.LineValues.md", "loc": { "lines": { "from": 1, "to": 49 } } }
    }
  ],
  [
    "343",
    {
      "pageContent": "---\nid: \"NovoRender.LinearTransform\"\ntitle: \"WebGL API\"\nsidebar_label: \"LinearTransform\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).LinearTransform\n\nLinear transform options.\n\n**`Remarks`**\n\nThe transform is performed by first applying scale, then adding offset, i.e.: result = value * scale + offset.\r\nIf scale = 0, offset will effectively replace input value.\n\n## Properties\n\n### offset\n\n• `Optional` `Readonly` **offset**: `number`\n\nAddend for scaled input value. Default = 0.\n\n___\n\n### scale\n\n• `Optional` `Readonly` **scale**: `number`\n\nMultiplicand for input value. Default = 1.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.LinearTransform.md", "loc": { "lines": { "from": 1, "to": 32 } } }
    }
  ],
  [
    "344",
    {
      "pageContent": "---\nid: \"NovoRender.MeasureAPI\"\ntitle: \"WebGL API\"\nsidebar_label: \"MeasureAPI\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).MeasureAPI\n\nMeasure api loads from same scene assets. Brep files are required",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.MeasureAPI.md", "loc": { "lines": { "from": 1, "to": 11 } } }
    }
  ],
  [
    "345",
    {
      "pageContent": "Methods\n\n### dispose\n\n▸ **dispose**(): `Promise`<`void`\\>\n\n#### Returns\n\n`Promise`<`void`\\>\n\n___\n\n### loadScene\n\n▸ **loadScene**(`url`): `Promise`<[`MeasureScene`](NovoRender.MeasureScene.md)\\>\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `url` | `string` \\| `URL` |\n\n#### Returns\n\n`Promise`<[`MeasureScene`](NovoRender.MeasureScene.md)\\>\n\n___\n\n### toPathPoints\n\n▸ **toPathPoints**(`points`, `view`, `width`, `height`): [`ReadonlyVec2`[], `ReadonlyVec2`[]]\n\nConverts world space points to on screen pixel path and points\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `points` | `ReadonlyVec3`[] |\n| `view` | [`View`](NovoRender.View.md) |\n| `width` | `number` |\n| `height` | `number` |\n\n#### Returns\n\n[`ReadonlyVec2`[], `ReadonlyVec2`[]]",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.MeasureAPI.md", "loc": { "lines": { "from": 13, "to": 58 } } }
    }
  ],
  [
    "346",
    {
      "pageContent": "---\nid: \"NovoRender.MeasureEntity\"\ntitle: \"WebGL API\"\nsidebar_label: \"MeasureEntity\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).MeasureEntity\n\n## Properties\n\n### instanceIndex\n\n• **instanceIndex**: `number`\n\n___\n\n### kind\n\n• **kind**: ``\"vertex\"`` \\| ``\"curveSegment\"`` \\| ``\"edge\"`` \\| ``\"face\"``\n\n___\n\n### objectId\n\n• **objectId**: `number`\n\n___\n\n### parameter\n\n• **parameter**: `number` \\| readonly [`number`, `number`, `number`] \\| `Float32Array` \\| readonly [`number`, `number`]\n\n___\n\n### pathIndex\n\n• **pathIndex**: `number`",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.MeasureEntity.md", "loc": { "lines": { "from": 1, "to": 39 } } }
    }
  ],
  [
    "347",
    {
      "pageContent": "---\nid: \"NovoRender.MeasureInfo\"\ntitle: \"WebGL API\"\nsidebar_label: \"MeasureInfo\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).MeasureInfo\n\n## Properties\n\n### deviation\n\n• **deviation**: `number`\n\nDeviation of picked pixel\n\n___\n\n### intensity\n\n• **intensity**: `number`\n\nIntensity of picked pixel\n\n___\n\n### normalVS\n\n• **normalVS**: `vec3`\n\nUndefined if the point is on an edge\n\n___\n\n### objectId\n\n• **objectId**: `number`\n\nObjectId of picked object\n\n___\n\n### position\n\n• **position**: `vec3`\n\nWorld space position of picked pixel",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.MeasureInfo.md", "loc": { "lines": { "from": 1, "to": 49 } } }
    }
  ],
  [
    "348",
    {
      "pageContent": "---\nid: \"NovoRender.MeasureObject\"\ntitle: \"WebGL API\"\nsidebar_label: \"MeasureObject\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).MeasureObject\n\n## Properties\n\n### id\n\n• `Readonly` **id**: `number`\n\n___\n\n### selectedEntity\n\n• `Readonly` **selectedEntity**: [`MeasureEntity`](NovoRender.MeasureEntity.md)\n\n## Methods\n\n### renderMeasureEntity\n\n▸ **renderMeasureEntity**(`view`, `width`, `height`): `Promise`<[`DrawObject`](NovoRender.DrawObject.md)[]\\>\n\nReturns a draw object with 2d screen coordinates\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `view` | [`View`](NovoRender.View.md) |\n| `width` | `number` |\n| `height` | `number` |\n\n#### Returns\n\n`Promise`<[`DrawObject`](NovoRender.DrawObject.md)[]\\>",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.MeasureObject.md", "loc": { "lines": { "from": 1, "to": 41 } } }
    }
  ],
  [
    "349",
    {
      "pageContent": "---\nid: \"NovoRender.MeasureScene\"\ntitle: \"WebGL API\"\nsidebar_label: \"MeasureScene\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).MeasureScene\n\nScene with objects being measured. Brep files are required",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.MeasureScene.md", "loc": { "lines": { "from": 1, "to": 11 } } }
    }
  ],
  [
    "350",
    {
      "pageContent": "Methods\n\n### downloadMeasureObject\n\n▸ **downloadMeasureObject**(`id`, `selectionPosition`): `Promise`<[`MeasureObject`](NovoRender.MeasureObject.md)\\>\n\nDownloads the measure data for an object\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `id` | `number` |\n| `selectionPosition` | `vec3` |\n\n#### Returns\n\n`Promise`<[`MeasureObject`](NovoRender.MeasureObject.md)\\>\n\n___\n\n### getCameraValues\n\n▸ **getCameraValues**(`a`, `cameraDir`): `Promise`<[`CameraValues`](NovoRender.CameraValues.md)\\>\n\nGet suggested camea values for selected object\r\nFor cylinder values snap to the closest axis on the cylinder\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `a` | [`MeasureEntity`](NovoRender.MeasureEntity.md) |\n| `cameraDir` | `vec3` |\n\n#### Returns\n\n`Promise`<[`CameraValues`](NovoRender.CameraValues.md)\\>\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.MeasureScene.md", "loc": { "lines": { "from": 13, "to": 52 } } }
    }
  ],
  [
    "351",
    {
      "pageContent": "measure\n\n▸ **measure**(`a`, `b?`, `settingA?`, `settingB?`): `Promise`<[`MeasurementValues`](../namespaces/NovoRender.md#measurementvalues)\\>\n\nMeasure objet, if b is undefined then single measure values are returned else the measurement between 2 objects\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `a` | [`MeasureEntity`](NovoRender.MeasureEntity.md) |\n| `b?` | [`MeasureEntity`](NovoRender.MeasureEntity.md) |\n| `settingA?` | [`MeasureSettings`](NovoRender.MeasureSettings.md) |\n| `settingB?` | [`MeasureSettings`](NovoRender.MeasureSettings.md) |\n\n#### Returns\n\n`Promise`<[`MeasurementValues`](../namespaces/NovoRender.md#measurementvalues)\\>\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.MeasureScene.md", "loc": { "lines": { "from": 54, "to": 73 } } }
    }
  ],
  [
    "352",
    {
      "pageContent": "measureToPoint\n\n▸ **measureToPoint**(`a`, `b`, `setting?`): `Promise`<[`DuoMeasurementValues`](NovoRender.DuoMeasurementValues.md)\\>\n\nMeasure distance between a measurement object an a 3d point\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `a` | [`MeasureEntity`](NovoRender.MeasureEntity.md) |\n| `b` | `vec3` |\n| `setting?` | [`MeasureSettings`](NovoRender.MeasureSettings.md) |\n\n#### Returns\n\n`Promise`<[`DuoMeasurementValues`](NovoRender.DuoMeasurementValues.md)\\>\n\n___\n\n### pointToPoint\n\n▸ **pointToPoint**(`a`, `b`): [`DuoMeasurementValues`](NovoRender.DuoMeasurementValues.md)\n\nMeasure distance between 2 points\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `a` | `vec3` |\n| `b` | `vec3` |\n\n#### Returns\n\n[`DuoMeasurementValues`](NovoRender.DuoMeasurementValues.md)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.MeasureScene.md", "loc": { "lines": { "from": 75, "to": 110 } } }
    }
  ],
  [
    "353",
    {
      "pageContent": "---\nid: \"NovoRender.MeasureSettings\"\ntitle: \"WebGL API\"\nsidebar_label: \"MeasureSettings\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).MeasureSettings\n\nAdditional options for measurement\n\n## Properties\n\n### cylinderMeasure\n\n• **cylinderMeasure**: [`CylinerMeasureType`](../namespaces/NovoRender.md#cylinermeasuretype)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.MeasureSettings.md", "loc": { "lines": { "from": 1, "to": 17 } } }
    }
  ],
  [
    "354",
    {
      "pageContent": "---\nid: \"NovoRender.NeutralHighlightParams\"\ntitle: \"WebGL API\"\nsidebar_label: \"NeutralHighlightParams\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).NeutralHighlightParams\n\nNeutral highlight parameters\n\n## Properties\n\n### kind\n\n• **kind**: ``\"neutral\"``\n\nThe kind of highlight.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.NeutralHighlightParams.md", "loc": { "lines": { "from": 1, "to": 19 } } }
    }
  ],
  [
    "355",
    {
      "pageContent": "---\nid: \"NovoRender.ObjectDB\"\ntitle: \"WebGL API\"\nsidebar_label: \"ObjectDB\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).ObjectDB\n\nDatabase interface to retrive object's data in scene. Used internally from loaded [Scene](NovoRender.Scene.md) interface.\n\n**`Remarks`**\n\nThis interface is usually created automatically based on scene creation.\r\nYou may make your own implementation for custom data model, e.g. for testing or in-house databases.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.ObjectDB.md", "loc": { "lines": { "from": 1, "to": 16 } } }
    }
  ],
  [
    "356",
    {
      "pageContent": "Methods\n\n### getObjectMetdata\n\n▸ **getObjectMetdata**(`id`): `Promise`<[`ObjectData`](NovoRender.ObjectData.md)\\>\n\nGet [ObjectData](NovoRender.ObjectData.md) by scene object id\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `id` | `number` |\n\n#### Returns\n\n`Promise`<[`ObjectData`](NovoRender.ObjectData.md)\\>\n\n▸ **getObjectMetdata**(`id`): `Promise`<[`ObjectData`](NovoRender.ObjectData.md)\\>\n\nGet [ObjectData](NovoRender.ObjectData.md) by scene object id\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `id` | `number` |\n\n#### Returns\n\n`Promise`<[`ObjectData`](NovoRender.ObjectData.md)\\>\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.ObjectDB.md", "loc": { "lines": { "from": 18, "to": 50 } } }
    }
  ],
  [
    "357",
    {
      "pageContent": "search\n\n▸ **search**(`filter`, `signal`): `AsyncIterableIterator`<[`HierarcicalObjectReference`](NovoRender.HierarcicalObjectReference.md)\\>\n\nSearch for objects.\n\n**`Remarks`**\n\nSee [search](NovoRender.Scene.md#search) for more details.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `filter` | [`SearchOptions`](NovoRender.SearchOptions.md) | [SearchOptions](NovoRender.SearchOptions.md) filtering options. |\n| `signal` | `AbortSignal` | Abort request signal. |\n\n#### Returns\n\n`AsyncIterableIterator`<[`HierarcicalObjectReference`](NovoRender.HierarcicalObjectReference.md)\\>\n\nAsync iterator of [HierarcicalObjectReference](NovoRender.HierarcicalObjectReference.md)\n\n▸ **search**(`filter`, `signal`): `AsyncIterableIterator`<[`HierarcicalObjectReference`](NovoRender.HierarcicalObjectReference.md)\\>\n\nSearch for objects.\n\n**`Remarks`**\n\nSee [search](NovoRender.Scene.md#search) for more details.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.ObjectDB.md", "loc": { "lines": { "from": 52, "to": 81 } } }
    }
  ],
  [
    "358",
    {
      "pageContent": "Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `filter` | [`SearchOptions`](NovoRender.SearchOptions.md) | [SearchOptions](NovoRender.SearchOptions.md) filtering options. |\n| `signal` | `AbortSignal` | Abort request signal. |\n\n#### Returns\n\n`AsyncIterableIterator`<[`HierarcicalObjectReference`](NovoRender.HierarcicalObjectReference.md)\\>\n\nAsync iterator of [HierarcicalObjectReference](NovoRender.HierarcicalObjectReference.md)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.ObjectDB.md", "loc": { "lines": { "from": 81, "to": 92 } } }
    }
  ],
  [
    "359",
    {
      "pageContent": "---\nid: \"NovoRender.ObjectData\"\ntitle: \"WebGL API\"\nsidebar_label: \"ObjectData\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).ObjectData\n\nObject metadata.\n\n## Hierarchy\n\n- [`HierarcicalObjectReference`](NovoRender.HierarcicalObjectReference.md)\n\n  ↳ **`ObjectData`**",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.ObjectData.md", "loc": { "lines": { "from": 1, "to": 17 } } }
    }
  ],
  [
    "360",
    {
      "pageContent": "Properties\n\n### bounds\n\n• `Optional` `Readonly` **bounds**: `Object`\n\nBounding volume\n\n#### Type declaration\n\n| Name | Type |\n| :------ | :------ |\n| `sphere` | [`BoundingSphere`](NovoRender.BoundingSphere.md) |\n\n#### Inherited from\n\n[HierarcicalObjectReference](NovoRender.HierarcicalObjectReference.md).[bounds](NovoRender.HierarcicalObjectReference.md#bounds)\n\n___\n\n### descendants\n\n• `Optional` `Readonly` **descendants**: `number`[]\n\n#### Inherited from\n\n[HierarcicalObjectReference](NovoRender.HierarcicalObjectReference.md).[descendants](NovoRender.HierarcicalObjectReference.md#descendants)\n\n___\n\n### description\n\n• `Optional` `Readonly` **description**: `string`\n\nDescription of object (typically from IFC database).\n\n___\n\n### id\n\n• `Readonly` **id**: `number`\n\nThe id of the object\n\n#### Inherited from\n\n[HierarcicalObjectReference](NovoRender.HierarcicalObjectReference.md).[id](NovoRender.HierarcicalObjectReference.md#id)\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.ObjectData.md", "loc": { "lines": { "from": 19, "to": 67 } } }
    }
  ],
  [
    "361",
    {
      "pageContent": "name\n\n• `Readonly` **name**: `string`\n\nName of object (typically a GUID from IFC database).\n\n___\n\n### path\n\n• `Readonly` **path**: `string`\n\nThe path of the object expressed as a hierarchical filesystem-like path string.\n\n#### Inherited from\n\n[HierarcicalObjectReference](NovoRender.HierarcicalObjectReference.md).[path](NovoRender.HierarcicalObjectReference.md#path)\n\n___\n\n### properties\n\n• **properties**: [key: string, value: string][]\n\nString dictionary of any additional metadata properties associated with object\n\n___\n\n### type\n\n• `Readonly` **type**: [`NodeType`](../enums/NovoRender.NodeType.md)\n\nType of node.\n\n#### Inherited from\n\n[HierarcicalObjectReference](NovoRender.HierarcicalObjectReference.md).[type](NovoRender.HierarcicalObjectReference.md#type)\n\n___\n\n### url\n\n• `Optional` `Readonly` **url**: `string`\n\nUrl associated with object",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.ObjectData.md", "loc": { "lines": { "from": 69, "to": 113 } } }
    }
  ],
  [
    "362",
    {
      "pageContent": "Methods\n\n### loadMetaData\n\n▸ **loadMetaData**(): `Promise`<[`ObjectData`](NovoRender.ObjectData.md)\\>\n\nLoad the associated object meta data.\n\n#### Returns\n\n`Promise`<[`ObjectData`](NovoRender.ObjectData.md)\\>\n\n#### Inherited from\n\n[HierarcicalObjectReference](NovoRender.HierarcicalObjectReference.md).[loadMetaData](NovoRender.HierarcicalObjectReference.md#loadmetadata)\n\n▸ **loadMetaData**(): `Promise`<[`ObjectData`](NovoRender.ObjectData.md)\\>\n\nLoad the associated object meta data.\n\n#### Returns\n\n`Promise`<[`ObjectData`](NovoRender.ObjectData.md)\\>\n\n#### Inherited from\n\n[HierarcicalObjectReference](NovoRender.HierarcicalObjectReference.md).[loadMetaData](NovoRender.HierarcicalObjectReference.md#loadmetadata)\n\n___\n\n### save\n\n▸ **save**(): `Promise`<`boolean`\\>\n\nSave object meta data.\n\n#### Returns\n\n`Promise`<`boolean`\\>\n\n▸ **save**(): `Promise`<`boolean`\\>\n\nSave object meta data.\n\n#### Returns\n\n`Promise`<`boolean`\\>",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.ObjectData.md", "loc": { "lines": { "from": 115, "to": 161 } } }
    }
  ],
  [
    "363",
    {
      "pageContent": "---\nid: \"NovoRender.ObjectHighlighter\"\ntitle: \"WebGL API\"\nsidebar_label: \"ObjectHighlighter\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).ObjectHighlighter\n\nVisual highlighting for groups of objects.\n\n**`Remarks`**\n\nThis interface is used to highlight or hide sets of objects, based e.g. on interactive selections or queries.\r\nEach 3D object in the scene has a unique id/index, which can be assigned to one of the available highlight groups.\r\nBy default, all objects are assigned to group #0.\r\nTo change a highlight for a specific object or set of objects, simply change the objectGroups index for that/this object id(s):\r\n`objectHighlights[objectId] = newHighlightGroupIndex`.\n\nHighlight index 255/0xff is reserved and used to hide objects.\r\nAlthough you can also hide objects by making them 100% transparent (opacity = 0), assigning them to index 255 is more performant.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.ObjectHighlighter.md", "loc": { "lines": { "from": 1, "to": 22 } } }
    }
  ],
  [
    "364",
    {
      "pageContent": "Highlight index 255/0xff is reserved and used to hide objects.\r\nAlthough you can also hide objects by making them 100% transparent (opacity = 0), assigning them to index 255 is more performant.\n\nChanges to object highlights does not become visible until you call the [commit](NovoRender.ObjectHighlighter.md#commit) method.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.ObjectHighlighter.md", "loc": { "lines": { "from": 22, "to": 25 } } }
    }
  ],
  [
    "365",
    {
      "pageContent": "Properties\n\n### objectHighlightIndices\n\n• `Readonly` **objectHighlightIndices**: `Uint8Array`\n\nIndexed collection of groups.\n\n## Methods\n\n### commit\n\n▸ **commit**(): `Promise`<`void`\\>\n\nCommit changes for rendering.\n\n#### Returns\n\n`Promise`<`void`\\>\n\n▸ **commit**(): `Promise`<`void`\\>\n\nCommit changes for rendering.\n\n#### Returns\n\n`Promise`<`void`\\>",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.ObjectHighlighter.md", "loc": { "lines": { "from": 27, "to": 53 } } }
    }
  ],
  [
    "366",
    {
      "pageContent": "---\nid: \"NovoRender.ObjectReference\"\ntitle: \"WebGL API\"\nsidebar_label: \"ObjectReference\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).ObjectReference\n\nLightweight reference to a single object within a scene instance.\n\n**`Remarks`**\n\nObject metadata are not loaded with scene automatically and may require an additional server request. This interface contains only the identity required to perform such a request.\n\n## Hierarchy\n\n- **`ObjectReference`**\n\n  ↳ [`HierarcicalObjectReference`](NovoRender.HierarcicalObjectReference.md)\n\n## Properties\n\n### id\n\n• `Readonly` **id**: `number`\n\nThe id of the object",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.ObjectReference.md", "loc": { "lines": { "from": 1, "to": 29 } } }
    }
  ],
  [
    "367",
    {
      "pageContent": "Hierarchy\n\n- **`ObjectReference`**\n\n  ↳ [`HierarcicalObjectReference`](NovoRender.HierarcicalObjectReference.md)\n\n## Properties\n\n### id\n\n• `Readonly` **id**: `number`\n\nThe id of the object\n\n## Methods\n\n### loadMetaData\n\n▸ **loadMetaData**(): `Promise`<[`ObjectData`](NovoRender.ObjectData.md)\\>\n\nLoad the associated object meta data.\n\n#### Returns\n\n`Promise`<[`ObjectData`](NovoRender.ObjectData.md)\\>\n\n▸ **loadMetaData**(): `Promise`<[`ObjectData`](NovoRender.ObjectData.md)\\>\n\nLoad the associated object meta data.\n\n#### Returns\n\n`Promise`<[`ObjectData`](NovoRender.ObjectData.md)\\>",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.ObjectReference.md", "loc": { "lines": { "from": 29, "to": 61 } } }
    }
  ],
  [
    "368",
    {
      "pageContent": "---\nid: \"NovoRender.OrbitControllerParams\"\ntitle: \"WebGL API\"\nsidebar_label: \"OrbitControllerParams\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).OrbitControllerParams\n\nOrbit type camera motion controller",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.OrbitControllerParams.md", "loc": { "lines": { "from": 1, "to": 11 } } }
    }
  ],
  [
    "369",
    {
      "pageContent": "Properties\n\n### distance\n\n• `Optional` **distance**: `number`\n\nThe camera distance relative to pivot point in meters.\n\n___\n\n### kind\n\n• **kind**: ``\"orbit\"``\n\nThe kind of camera controller.\n\n___\n\n### linearVelocity\n\n• `Optional` **linearVelocity**: `number`\n\nThe velocity with which the camera moves through space in meters/second\n\n___\n\n### maxDistance\n\n• `Optional` **maxDistance**: `number`\n\nThe camera distance relative to pivot point in meters.\n\n___\n\n### pitch\n\n• `Optional` **pitch**: `number`\n\nThe current pitch of camera in degrees (+/-90)\n\n___\n\n### pivotPoint\n\n• `Optional` **pivotPoint**: `vec3`\n\nThe world space coordinate to orbit around. (0,0,0) is default.\n\n___\n\n### rotationalVelocity\n\n• `Optional` **rotationalVelocity**: `number`\n\nThe velocity with which the camera rotates in degrees/second.\n\n___\n\n### yaw\n\n• `Optional` **yaw**: `number`\n\nThe current yaw of camera in degrees (+/-180)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.OrbitControllerParams.md", "loc": { "lines": { "from": 13, "to": 75 } } }
    }
  ],
  [
    "370",
    {
      "pageContent": "---\nid: \"NovoRender.OrthoControllerParams\"\ntitle: \"WebGL API\"\nsidebar_label: \"OrthoControllerParams\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).OrthoControllerParams\n\nFlight type camera motion controller",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.OrthoControllerParams.md", "loc": { "lines": { "from": 1, "to": 11 } } }
    }
  ],
  [
    "371",
    {
      "pageContent": "Properties\n\n### far\n\n• `Optional` **far**: `number`\n\nFar camera clipping distance\n\n___\n\n### fieldOfView\n\n• `Optional` **fieldOfView**: `number`\n\nCamera (vertical) field of view in meters.\n\n___\n\n### kind\n\n• **kind**: ``\"ortho\"``\n\nThe kind of camera controller.\n\n___\n\n### linearVelocity\n\n• `Optional` **linearVelocity**: `number`\n\nThe velocity with which the camera moves through space in meters/second\n\n___\n\n### near\n\n• `Optional` **near**: `number`\n\nNear camera clipping distance\n\n___\n\n### position\n\n• `Optional` **position**: `vec3`\n\nThe position in the reference coordinate system. (0,0,0) is default.\n\n___\n\n### referenceCoordSys\n\n• `Optional` **referenceCoordSys**: `ReadonlyMat4`\n\nThe world space reference coordinate system to move along. Identity matrix is default.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.OrthoControllerParams.md", "loc": { "lines": { "from": 13, "to": 67 } } }
    }
  ],
  [
    "372",
    {
      "pageContent": "---\nid: \"NovoRender.OutlineParams\"\ntitle: \"WebGL API\"\nsidebar_label: \"OutlineParams\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).OutlineParams\n\nOutline rendering post effect.\n\n**`Remarks`**\n\nThis post effects helps visualize faces that are perpendicular to the view plane as lines.\r\nNormally such faces would not be visible, which is especially a problem when using orthographic camera projection.\r\nThis effect effectively re-renders the entire scene, so you may only want to run it after the view stops changing.\n\n## Properties\n\n### color\n\n• `Optional` `Readonly` **color**: `ReadonlyVec4`\n\nOutline color, or original color if undefined.\n\n___\n\n### kind\n\n• `Readonly` **kind**: ``\"outline\"``\n\nPost effect kind/discriminator.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.OutlineParams.md", "loc": { "lines": { "from": 1, "to": 33 } } }
    }
  ],
  [
    "373",
    {
      "pageContent": "---\nid: \"NovoRender.PerformanceStatistics\"\ntitle: \"WebGL API\"\nsidebar_label: \"PerformanceStatistics\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).PerformanceStatistics\n\nRendering performance statistics",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.PerformanceStatistics.md", "loc": { "lines": { "from": 1, "to": 11 } } }
    }
  ],
  [
    "374",
    {
      "pageContent": "Properties\n\n### cameraGeneration\n\n• **cameraGeneration**: `number`\n\nCamera generation\n\n___\n\n### cpuTime\n\n• **cpuTime**: `Object`\n\n# milliseconds spent on various aspects of rendering last frame.\n\n#### Type declaration\n\n| Name | Type |\n| :------ | :------ |\n| `animation` | `number` |\n| `geometry` | { `update`: `number`  } |\n| `geometry.update` | `number` |\n| `render` | { `draw`: `number` ; `total`: `number` ; `update`: `number`  } |\n| `render.draw` | `number` |\n| `render.total` | `number` |\n| `render.update` | `number` |\n\n___\n\n### drawCalls\n\n• **drawCalls**: `number`\n\n# draw calls emitted in last frame.\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.PerformanceStatistics.md", "loc": { "lines": { "from": 13, "to": 49 } } }
    }
  ],
  [
    "375",
    {
      "pageContent": "drawCalls\n\n• **drawCalls**: `number`\n\n# draw calls emitted in last frame.\n\n___\n\n### frameInterval\n\n• `Readonly` **frameInterval**: `number`\n\n# milliseconds since last frame was rendered.\n\n**`Remarks`**\n\nThis value is an approximation of framerate when moving the camera. \r\nIt is used to automatically adjust render resolution in cases where the framerate drops below a certain threshold.\r\nIf the last render was triggered by anything other than camera movement, e.g. an update in the scene or a post effect loop, this value will be undefined.\n\n___\n\n### gpuBytes\n\n• `Readonly` **gpuBytes**: `number`\n\n# gpu bytes allocated by static geometry.\n\n___\n\n### gpuTime\n\n• `Readonly` **gpuTime**: `number`\n\n# milliseconds spent on GPU to render last frame.\n\n**`Remarks`**\n\nThis requires EXT_disjoint_timer_query_webgl2, which currently is only supported on chrome for PC and Mac.\n\n___\n\n### points\n\n• **points**: `number`\n\n# Points rendered in last frame.\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.PerformanceStatistics.md", "loc": { "lines": { "from": 49, "to": 97 } } }
    }
  ],
  [
    "376",
    {
      "pageContent": "points\n\n• **points**: `number`\n\n# Points rendered in last frame.\n\n___\n\n### renderResolved\n\n• **renderResolved**: `boolean`\n\nAre all pending nodes update done in rendering pipeline?\n\n___\n\n### sceneResolved\n\n• **sceneResolved**: `boolean`\n\nAre all pending nodes loaded and sent to rendering pipeline?\n\n___\n\n### triangles\n\n• **triangles**: `number`\n\n# Triangles rendered in last frame.\n\n___\n\n### weakDevice\n\n• **weakDevice**: `boolean`\n\nIs device weak in rendering performance?",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.PerformanceStatistics.md", "loc": { "lines": { "from": 97, "to": 133 } } }
    }
  ],
  [
    "377",
    {
      "pageContent": "---\nid: \"NovoRender.PickInfo\"\ntitle: \"WebGL API\"\nsidebar_label: \"PickInfo\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).PickInfo\n\nOutput from object picking\n\n## Properties\n\n### normal\n\n• **normal**: `vec3`\n\nWorld space normal of picked pixel\n\n___\n\n### objectId\n\n• **objectId**: `number`\n\nObjectId of picked object\n\n___\n\n### position\n\n• **position**: `vec3`\n\nWorld space position of picked pixel",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.PickInfo.md", "loc": { "lines": { "from": 1, "to": 35 } } }
    }
  ],
  [
    "378",
    {
      "pageContent": "---\nid: \"NovoRender.PlaneValues\"\ntitle: \"WebGL API\"\nsidebar_label: \"PlaneValues\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).PlaneValues\n\nPlaneValues is a collection of values for measuring a single Plane",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.PlaneValues.md", "loc": { "lines": { "from": 1, "to": 11 } } }
    }
  ],
  [
    "379",
    {
      "pageContent": "Properties\n\n### area\n\n• `Optional` **area**: `number`\n\nCalculated area of the plane\n\n___\n\n### height\n\n• `Optional` **height**: `number`\n\nHeight of the plane\n\n___\n\n### heightAboveXyPlane\n\n• `Optional` **heightAboveXyPlane**: `number`\n\nY value of the plane origin\n\n___\n\n### innerEdges\n\n• **innerEdges**: [`EdgeValues`](../namespaces/NovoRender.md#edgevalues)[][]\n\nInner edges of the plane\n\n___\n\n### innerRadius\n\n• `Optional` **innerRadius**: `number`\n\nLargest inner radius of the plane in case of only arcs\n\n___\n\n### kind\n\n• **kind**: ``\"plane\"``\n\n___\n\n### normal\n\n• **normal**: `vec3`\n\nNormal of the plane\n\n___\n\n### outerEdges\n\n• **outerEdges**: [`EdgeValues`](../namespaces/NovoRender.md#edgevalues)[]\n\nOuter edges of the plane\n\n___\n\n### outerRadius\n\n• `Optional` **outerRadius**: `number`\n\nLargest outer radius of the plane in case of only arcs\n\n___\n\n### vertices\n\n• **vertices**: `vec3`[]\n\nCorner vertices of the plane\n\n___\n\n### width\n\n• `Optional` **width**: `number`\n\nWidth of the plane",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.PlaneValues.md", "loc": { "lines": { "from": 13, "to": 97 } } }
    }
  ],
  [
    "380",
    {
      "pageContent": "---\nid: \"NovoRender.RGBAOptions\"\ntitle: \"WebGL API\"\nsidebar_label: \"RGBAOptions\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).RGBAOptions\n\nOptions for RGBA + alpha color transformation.\n\n**`Remarks`**\n\nAll input values are between 0 and 1.\n\n## Properties\n\n### blue\n\n• `Readonly` **blue**: `number` \\| [`LinearTransform`](NovoRender.LinearTransform.md)\n\nBlue color adjustment.\n\n___\n\n### green\n\n• `Readonly` **green**: `number` \\| [`LinearTransform`](NovoRender.LinearTransform.md)\n\nGreen color adjustment.\n\n___\n\n### opacity\n\n• `Readonly` **opacity**: `number` \\| [`LinearTransform`](NovoRender.LinearTransform.md)\n\nOpacity/alpha adjustment.\n\n___\n\n### red\n\n• `Readonly` **red**: `number` \\| [`LinearTransform`](NovoRender.LinearTransform.md)\n\nRed color adjustment.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RGBAOptions.md", "loc": { "lines": { "from": 1, "to": 47 } } }
    }
  ],
  [
    "381",
    {
      "pageContent": "---\nid: \"NovoRender.RenderChanges\"\ntitle: \"WebGL API\"\nsidebar_label: \"RenderChanges\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).RenderChanges\n\nFlags reflecting what changes has occured since last render.\n\n## Properties\n\n### camera\n\n• `Readonly` **camera**: `boolean`\n\nHas camera changed?\n\n___\n\n### misc\n\n• `Readonly` **misc**: `boolean`\n\nMiscellaneous changes.\n\n___\n\n### scene\n\n• `Readonly` **scene**: `boolean`\n\nHas scene changed?\n\n___\n\n### settings\n\n• `Readonly` **settings**: `boolean`\n\nHas renderSettings changed?",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderChanges.md", "loc": { "lines": { "from": 1, "to": 43 } } }
    }
  ],
  [
    "382",
    {
      "pageContent": "---\nid: \"NovoRender.RenderOutput\"\ntitle: \"WebGL API\"\nsidebar_label: \"RenderOutput\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).RenderOutput\n\n## Properties\n\n### hasViewChanged\n\n• `Readonly` **hasViewChanged**: `boolean`\n\n___\n\n### renderSettings\n\n• `Readonly` **renderSettings**: [`RenderSettings`](NovoRender.RenderSettings.md)\n\nThe settings for this render.\n\n**`Remarks`**\n\nThese are a copy of the view rendersettings at the time of the render.\r\nSome values may have been modified to reflect computations, such as effective resolution.\n\n___\n\n### statistics\n\n• `Readonly` **statistics**: [`PerformanceStatistics`](NovoRender.PerformanceStatistics.md)\n\nThe statisics for this render.\n\n___\n\n### viewClipMatrix\n\n• `Readonly` **viewClipMatrix**: `ReadonlyMat4`\n\n___\n\n### viewWorldMatrix\n\n• `Readonly` **viewWorldMatrix**: `ReadonlyMat4`\n\n___\n\n### worldViewMatrix\n\n• `Readonly` **worldViewMatrix**: `ReadonlyMat4`",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderOutput.md", "loc": { "lines": { "from": 1, "to": 54 } } }
    }
  ],
  [
    "383",
    {
      "pageContent": "Methods\n\n### applyPostEffect\n\n▸ **applyPostEffect**(`params`): `Promise`<`boolean` \\| `void`\\>\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `params` | [`PostEffectParams`](../namespaces/NovoRender.md#posteffectparams) |\n\n#### Returns\n\n`Promise`<`boolean` \\| `void`\\>\n\n▸ **applyPostEffect**(`params`): `Promise`<`boolean` \\| `void`\\>\n\nApply post effect to output image.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `params` | [`PostEffectParams`](../namespaces/NovoRender.md#posteffectparams) | Post effect type and related parameters. |\n\n#### Returns\n\n`Promise`<`boolean` \\| `void`\\>\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderOutput.md", "loc": { "lines": { "from": 56, "to": 86 } } }
    }
  ],
  [
    "384",
    {
      "pageContent": "getImage\n\n▸ **getImage**(): `Promise`<`ImageBitmap`\\>\n\n#### Returns\n\n`Promise`<`ImageBitmap`\\>\n\n▸ **getImage**(): `Promise`<`ImageBitmap`\\>\n\nGet rendered image.\n\n**`Remarks`**\n\nPlease note that this function only works/makes sense if you did not specify your own canvas in [createView](NovoRender.API.md#createview)!\r\nIt is intended for retrieving the rendered image from the OffscreenCanvas created on browsers that supports it.\r\nIn this case,the Image is tranferred to the calling worker and no longer available for post effects, etc.\n\n#### Returns\n\n`Promise`<`ImageBitmap`\\>\n\n___\n\n### hasChanged\n\n▸ **hasChanged**(): `Promise`<[`RenderChanges`](NovoRender.RenderChanges.md)\\>\n\nCheck if there are any changes since this render.\n\n#### Returns\n\n`Promise`<[`RenderChanges`](NovoRender.RenderChanges.md)\\>\n\n___\n\n### isIdleFrame\n\n▸ **isIdleFrame**(): `boolean`\n\nReturns true if this is an idle frame, delayed after camera movement\n\n#### Returns\n\n`boolean`\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderOutput.md", "loc": { "lines": { "from": 88, "to": 134 } } }
    }
  ],
  [
    "385",
    {
      "pageContent": "measure\n\n▸ **measure**(`x`, `y`): `Promise`<[`MeasureInfo`](NovoRender.MeasureInfo.md)\\>\n\nGet [MeasureInfo](NovoRender.MeasureInfo.md) of nearest object (if any) at the specified pixel coordinate.\r\nupdatePickBuffers() must be called on view to get updated pick information\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `x` | `number` | view x coordinate (0=left) |\n| `y` | `number` | view y coordinate (0=top) |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderOutput.md", "loc": { "lines": { "from": 136, "to": 148 } } }
    }
  ],
  [
    "386",
    {
      "pageContent": "Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `x` | `number` | view x coordinate (0=left) |\n| `y` | `number` | view y coordinate (0=top) |\n\n#### Returns\n\n`Promise`<[`MeasureInfo`](NovoRender.MeasureInfo.md)\\>\n\n`undefined` if no object intersection was found.\n\n▸ **measure**(`x`, `y`): `Promise`<[`MeasureInfo`](NovoRender.MeasureInfo.md)\\>\n\nGet [MeasureInfo](NovoRender.MeasureInfo.md) of nearest object (if any) at the specified pixel coordinate.\n\n**`Remarks`**\n\nX and Y coordinates are relative to the [display](NovoRender.RenderSettings.md#display) size.\r\nIf you set this using clientWidth and clientHeight, you can use the x and y coordinates from html events directly, as everything is in css pixels.\r\nIf you multiplied size with devicePixelRatio, you must also multiply this with mouse event coordinates to get physical pixels, not css pixels.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderOutput.md", "loc": { "lines": { "from": 148, "to": 169 } } }
    }
  ],
  [
    "387",
    {
      "pageContent": "Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `x` | `number` | view x coordinate (0=left) in css pixels. |\n| `y` | `number` | view y coordinate (0=top) in css pixels. |\n\n#### Returns\n\n`Promise`<[`MeasureInfo`](NovoRender.MeasureInfo.md)\\>\n\n`undefined` if no object intersection was found.\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderOutput.md", "loc": { "lines": { "from": 171, "to": 184 } } }
    }
  ],
  [
    "388",
    {
      "pageContent": "pick\n\n▸ **pick**(`x`, `y`): `Promise`<[`PickInfo`](NovoRender.PickInfo.md)\\>\n\nPick nearest object (if any) at the specified pixel coordinate.\r\nupdatePickBuffers() must be called on view to get updated pick information\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `x` | `number` | view x coordinate (0=left) |\n| `y` | `number` | view y coordinate (0=top) |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderOutput.md", "loc": { "lines": { "from": 186, "to": 198 } } }
    }
  ],
  [
    "389",
    {
      "pageContent": "Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `x` | `number` | view x coordinate (0=left) |\n| `y` | `number` | view y coordinate (0=top) |\n\n#### Returns\n\n`Promise`<[`PickInfo`](NovoRender.PickInfo.md)\\>\n\n`undefined` if no object intersection was found.\n\n▸ **pick**(`x`, `y`, `pickCameraPlane?`): `Promise`<[`PickInfo`](NovoRender.PickInfo.md)\\>\n\nPick nearest object (if any) at the specified pixel coordinate.\n\n**`Remarks`**\n\nX and Y coordinates are relative to the [display](NovoRender.RenderSettings.md#display) size.\r\nIf you set this using clientWidth and clientHeight, you can use the x and y coordinates from html events directly, as everything is in css pixels.\r\nIf you multiplied size with devicePixelRatio, you must also multiply this with mouse event coordinates to get physical pixels, not css pixels.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderOutput.md", "loc": { "lines": { "from": 198, "to": 219 } } }
    }
  ],
  [
    "390",
    {
      "pageContent": "Parameters\n\n| Name | Type | Default value | Description |\n| :------ | :------ | :------ | :------ |\n| `x` | `number` | `undefined` | view x coordinate (0=left) in css pixels. |\n| `y` | `number` | `undefined` | view y coordinate (0=top) in css pixels. |\n| `pickCameraPlane` | `boolean` | `false` | - |\n\n#### Returns\n\n`Promise`<[`PickInfo`](NovoRender.PickInfo.md)\\>\n\n`undefined` if no object intersection was found.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderOutput.md", "loc": { "lines": { "from": 221, "to": 233 } } }
    }
  ],
  [
    "391",
    {
      "pageContent": "---\nid: \"NovoRender.RenderSettings\"\ntitle: \"WebGL API\"\nsidebar_label: \"RenderSettings\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).RenderSettings\n\nRender settings\n\n**`Remarks`**\n\nThese settings controls various visual aspects of the 3D view.\n\n## Hierarchy\n\n- **`RenderSettings`**\n\n  ↳ [`RenderSettingsExt`](NovoRender.Internal.RenderSettingsExt.md)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 1, "to": 21 } } }
    }
  ],
  [
    "392",
    {
      "pageContent": "Properties\n\n### background\n\n• `Readonly` **background**: `Object`\n\nSettings for rendering of background.\n\n#### Type declaration\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `color` | `ReadonlyVec4` | Background color. **`Remarks`** Setting the alpha component < 1 will generate a transparent background. If undefined, background will use image from environment map, or default color if no environment is set. |\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 23, "to": 37 } } }
    }
  ],
  [
    "393",
    {
      "pageContent": "clippingPlanes\n\n• `Readonly` **clippingPlanes**: `Object`\n\nClipping planes settings.\n\n**`Deprecated`**\n\nUse clippingVolume instead.\n\n**`Remarks`**\n\nClipping planes allows for an axis alligned box to define what volume will be rendered or not.\r\nThis is useful for rendering various cross sections and revealing internal geometry.\n\n#### Type declaration\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `bounds` | [`AABB`](NovoRender.AABB.md) | The axis aligned bounding volume. |\n| `enabled` | `boolean` | Whether to clip geometry by the actual bounding box or not. |\n| `highlight` | `number` | Highlighted side. |\n| `inside` | `boolean` | Whether to clip geometry inside or outside the actual bounding box. |\n| `showBox` | `boolean` | Whether to show the actual bounding box or not. |\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 39, "to": 64 } } }
    }
  ],
  [
    "394",
    {
      "pageContent": "clippingVolume\n\n• `Readonly` **clippingVolume**: `Object`\n\nClipping volume settings.\n\n**`Remarks`**\n\nClipping volume allows for a set of up to 6 planes to define a volume that excluded from rendering.\r\nThis is useful for rendering various cross sections and revealing internal geometry.\n\n#### Type declaration\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `enabled` | `boolean` | Whether to clip geometry by the actual bounding box or not. |\n| `mode` | ``\"intersection\"`` \\| ``\"union\"`` | How multiple clipping planes are combined. Default: \"union\" |\n| `planes` | readonly `ReadonlyVec4`[] | List of clipping planes (max 6), expressed as plane normal (x,y,z) and offset from origo (w) in a 4D world space vector. |\n\n___\n\n### display\n\n• `Readonly` **display**: `Object`\n\nDisplay settings\n\n#### Type declaration\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `height` | `number` | Display height in pixels. |\n| `width` | `number` | Display width in pixels. |\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 66, "to": 100 } } }
    }
  ],
  [
    "395",
    {
      "pageContent": "environment\n\n• `Optional` **environment**: [`Environment`](NovoRender.Environment.md)\n\nCurrent background/IBL environment.\n\n**`Remarks`**\n\nEnvironments are a pre-baked set of textures for background and lighting information.\r\nFor retrieving a list of available environments, see [availableEnvironments](NovoRender.API.md#availableenvironments).\r\nAn environment must be loaded before it can be assigned here, via View.loadEnvironment.\r\nAssigning an environment impacts lighting if no light.sun is defined, and also background images [background](NovoRender.RenderSettings.md#background) if no color is defined.\r\nImage based lighting (IBL) uses light information from HDRI panoramic images to create a more natural looking light and ambience.\r\nIf undefined, a basic directional sun lighting model will be used instead, allowing for dynamic changes in light color and direction at the expense of esthetics.\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 102, "to": 117 } } }
    }
  ],
  [
    "396",
    {
      "pageContent": "exposure\n\n• `Optional` **exposure**: `number`\n\nCamera light exposure as stops of power of 2.\n\n**`Remarks`**\n\nNegative values darkens the image, while positive ones brightens it.\r\nThe default value is 0.0.\n\n___\n\n### grid\n\n• `Readonly` **grid**: `Object`\n\nGrid settings\n\n#### Type declaration\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `axisX` | `vec3` | X axis of the grid, length determines the distance between lines |\n| `axisY` | `vec3` | Y axis of the grid, length determines the distance between lines |\n| `enabled` | `boolean` | Enable grid plane. |\n| `majorColor` | `ReadonlyVec3` | Color of major grid lines |\n| `majorLineCount` | `number` | Number of major lines, odd number needed to have lines go through origo. |\n| `minorColor` | `ReadonlyVec3` | Color of minor grid lines |\n| `minorLineCount` | `number` | Number of minor lines between major lines. |\n| `origo` | `vec3` | Origo of the grid |\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 119, "to": 151 } } }
    }
  ],
  ["397", { "pageContent": "light\n\n• `Readonly` **light**: `Object`\n\nLight settings", "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 153, "to": 157 } } } }],
  ["398", { "pageContent": "Type declaration", "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 157, "to": 157 } } } }],
  [
    "399",
    {
      "pageContent": "| Name | Type | Description |\n| :------ | :------ | :------ |\n| `ambient` | { `brightness`: `number`  } | Ambient hemisphere light, emulating indirect light scattered from atmosphere. |\n| `ambient.brightness` | `number` | Brightness expressed as a scalar from 0.0 (none), to 1.0 (max). |\n| `camera` | { `brightness`: `number` ; `distance`: `number`  } | Camera local light. |\n| `camera.brightness` | `number` | Brightness expressed as a scalar from 0.0 (none), to 1.0 (bright). |\n| `camera.distance` | `number` | Fall-off distance, beyond which this light is effectively disabled. |\n| `sun` | { `brightness`: `number` ; `position`: { `azimuth`: `number` ; `inclination`: `number`  } ; `time?`: `Date`  } | Direct sunlight. |\n| `sun.brightness` | `number` | Brightness expressed as a scalar from 0.0 (none), to 1.0 (sunny). |\n| `sun.position` | { `azimuth`: `number` ; `inclination`: `number`  } | Sun position on the sky. |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 287, "to": 296 } } }
    }
  ],
  [
    "400",
    {
      "pageContent": "| `sun.brightness` | `number` | Brightness expressed as a scalar from 0.0 (none), to 1.0 (sunny). |\n| `sun.position` | { `azimuth`: `number` ; `inclination`: `number`  } | Sun position on the sky. |\n| `sun.position.azimuth` | `number` | Solar azimuth angle in degrees, where 0° is due north, 90° is due east and 270° due west. |\n| `sun.position.inclination` | `number` | Solar elevation angle in degrees, where 0° at the horizon and 90° is straight up. |\n| `sun.time?` | `Date` | If set then sun [position](NovoRender.RenderSettings.md#position) on the sky will be calculated automatically based on scene [location](NovoRender.Scene.md#location), [timezone](NovoRender.Scene.md#timezone) and this time. |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 296, "to": 300 } } }
    }
  ],
  ["401", { "pageContent": "___", "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 300, "to": 300 } } } }],
  [
    "402",
    {
      "pageContent": "objectHighlights\n\n• **objectHighlights**: readonly [`Highlight`](NovoRender.Highlight.md)[]\n\nColor transforms for various highlighting groups.\n\n**`Remarks`**\n\nThese highlights are used by the scene.objectHighlighter.\r\nModifing the highlights is done by assigning a new array, rather than mutating the existing one.\r\nThe maximum number of highlights supported is currently 256, whereof the last (255) is reserved for hidden objects.\r\nThe highlight at index 0 is the initial default for all objects and can be used to e.g. highlight all objects that are not selected or otherwise part of another highlighting group.\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 440, "to": 453 } } }
    }
  ],
  [
    "403",
    {
      "pageContent": "ocean\n\n• `Readonly` **ocean**: `Object`\n\nOcean render settings\n\n**`Remarks`**\n\nIf undefined, ocean geometry will not be rendered.\n\n#### Type declaration\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `color` | `ReadonlyVec3` | Ocean color |\n| `enabled` | `boolean` | Enable ocean rendering (default false). |\n| `opacity` | `number` | Ocean opacity (default 0.5). |\n\n___\n\n### pickBuffer\n\n• `Readonly` **pickBuffer**: `Object`\n\n#### Type declaration\n\n| Name | Type |\n| :------ | :------ |\n| `includeTransparent` | `bool` |\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 455, "to": 485 } } }
    }
  ],
  [
    "404",
    {
      "pageContent": "points\n\n• `Readonly` **points**: `Object`\n\nPoint cloud settings.\n\n**`Remarks`**\n\nThe sizes are cumulative and computed as follows:\r\n``effective_point_pixel_size = max(1, pixelSize + projectedSizeOf(metricSize + tolerance * toleranceFactor))``.\r\nMetric size is projected as a 3D sphere at the point origo to deterine pixel size.\r\nThe term pixel refers to the size of a pixel in the target canvas element, which resolution may differ from that of the render buffer.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 487, "to": 498 } } }
    }
  ],
  ["405", { "pageContent": "Type declaration", "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 498, "to": 498 } } } }],
  [
    "406",
    {
      "pageContent": "| Name | Type | Description |\n| :------ | :------ | :------ |\n| `deviation` | { `colors`: readonly [`DeviationColorGradientNode`](NovoRender.DeviationColorGradientNode.md)[] ; `mode`: ``\"on\"`` \\| ``\"off\"`` \\| ``\"mix\"``  } | - |\n| `deviation.colors` | readonly [`DeviationColorGradientNode`](NovoRender.DeviationColorGradientNode.md)[] | - |\n| `deviation.mode` | ``\"on\"`` \\| ``\"off\"`` \\| ``\"mix\"`` | - |\n| `intensity` | { `colors`: readonly [`IntensityColorGradientNode`](NovoRender.IntensityColorGradientNode.md)[] ; `mode`: ``\"on\"`` \\| ``\"off\"`` \\| ``\"mix\"``  } | - |\n| `intensity.colors` | readonly [`IntensityColorGradientNode`](NovoRender.IntensityColorGradientNode.md)[] | - |\n| `intensity.mode` | ``\"on\"`` \\| ``\"off\"`` \\| ``\"mix\"`` | - |\n| `shape` | ``\"disc\"`` \\| ``\"square\"`` | Point shape. Default is \"disc\". |\n| `size` | { `maxPixel`: `number` ; `metric`: `number` ; `pixel`: `number` ; `toleranceFactor`: `number`  } | - |\n| `size.maxPixel` | `number` | Max point size in pixels. |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 706, "to": 716 } } }
    }
  ],
  [
    "407",
    {
      "pageContent": "| `size` | { `maxPixel`: `number` ; `metric`: `number` ; `pixel`: `number` ; `toleranceFactor`: `number`  } | - |\n| `size.maxPixel` | `number` | Max point size in pixels. |\n| `size.metric` | `number` | Point size in meters. |\n| `size.pixel` | `number` | Point size in pixels. |\n| `size.toleranceFactor` | `number` | The scaling factor for applying the tolerance of the current level of detail to point size. **`Remarks`** Different levels of detail (LOD) will have different point densities. Taking this difference into account may result in a more uniform point coverage and visually pleasing result. The tolerance of each LOD reflects the point merging distance threshold in meters used to reduce # points, or 0 for the original level of detail. |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 716, "to": 720 } } }
    }
  ],
  ["408", { "pageContent": "___", "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 720, "to": 720 } } } }],
  [
    "409",
    {
      "pageContent": "quality\n\n• `Readonly` **quality**: `Object`\n\nRender quality settings for adjusting performance to various devices",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 939, "to": 943 } } }
    }
  ],
  ["410", { "pageContent": "Type declaration", "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 943, "to": 943 } } } }],
  [
    "411",
    {
      "pageContent": "| Name | Type | Description |\n| :------ | :------ | :------ |\n| `detail` | { `autoAdjust`: { `enabled`: `boolean` ; `max`: `number` ; `min`: `number`  } ; `maxLodTextureBytes?`: `number` ; `maxLodTriangles?`: `number` ; `value`: `number`  } | Geometry detail settings. |\n| `detail.autoAdjust` | { `enabled`: `boolean` ; `max`: `number` ; `min`: `number`  } | Auto adjustment based on current device's rendering performance. |\n| `detail.autoAdjust.enabled` | `boolean` | Is automatic adjustment enabled? |\n| `detail.autoAdjust.max` | `number` | Upper bound for automatic adjustment. |\n| `detail.autoAdjust.min` | `number` | Lower bound for automatic adjustment. |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 1176, "to": 1182 } } }
    }
  ],
  [
    "412",
    {
      "pageContent": "| `detail.autoAdjust.max` | `number` | Upper bound for automatic adjustment. |\n| `detail.autoAdjust.min` | `number` | Lower bound for automatic adjustment. |\n| `detail.maxLodTextureBytes?` | `number` | Max limit for # of bytes used for textures in static LOD geometry. **`Remarks`** Adjust this to accomodate memory constraints on your device. Default value is undefined, which disables enforcement of this limit. The # bytes refers to the textxure image and does not include memory used for mipmapping or device specific format conversions. Hardware compressed textures only count for the compressed byte size. Textures from DynamicObjects are not included in the triangle count and thus not contrained by this value. |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 1182, "to": 1184 } } }
    }
  ],
  [
    "413",
    {
      "pageContent": "| `detail.maxLodTriangles?` | `number` | Max limit for # of triangles used for static LOD geometry. **`Remarks`** Adjust this to enforce memory and performance constraints on your device. Default value is undefined, which disables enforcement of this limit. Triangles from DynamicObjects are not included in the triangle count and thus not contrained by this value. |\n| `detail.value` | `number` | Level of geometry detail. 1.0 = reasonable default, >1 more detail, <1 less detail. |\n| `resolution` | { `autoAdjust`: { `enabled`: `boolean` ; `max`: `number` ; `min`: `number`  } ; `value`: `number`  } | Resolution settings. |\n| `resolution.autoAdjust` | { `enabled`: `boolean` ; `max`: `number` ; `min`: `number`  } | Auto adjustment based on current device's rendering performance. |\n| `resolution.autoAdjust.enabled` | `boolean` | Is automatic adjustment enabled? |\n| `resolution.autoAdjust.max` | `number` | Upper bound for automatic adjustment. |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 1185, "to": 1190 } } }
    }
  ],
  [
    "414",
    {
      "pageContent": "| `resolution.autoAdjust.enabled` | `boolean` | Is automatic adjustment enabled? |\n| `resolution.autoAdjust.max` | `number` | Upper bound for automatic adjustment. |\n| `resolution.autoAdjust.min` | `number` | Lower bound for automatic adjustment. |\n| `resolution.value` | `number` | Level of pixel resolution, where 1.0 = 1:1 ratio (default) and values lesser than 1 will render in lower resolution than screen and scale up for increased performance. |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 1190, "to": 1193 } } }
    }
  ],
  ["415", { "pageContent": "___", "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 1193, "to": 1193 } } } }],
  [
    "416",
    {
      "pageContent": "terrain\n\n• **terrain**: `Object`\n\nTerrain render settings\n\n**`Remarks`**\n\nIf undefined, terrain geometry will not be rendered.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 1439, "to": 1447 } } }
    }
  ],
  [
    "417",
    {
      "pageContent": "Type declaration\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `asBackground` | `boolean` | Draw terrain as background |\n| `elevationColors` | readonly [`ElevationColorGradientNode`](NovoRender.ElevationColorGradientNode.md)[] | Elevation gradient color curve, defined by a list of nodes. **`Remarks`** Nodes must be sorted in ascending order of elevation! Elevations are defined as in meters above/below sea level (using negative values for sub sea terrain). At least two nodes are required for any sort of gradient. Nodes do not have to be uniformly distributed elevation-wise. To create a discontinuity in the gradient, two adjacent nodes with identical elevation, but different colors may be used. Any elevation outside the min/max range defined by this list will be clamped to the color of the nearest node (min or max), i.e., no extrapolation will occur. |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.RenderSettings.md", "loc": { "lines": { "from": 1449, "to": 1454 } } }
    }
  ],
  [
    "418",
    {
      "pageContent": "---\nid: \"NovoRender.Scene\"\ntitle: \"WebGL API\"\nsidebar_label: \"Scene\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).Scene\n\nScene document\n\n**`Remarks`**\n\nA scene represents the document entity of NovoRender, corresponding to something akin to a top level CAD assembly.\r\nIt provides information for both rendering 3D geometry and querying for object metadata.\r\nIn order to fascilitate complex datasets on small client devices, scenes load most data on demand and caches a relevant, but still potentially substantial subset in system and GPU memory.\r\nWeaker devices may struggle to host multiple scenes in memory at once, so make sure to remove any references to unused scenes and related objects for effective garbage collection when loading new scenes.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Scene.md", "loc": { "lines": { "from": 1, "to": 18 } } }
    }
  ],
  [
    "419",
    {
      "pageContent": "Properties\n\n### boundingSphere\n\n• `Readonly` **boundingSphere**: [`BoundingSphere`](NovoRender.BoundingSphere.md)\n\nThe bounding sphere of the scene in world space.\n\n**`Remarks`**\n\nThis property is useful for e.g. initial camera positioning based on approximate scene size and center.\n\n___\n\n### dateCreated\n\n• `Readonly` **dateCreated**: `Date`\n\nDate of scene creation\n\n___\n\n### dateLastSaved\n\n• `Readonly` **dateLastSaved**: `Date`\n\nDate of when scene was last saved\n\n___\n\n### description\n\n• `Optional` **description**: `string`\n\nScene description.\n\n___\n\n### dynamicObjects\n\n• `Readonly` **dynamicObjects**: `IterableIterator`<[`DynamicObject`](NovoRender.DynamicObject.md)\\>\n\nList of dynamic objects currently in scene.\n\n**`Remarks`**\n\nTo add a new dynamic object, see [createDynamicObject](NovoRender.Scene.md#createdynamicobject).\r\nTo remove a dynamic object, see [dispose](NovoRender.DynamicObject.md#dispose).\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Scene.md", "loc": { "lines": { "from": 20, "to": 69 } } }
    }
  ],
  [
    "420",
    {
      "pageContent": "id\n\n• **id**: `string`\n\nScene Id\n\n**`Remarks`**\n\nFor new scenes, this will contain a random string/guid.\n\n___\n\n### location\n\n• `Optional` **location**: [`GeoLocation`](NovoRender.GeoLocation.md)\n\nGeological location of scene.\n\n**`Remarks`**\n\nThis location is used for calculating correct lighting/sun position for a given time and date. In future, it may also be used for google earth-like background settings and map icons etc. For static structures in particular, providing an accurate location is thus recommended.\n\n___\n\n### objectHighlighter\n\n• `Readonly` **objectHighlighter**: [`ObjectHighlighter`](NovoRender.ObjectHighlighter.md)\n\nAn object that allows sets of objects to be highlighted using different color transforms.\n\n___\n\n### subtrees\n\n• `Optional` `Readonly` **subtrees**: (``\"terrain\"`` \\| ``\"triangles\"`` \\| ``\"lines\"`` \\| ``\"points\"`` \\| ``\"documents\"``)[]\n\nScene subtrees types\n\n**`Remark`**\n\nAvailable types\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Scene.md", "loc": { "lines": { "from": 71, "to": 113 } } }
    }
  ],
  [
    "421",
    {
      "pageContent": "subtrees\n\n• `Optional` `Readonly` **subtrees**: (``\"terrain\"`` \\| ``\"triangles\"`` \\| ``\"lines\"`` \\| ``\"points\"`` \\| ``\"documents\"``)[]\n\nScene subtrees types\n\n**`Remark`**\n\nAvailable types\n\n___\n\n### timezone\n\n• `Optional` **timezone**: `number`\n\nLocal timezone expressed in hours from GMT.\n\n**`Remarks`**\n\nInformation for calculating correct lighting/sun position using local time rather than UTC.\n\n___\n\n### title\n\n• **title**: `string`\n\nScene title\n\n___\n\n### variants\n\n• `Optional` `Readonly` **variants**: (``\"deviation\"`` \\| ``\"intensity\"``)[]",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Scene.md", "loc": { "lines": { "from": 113, "to": 147 } } }
    }
  ],
  ["422", { "pageContent": "Methods", "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Scene.md", "loc": { "lines": { "from": 149, "to": 149 } } } }],
  [
    "423",
    {
      "pageContent": "computeSunPosition\n\n▸ **computeSunPosition**(`time`): `Object`\n\nCompute sun position.\n\n**`Remarks`**\n\nThe computation will take into account seasonal changes as well as time.\r\nThe [timezone](NovoRender.Scene.md#timezone) may be useful to provide the correct UTC time in the physical area described by the scene but is not used by this method directly.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `time` | `Date` | Desired date and time of day in universal time (UTC). |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Scene.md", "loc": { "lines": { "from": 151, "to": 166 } } }
    }
  ],
  [
    "424",
    {
      "pageContent": "Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `time` | `Date` | Desired date and time of day in universal time (UTC). |\n\n#### Returns\n\n`Object`\n\nThe sun position, which can then be used in the render settings to visualize the light conditions for a given site on the given time.\n\n| Name | Type |\n| :------ | :------ |\n| `azimuth` | `number` |\n| `inclination` | `number` |\n\n▸ **computeSunPosition**(`time`): `Object`\n\nCompute sun position.\n\n**`Remarks`**\n\nThe computation will take into account seasonal changes as well as time.\r\nThe [timezone](NovoRender.Scene.md#timezone) may be useful to provide the correct UTC time in the physical area described by the scene but is not used by this method directly.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `time` | `Date` | Desired date and time of day in universal time (UTC). |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Scene.md", "loc": { "lines": { "from": 166, "to": 196 } } }
    }
  ],
  [
    "425",
    {
      "pageContent": "Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `time` | `Date` | Desired date and time of day in universal time (UTC). |\n\n#### Returns\n\n`Object`\n\nThe sun position, which can then be used in the render settings to visualize the light conditions for a given site on the given time.\n\n| Name | Type |\n| :------ | :------ |\n| `azimuth` | `number` |\n| `inclination` | `number` |\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Scene.md", "loc": { "lines": { "from": 196, "to": 213 } } }
    }
  ],
  [
    "426",
    {
      "pageContent": "createDynamicObject\n\n▸ **createDynamicObject**(`asset`): [`DynamicObject`](NovoRender.DynamicObject.md)\n\nCreate a new dynamic object.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `asset` | [`DynamicAsset`](NovoRender.DynamicAsset.md) | The geometry asset to use for this object. |\n\n#### Returns\n\n[`DynamicObject`](NovoRender.DynamicObject.md)\n\nA new dynamic object, whose state is initially invisible by default.\n\n▸ **createDynamicObject**(`asset`): [`DynamicObject`](NovoRender.DynamicObject.md)\n\nCreate a new dynamic object.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `asset` | [`DynamicAsset`](NovoRender.DynamicAsset.md) | The geometry asset to use for this object. |\n\n#### Returns\n\n[`DynamicObject`](NovoRender.DynamicObject.md)\n\nA new dynamic object, whose state is initially invisible by default.\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Scene.md", "loc": { "lines": { "from": 215, "to": 249 } } }
    }
  ],
  [
    "427",
    {
      "pageContent": "descendants\n\n▸ **descendants**(`object`, `signal`): `Promise`<`number`[]\\>\n\nReturns all descendants\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `object` | [`HierarcicalObjectReference`](NovoRender.HierarcicalObjectReference.md) |\n| `signal` | `AbortSignal` |\n\n#### Returns\n\n`Promise`<`number`[]\\>\n\n▸ **descendants**(`object`, `signal`): `Promise`<`number`[]\\>\n\nReturns all descendants\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `object` | [`HierarcicalObjectReference`](NovoRender.HierarcicalObjectReference.md) |\n| `signal` | `AbortSignal` |\n\n#### Returns\n\n`Promise`<`number`[]\\>\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Scene.md", "loc": { "lines": { "from": 251, "to": 283 } } }
    }
  ],
  [
    "428",
    {
      "pageContent": "getObjectReference\n\n▸ **getObjectReference**(`id`): [`ObjectReference`](NovoRender.ObjectReference.md)\n\nReturn a queryable object reference.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `id` | `number` | Object Id |\n\n#### Returns\n\n[`ObjectReference`](NovoRender.ObjectReference.md)\n\n▸ **getObjectReference**(`id`): [`ObjectReference`](NovoRender.ObjectReference.md)\n\nReturn a queryable object reference.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `id` | `number` | Object Id |\n\n#### Returns\n\n[`ObjectReference`](NovoRender.ObjectReference.md)\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Scene.md", "loc": { "lines": { "from": 285, "to": 315 } } }
    }
  ],
  [
    "429",
    {
      "pageContent": "search\n\n▸ **search**(`filter`, `signal?`): `AsyncIterableIterator`<[`HierarcicalObjectReference`](NovoRender.HierarcicalObjectReference.md)\\>\n\nSearch for objects.\n\n**`Remarks`**\n\nScenes contains objects with associated properties.\r\nLoading scenes with millions of objects direcly into memory may be slow or even impossible on memory constrained devices.\r\nThis function lets you selectively load object properties based on some criteria.\r\nAn example of this is if you want to make a virtual tree view that only load child nodes on demand when the user expands a folder to make your UI scale to very large scenes.\r\n```typescript\r\nconst children = scene.search({ parentPath: \"rootfolder/subfolder\", descentDepth: 1});\r\nfor await (const child of children) {\r\n// TODO: append child's properties to UI\r\n}\r\n```",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Scene.md", "loc": { "lines": { "from": 317, "to": 334 } } }
    }
  ],
  [
    "430",
    {
      "pageContent": "Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `filter` | [`SearchOptions`](NovoRender.SearchOptions.md) | [SearchOptions](NovoRender.SearchOptions.md) filtering options. |\n| `signal?` | `AbortSignal` | Abort request signal. |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Scene.md", "loc": { "lines": { "from": 336, "to": 341 } } }
    }
  ],
  [
    "431",
    {
      "pageContent": "Returns\n\n`AsyncIterableIterator`<[`HierarcicalObjectReference`](NovoRender.HierarcicalObjectReference.md)\\>\n\nAsync iterator of [HierarcicalObjectReference](NovoRender.HierarcicalObjectReference.md)\n\n▸ **search**(`filter`, `signal?`): `AsyncIterableIterator`<[`HierarcicalObjectReference`](NovoRender.HierarcicalObjectReference.md)\\>\n\nSearch for objects.\n\n**`Remarks`**\n\nScenes contains objects with associated properties.\r\nLoading scenes with millions of objects direcly into memory may be slow or even impossible on memory constrained devices.\r\nThis function lets you selectively load object properties based on some criteria.\r\nAn example of this is if you want to make a virtual tree view that only load child nodes on demand when the user expands a folder to make your UI scale to very large scenes.\r\n```typescript\r\nconst children = scene.search({ parentPath: \"rootfolder/subfolder\", descentDepth: 1});\r\nfor await (const child of children) {\r\n// TODO: append child's properties to UI\r\n}\r\n```",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Scene.md", "loc": { "lines": { "from": 343, "to": 364 } } }
    }
  ],
  [
    "432",
    {
      "pageContent": "Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `filter` | [`SearchOptions`](NovoRender.SearchOptions.md) | [SearchOptions](NovoRender.SearchOptions.md) filtering options. |\n| `signal?` | `AbortSignal` | Abort request signal. |\n\n#### Returns\n\n`AsyncIterableIterator`<[`HierarcicalObjectReference`](NovoRender.HierarcicalObjectReference.md)\\>\n\nAsync iterator of [HierarcicalObjectReference](NovoRender.HierarcicalObjectReference.md)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.Scene.md", "loc": { "lines": { "from": 364, "to": 375 } } }
    }
  ],
  [
    "433",
    {
      "pageContent": "---\nid: \"NovoRender.ScreenSpaceAmbientOcclusionParams\"\ntitle: \"WebGL API\"\nsidebar_label: \"ScreenSpaceAmbientOcclusionParams\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).ScreenSpaceAmbientOcclusionParams\n\nScreen space ambient occlusion post effect.\n\n**`Remarks`**\n\nThis post effect is intended to be applied over several frames of an unchanging view, i.e. when the camera stops moving and the scene is fully resolved.\r\nAmbient occlusion is a shadowing effect that makes geometry easier to visually interpret and more pleasing to the eye.\r\nThis effect can be quite demanding on weaker devices, so use over several frames with care to avoid stuttering when view changes.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.ScreenSpaceAmbientOcclusionParams.md", "loc": { "lines": { "from": 1, "to": 17 } } }
    }
  ],
  [
    "434",
    {
      "pageContent": "Properties\n\n### kind\n\n• `Readonly` **kind**: ``\"ssao\"``\n\nPost effect kind/discriminator.\n\n___\n\n### radius\n\n• `Readonly` **radius**: `number`\n\nNeighborhood sampling radius in # pixels.\n\n___\n\n### reset\n\n• `Optional` `Readonly` **reset**: `boolean`\n\nFlag to reset accumulation of images, e.g. after the view changed.\n\n___\n\n### samples\n\n• `Readonly` **samples**: `number`\n\n# of samples per pixel.\n\n___\n\n### skipOpacity\n\n• `Optional` `Readonly` **skipOpacity**: `boolean`\n\nWhether to ignore transparent pixels or not.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.ScreenSpaceAmbientOcclusionParams.md", "loc": { "lines": { "from": 19, "to": 57 } } }
    }
  ],
  [
    "435",
    {
      "pageContent": "---\nid: \"NovoRender.SearchOptions\"\ntitle: \"WebGL API\"\nsidebar_label: \"SearchOptions\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).SearchOptions\n\nSearch object options",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.SearchOptions.md", "loc": { "lines": { "from": 1, "to": 11 } } }
    }
  ],
  [
    "436",
    {
      "pageContent": "Properties\n\n### descentDepth\n\n• `Optional` **descentDepth**: `number`\n\nHow many generations of descendants to include in search.\n\n**`Remarks`**\n\n0 - object itself\n\n1 - children only\n\nundefined - deepest levels.\n\n___\n\n### full\n\n• `Optional` **full**: `boolean`\n\nPreload all matching objects.\n\n**`Remarks`**\n\nThis param should be set if you want to access some parameters of all results later to prevent per object data request.\n\n___\n\n### parentPath\n\n• `Optional` **parentPath**: `string`\n\nPath to search start from.\n\n**`Remarks`**\n\nPath is similar to filesystem file/folder hierarchical paths, e.g. my_folder/my_object.\r\nPaths reflect original CAD model hierarchy (.ifc, .rvm, etc).\r\nOnly objects contained within specified folder will be returned.\n\n___\n\n### searchPattern\n\n• `Optional` **searchPattern**: `string` \\| [`SearchPattern`](NovoRender.SearchPattern.md)[]\n\nProperty pattern to search for.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.SearchOptions.md", "loc": { "lines": { "from": 13, "to": 61 } } }
    }
  ],
  [
    "437",
    {
      "pageContent": "---\nid: \"NovoRender.SearchPattern\"\ntitle: \"WebGL API\"\nsidebar_label: \"SearchPattern\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).SearchPattern\n\nSearch pattern",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.SearchPattern.md", "loc": { "lines": { "from": 1, "to": 11 } } }
    }
  ],
  [
    "438",
    {
      "pageContent": "Properties\n\n### exact\n\n• `Optional` **exact**: `boolean`\n\nRequire exact match or not.\n\n___\n\n### exclude\n\n• `Optional` **exclude**: `boolean`\n\nExclude this match from result.\r\nproperty name is mandatory\n\n___\n\n### planes\n\n• `Optional` **planes**: `vec4`[]\n\nVolume to include in search.\n\n**`Remarks`**\n\nWe currently only use object axis alinged bounding boxes (AABB) for this search.\r\nEach plane defines a half-space, where the positive side of the plane is included in the search.\r\nIf [exact](NovoRender.SearchPattern.md#exact) is true, the whole object AABB must be on the positive side.\r\nElse it must be at least partially on the positive side.\r\nIf [exclude](NovoRender.SearchPattern.md#exclude) is true, all objects that would have been excluded will now be included, and vice versa.\n\n___\n\n### property\n\n• `Optional` **property**: `string`\n\nProperty name to find.\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.SearchPattern.md", "loc": { "lines": { "from": 13, "to": 54 } } }
    }
  ],
  [
    "439",
    {
      "pageContent": "property\n\n• `Optional` **property**: `string`\n\nProperty name to find.\n\n___\n\n### range\n\n• `Optional` **range**: `Object`\n\nRange of values to search.\r\nproperty name is mandatory\n\n#### Type declaration\n\n| Name | Type |\n| :------ | :------ |\n| `max` | `string` |\n| `min` | `string` |\n\n___\n\n### value\n\n• `Optional` **value**: `string` \\| `string`[]\n\nValue to find.\r\nif value is array of strings then search property value should match any (\"or\" function) of array values",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.SearchPattern.md", "loc": { "lines": { "from": 54, "to": 83 } } }
    }
  ],
  [
    "440",
    {
      "pageContent": "---\nid: \"NovoRender.StaticControllerParams\"\ntitle: \"WebGL API\"\nsidebar_label: \"StaticControllerParams\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).StaticControllerParams\n\nStatic camera motion controller parameters.\n\n## Properties\n\n### kind\n\n• **kind**: ``\"static\"``\n\nThe kind of camera controller.\n\n___\n\n### position\n\n• `Optional` **position**: `vec3`\n\nThe world space coordinate of the camera itself (default [0,0,1]).\n\n___\n\n### target\n\n• `Optional` **target**: `vec3`\n\nThe world space coordinate to look at (default [0,0,0]).\n\n___\n\n### up\n\n• `Optional` **up**: `vec3`\n\nThe world space up vector (default [0,1,0]).",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.StaticControllerParams.md", "loc": { "lines": { "from": 1, "to": 43 } } }
    }
  ],
  [
    "441",
    {
      "pageContent": "---\nid: \"NovoRender.TemporalAntialiasingParams\"\ntitle: \"WebGL API\"\nsidebar_label: \"TemporalAntialiasingParams\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).TemporalAntialiasingParams\n\nTemporal antialiasing post effect.\n\n**`Remarks`**\n\nThis post effect is intended to be applied over several frames of an unchanging view, i.e. when the camera stops moving and the scene is fully resolved.\r\nAfter a few dozen frames, edges will appear smoother.\r\nTo save energy, you probably only want to run this effect for a second or two, whenever your image is smooth enough.\n\n## Properties\n\n### kind\n\n• `Readonly` **kind**: ``\"taa\"``\n\nPost effect kind/discriminator.\n\n___\n\n### radius\n\n• `Optional` `Readonly` **radius**: `number`\n\nSampling radius in # pixels.\n\n___\n\n### reset\n\n• `Optional` `Readonly` **reset**: `boolean`\n\nFlag to reset accumulation of images, e.g. after the view changed.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.TemporalAntialiasingParams.md", "loc": { "lines": { "from": 1, "to": 41 } } }
    }
  ],
  [
    "442",
    {
      "pageContent": "---\nid: \"NovoRender.TransparentHighlightParams\"\ntitle: \"WebGL API\"\nsidebar_label: \"TransparentHighlightParams\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).TransparentHighlightParams\n\nTransparent highlight parameters\n\n## Properties\n\n### kind\n\n• **kind**: ``\"transparent\"``\n\nThe kind of highlight.\n\n___\n\n### opacity\n\n• **opacity**: `number`\n\nThe opacity to assign. Value must between 0.0 (fully transparent) and 1.0 (fully opaque)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.TransparentHighlightParams.md", "loc": { "lines": { "from": 1, "to": 27 } } }
    }
  ],
  [
    "443",
    {
      "pageContent": "---\nid: \"NovoRender.TurntableControllerParams\"\ntitle: \"WebGL API\"\nsidebar_label: \"TurntableControllerParams\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).TurntableControllerParams\n\nTurntable camera motion controller parameters.\n\n## Properties\n\n### distance\n\n• `Optional` **distance**: `number`\n\nThe camera distance relative to pivot point in meters.\n\n___\n\n### elevation\n\n• `Optional` **elevation**: `number`\n\nThe camera elevation relative to pivot point in meters.\n\n___\n\n### kind\n\n• **kind**: ``\"turntable\"``\n\nThe kind of camera controller.\n\n___\n\n### pivotPoint\n\n• `Optional` **pivotPoint**: `vec3`\n\nThe world space coordinate to orbit around.\n\n___\n\n### rotation\n\n• `Optional` **rotation**: `number`\n\nThe current turntable rotation angle in degrees (+/-180)\n\n___\n\n### rotationalVelocity\n\n• `Optional` **rotationalVelocity**: `number`\n\nThe velocity with which the camera rotates in degrees/second.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.TurntableControllerParams.md", "loc": { "lines": { "from": 1, "to": 59 } } }
    }
  ],
  [
    "444",
    {
      "pageContent": "---\nid: \"NovoRender.View\"\ntitle: \"WebGL API\"\nsidebar_label: \"View\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](../namespaces/NovoRender.md).View\n\nA 3D view.\n\n**`Remarks`**\n\n3D views will render a scene into a provided canvas element.\r\nAny changes to the scene, camera or settings are automatically rendered in a background animation loop.\r\nWhen the camera stops moving, additional frames may also be rendered to incrementally refine the quality of the output image over a certain period.\r\nSetting the [render](NovoRender.View.md#render) property to false will stop such automatic updates.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.View.md", "loc": { "lines": { "from": 1, "to": 18 } } }
    }
  ],
  [
    "445",
    {
      "pageContent": "Properties\n\n### autoRender\n\n• **autoRender**: `boolean`\n\nFlag whether to automatically render or not. Default is true.\n\n___\n\n### camera\n\n• **camera**: [`Camera`](NovoRender.Camera.md)\n\nThe camera to use.\n\n___\n\n### lastRenderOutput\n\n• `Readonly` **lastRenderOutput**: [`RenderOutput`](NovoRender.RenderOutput.md)\n\nThe last rendered frame, if any.\n\n___\n\n### performanceStatistics\n\n• `Readonly` **performanceStatistics**: [`PerformanceStatistics`](NovoRender.PerformanceStatistics.md)\n\nPerformance statistics from previously rendered frame.\n\n___\n\n### scene\n\n• `Optional` **scene**: [`Scene`](NovoRender.Scene.md)\n\nThe scene to render.\n\n**`Remarks`**\n\nAssigning a new scene initiates a sequence of geometry downloads that may take a few seconds to produce any visual results and then refine over time.\n\n___\n\n### settings\n\n• `Readonly` **settings**: [`RenderSettings`](NovoRender.RenderSettings.md)\n\nCurrent render settings.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.View.md", "loc": { "lines": { "from": 20, "to": 70 } } }
    }
  ],
  [
    "446",
    {
      "pageContent": "Methods\n\n### adjustQuality\n\n▸ **adjustQuality**(`framerateTargets?`): `number`\n\nDynamically adjust render quality to match device performance.\n\n**`Remarks`**\n\nCalling this function may reduce render resolution when rendering performance drops below the specified threshold.\r\nThis is particularly useful to maintain acceptable performance on mobile devices with limited fillrate and triangle capacity.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `framerateTargets?` | `Object` | The maximum # of milliseconds between rendered frames before reducing resolution, and minimum # of milliseconds for restoring quality. Default is 200ms, or 5 frames/second and 33.3 ms, or 30 fps |\n| `framerateTargets.lowerBound` | `number` | - |\n| `framerateTargets.upperBound` | `number` | - |\n\n#### Returns\n\n`number`\n\nThe last measured median frame interval, or undefined if not yet available.\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.View.md", "loc": { "lines": { "from": 72, "to": 99 } } }
    }
  ],
  [
    "447",
    {
      "pageContent": "applySettings\n\n▸ **applySettings**(`changes`): `void`\n\nApply render settings changes using deep copy.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `changes` | `Partial`<`Readonly`<[`RenderSettings`](NovoRender.RenderSettings.md)\\>\\> | changes to current render settings. |\n\n#### Returns\n\n`void`\n\n▸ **applySettings**(`changes`): `void`\n\nApply render settings changes using deep copy.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `changes` | `Partial`<`Readonly`<[`RenderSettings`](NovoRender.RenderSettings.md)\\>\\> | changes to current render settings. |\n\n#### Returns\n\n`void`\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.View.md", "loc": { "lines": { "from": 101, "to": 131 } } }
    }
  ],
  [
    "448",
    {
      "pageContent": "convertToBlob\n\n▸ **convertToBlob**(`options?`): `Promise`<`Blob`\\>\n\nConvert image to a data blob.\n\n**`Remarks`**\n\nSee [https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/convertToBlob](https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/convertToBlob) for more details.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `options?` | [`ImageEncodeOptions_`](NovoRender.ImageEncodeOptions_.md) | Image encoding options. |\n\n#### Returns\n\n`Promise`<`Blob`\\>\n\nA Promise to a Blob object representing the latest rendered image or undefined if device/browser does not yet support this functionality.\n\n▸ **convertToBlob**(`options?`): `Promise`<`Blob`\\>\n\nConvert image to a data blob.\n\n**`Remarks`**\n\nSee [https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/convertToBlob](https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/convertToBlob) for more details.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.View.md", "loc": { "lines": { "from": 133, "to": 161 } } }
    }
  ],
  [
    "449",
    {
      "pageContent": "Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `options?` | [`ImageEncodeOptions_`](NovoRender.ImageEncodeOptions_.md) | Image encoding options. |\n\n#### Returns\n\n`Promise`<`Blob`\\>\n\nA Promise to a Blob object representing the latest rendered image or undefined if device/browser does not yet support this functionality.\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.View.md", "loc": { "lines": { "from": 163, "to": 175 } } }
    }
  ],
  [
    "450",
    {
      "pageContent": "invalidateCamera\n\n▸ **invalidateCamera**(): `void`\n\nSignal changed camera to force rerender.\n\n#### Returns\n\n`void`\n\n___\n\n### measure\n\n▸ **measure**(`x`, `y`): `Promise`<[`MeasureInfo`](NovoRender.MeasureInfo.md)\\>\n\nGet [MeasureInfo](NovoRender.MeasureInfo.md) of nearest object (if any) at the specified pixel coordinate.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `x` | `number` | view x coordinate (0=left) |\n| `y` | `number` | view y coordinate (0=top) |\n\n#### Returns\n\n`Promise`<[`MeasureInfo`](NovoRender.MeasureInfo.md)\\>\n\n`undefined` if no object intersection was found.\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.View.md", "loc": { "lines": { "from": 177, "to": 208 } } }
    }
  ],
  [
    "451",
    {
      "pageContent": "pick\n\n▸ **pick**(`x`, `y`): `Promise`<[`PickInfo`](NovoRender.PickInfo.md)\\>\n\nPick nearest object (if any) at the specified pixel coordinate.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `x` | `number` | view x coordinate (0=left) |\n| `y` | `number` | view y coordinate (0=top) |\n\n#### Returns\n\n`Promise`<[`PickInfo`](NovoRender.PickInfo.md)\\>\n\n`undefined` if no object intersection was found.\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.View.md", "loc": { "lines": { "from": 210, "to": 229 } } }
    }
  ],
  [
    "452",
    {
      "pageContent": "render\n\n▸ **render**(`frameCallback?`): `Promise`<[`RenderOutput`](NovoRender.RenderOutput.md)\\>\n\nRender the next frame.\n\n**`Remarks`**\n\nThis function is meant to be called in a loop.\r\nYou should avoid calling it from a timer or a requestAnimationFrame callback since it's already being throttled to the screen's vertical blanking.\r\nIf the existing state has already been rendered, it will wait until there are changes before initiating a new render.\r\nThe returned render output object will have methods for post processing and for getting an image you can display in your own canvas.\r\nYou must call `dispose()` on the returned render output object before you can call this function again.\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `frameCallback?` | () => `void` |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.View.md", "loc": { "lines": { "from": 231, "to": 249 } } }
    }
  ],
  [
    "453",
    {
      "pageContent": "Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `frameCallback?` | () => `void` |\n\n#### Returns\n\n`Promise`<[`RenderOutput`](NovoRender.RenderOutput.md)\\>\n\nA promise of the rendered output.\n\n▸ **render**(`frameCallback?`): `Promise`<[`RenderOutput`](NovoRender.RenderOutput.md)\\>\n\nRender the next frame.\n\n**`Remarks`**\n\nThis function is meant to be called in a loop.\r\nYou should avoid calling it from a timer or a requestAnimationFrame callback since it's already being throttled to the screen's vertical blanking.\r\nIf the existing state has already been rendered, it will wait until there are changes before initiating a new render.\r\nThe returned render output object will have methods for post processing and for getting an image you can display in your own canvas.\r\nYou must call `dispose()` on the returned render output object before you can call this function again.\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `frameCallback?` | () => `void` |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.View.md", "loc": { "lines": { "from": 249, "to": 277 } } }
    }
  ],
  [
    "454",
    {
      "pageContent": "Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `frameCallback?` | () => `void` |\n\n#### Returns\n\n`Promise`<[`RenderOutput`](NovoRender.RenderOutput.md)\\>\n\nA promise of the rendered output.\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.View.md", "loc": { "lines": { "from": 277, "to": 289 } } }
    }
  ],
  [
    "455",
    {
      "pageContent": "transferToImageBitmap\n\n▸ **transferToImageBitmap**(): `Promise`<`ImageBitmap`\\>\n\nTransfer recently rendered image to a bitmap.\n\n**`Remarks`**\n\nSee [https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/transferToImageBitmap](https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/transferToImageBitmap) for more details.\n\n#### Returns\n\n`Promise`<`ImageBitmap`\\>\n\nA Promise to the transferred bitmap or undefined if device/browser does not yet support this functionality.\n\n▸ **transferToImageBitmap**(): `Promise`<`ImageBitmap`\\>\n\nTransfer recently rendered image to a bitmap.\n\n**`Remarks`**\n\nSee [https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/transferToImageBitmap](https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/transferToImageBitmap) for more details.\n\n#### Returns\n\n`Promise`<`ImageBitmap`\\>\n\nA Promise to the transferred bitmap or undefined if device/browser does not yet support this functionality.\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.View.md", "loc": { "lines": { "from": 291, "to": 321 } } }
    }
  ],
  [
    "456",
    {
      "pageContent": "updatePickBuffers\n\n▸ **updatePickBuffers**(): `Promise`<`void`\\>\n\nUpdates the pick buffers\n\n#### Returns\n\n`Promise`<`void`\\>",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/interfaces/NovoRender.View.md", "loc": { "lines": { "from": 323, "to": 331 } } }
    }
  ],
  [
    "457",
    {
      "pageContent": "---\nid: \"modules\"\ntitle: \"WebGL API\"\nsidebar_label: \"Exports\"\nsidebar_position: 0.5\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n## Namespaces\n\n- [NovoRender](namespaces/NovoRender.md)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/modules.md", "loc": { "lines": { "from": 1, "to": 12 } } }
    }
  ],
  [
    "458",
    {
      "pageContent": "---\nid: \"NovoRender.Internal\"\ntitle: \"WebGL API\"\nsidebar_label: \"Internal\"\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n[NovoRender](NovoRender.md).Internal\n\n## Interfaces\n\n- [CameraControllerExt](../interfaces/NovoRender.Internal.CameraControllerExt.md)\n- [CameraExt](../interfaces/NovoRender.Internal.CameraExt.md)\n- [RenderSettingsExt](../interfaces/NovoRender.Internal.RenderSettingsExt.md)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/namespaces/NovoRender.Internal.md", "loc": { "lines": { "from": 1, "to": 15 } } }
    }
  ],
  [
    "459",
    {
      "pageContent": "---\nid: \"NovoRender\"\ntitle: \"WebGL API\"\nsidebar_label: \"NovoRender\"\nsidebar_position: 0\ncustom_edit_url: null\ndescription: \"A Web API for scalable 3D rendering in the cloud.\"\n---\n\n## Namespaces\n\n- [Internal](NovoRender.Internal.md)\n\n## Enumerations\n\n- [NodeType](../enums/NovoRender.NodeType.md)\n- [WellKnownSceneUrls](../enums/NovoRender.WellKnownSceneUrls.md)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/namespaces/NovoRender.md", "loc": { "lines": { "from": 1, "to": 17 } } }
    }
  ],
  ["460", { "pageContent": "Interfaces", "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/namespaces/NovoRender.md", "loc": { "lines": { "from": 19, "to": 19 } } } }],
  [
    "461",
    {
      "pageContent": "- [AABB](../interfaces/NovoRender.AABB.md)\n- [API](../interfaces/NovoRender.API.md)\n- [APIOptions](../interfaces/NovoRender.APIOptions.md)\n- [BoundingSphere](../interfaces/NovoRender.BoundingSphere.md)\n- [Camera](../interfaces/NovoRender.Camera.md)\n- [CameraController](../interfaces/NovoRender.CameraController.md)\n- [CameraProperties](../interfaces/NovoRender.CameraProperties.md)\n- [ColorHighlightParams](../interfaces/NovoRender.ColorHighlightParams.md)\n- [DeviationColorGradientNode](../interfaces/NovoRender.DeviationColorGradientNode.md)\n- [DeviceProfile](../interfaces/NovoRender.DeviceProfile.md)\n- [DirectionalLight](../interfaces/NovoRender.DirectionalLight.md)\n- [DynamicAsset](../interfaces/NovoRender.DynamicAsset.md)\n- [DynamicObject](../interfaces/NovoRender.DynamicObject.md)\n- [ElevationColorGradientNode](../interfaces/NovoRender.ElevationColorGradientNode.md)\n- [Environment](../interfaces/NovoRender.Environment.md)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/namespaces/NovoRender.md", "loc": { "lines": { "from": 21, "to": 35 } } }
    }
  ],
  [
    "462",
    {
      "pageContent": "- [ElevationColorGradientNode](../interfaces/NovoRender.ElevationColorGradientNode.md)\n- [Environment](../interfaces/NovoRender.Environment.md)\n- [EnvironmentDescription](../interfaces/NovoRender.EnvironmentDescription.md)\n- [FlightControllerParams](../interfaces/NovoRender.FlightControllerParams.md)\n- [GeoLocation](../interfaces/NovoRender.GeoLocation.md)\n- [GrayscaleParams](../interfaces/NovoRender.GrayscaleParams.md)\n- [HSLAOptions](../interfaces/NovoRender.HSLAOptions.md)\n- [HierarcicalObjectReference](../interfaces/NovoRender.HierarcicalObjectReference.md)\n- [Highlight](../interfaces/NovoRender.Highlight.md)\n- [ImageEncodeOptions\\_](../interfaces/NovoRender.ImageEncodeOptions_.md)\n- [IntensityColorGradientNode](../interfaces/NovoRender.IntensityColorGradientNode.md)\n- [LinearTransform](../interfaces/NovoRender.LinearTransform.md)\n- [MeasureInfo](../interfaces/NovoRender.MeasureInfo.md)\n- [NeutralHighlightParams](../interfaces/NovoRender.NeutralHighlightParams.md)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/namespaces/NovoRender.md", "loc": { "lines": { "from": 35, "to": 48 } } }
    }
  ],
  [
    "463",
    {
      "pageContent": "- [LinearTransform](../interfaces/NovoRender.LinearTransform.md)\n- [MeasureInfo](../interfaces/NovoRender.MeasureInfo.md)\n- [NeutralHighlightParams](../interfaces/NovoRender.NeutralHighlightParams.md)\n- [ObjectDB](../interfaces/NovoRender.ObjectDB.md)\n- [ObjectData](../interfaces/NovoRender.ObjectData.md)\n- [ObjectHighlighter](../interfaces/NovoRender.ObjectHighlighter.md)\n- [ObjectReference](../interfaces/NovoRender.ObjectReference.md)\n- [OrbitControllerParams](../interfaces/NovoRender.OrbitControllerParams.md)\n- [OrthoControllerParams](../interfaces/NovoRender.OrthoControllerParams.md)\n- [OutlineParams](../interfaces/NovoRender.OutlineParams.md)\n- [PerformanceStatistics](../interfaces/NovoRender.PerformanceStatistics.md)\n- [PickInfo](../interfaces/NovoRender.PickInfo.md)\n- [RGBAOptions](../interfaces/NovoRender.RGBAOptions.md)\n- [RenderChanges](../interfaces/NovoRender.RenderChanges.md)\n- [RenderOutput](../interfaces/NovoRender.RenderOutput.md)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/namespaces/NovoRender.md", "loc": { "lines": { "from": 48, "to": 62 } } }
    }
  ],
  [
    "464",
    {
      "pageContent": "- [RGBAOptions](../interfaces/NovoRender.RGBAOptions.md)\n- [RenderChanges](../interfaces/NovoRender.RenderChanges.md)\n- [RenderOutput](../interfaces/NovoRender.RenderOutput.md)\n- [RenderSettings](../interfaces/NovoRender.RenderSettings.md)\n- [Scene](../interfaces/NovoRender.Scene.md)\n- [ScreenSpaceAmbientOcclusionParams](../interfaces/NovoRender.ScreenSpaceAmbientOcclusionParams.md)\n- [SearchOptions](../interfaces/NovoRender.SearchOptions.md)\n- [SearchPattern](../interfaces/NovoRender.SearchPattern.md)\n- [StaticControllerParams](../interfaces/NovoRender.StaticControllerParams.md)\n- [TemporalAntialiasingParams](../interfaces/NovoRender.TemporalAntialiasingParams.md)\n- [TransparentHighlightParams](../interfaces/NovoRender.TransparentHighlightParams.md)\n- [TurntableControllerParams](../interfaces/NovoRender.TurntableControllerParams.md)\n- [View](../interfaces/NovoRender.View.md)",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/namespaces/NovoRender.md", "loc": { "lines": { "from": 62, "to": 74 } } }
    }
  ],
  [
    "465",
    {
      "pageContent": "Type Aliases\n\n### AtLeastOne\n\nƬ **AtLeastOne**<`T`, `U`\\>: `Partial`<`T`\\> & `U`[keyof `U`]\n\n#### Type parameters\n\n| Name | Type |\n| :------ | :------ |\n| `T` | `T` |\n| `U` | { [K in keyof T]: Pick<T, K\\> } |\n\n___\n\n### CameraControllerParams\n\nƬ **CameraControllerParams**: [`StaticControllerParams`](../interfaces/NovoRender.StaticControllerParams.md) \\| [`TurntableControllerParams`](../interfaces/NovoRender.TurntableControllerParams.md) \\| [`OrbitControllerParams`](../interfaces/NovoRender.OrbitControllerParams.md) \\| [`FlightControllerParams`](../interfaces/NovoRender.FlightControllerParams.md) \\| [`OrthoControllerParams`](../interfaces/NovoRender.OrthoControllerParams.md)\n\n___\n\n### ColorRGB\n\nƬ **ColorRGB**: `ReadonlyVec3`\n\nColor expressed as a 3D vector with ranges [0.0 - 1.0] for red, green and blue components respectively.\n\n___\n\n### ColorRGBA\n\nƬ **ColorRGBA**: `ReadonlyVec4`\n\nColor expressed as a 4D vector with ranges [0.0 - 1.0] for red, green, blue and alpha components respectively.\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/namespaces/NovoRender.md", "loc": { "lines": { "from": 76, "to": 111 } } }
    }
  ],
  [
    "466",
    {
      "pageContent": "ColorRGBA\n\nƬ **ColorRGBA**: `ReadonlyVec4`\n\nColor expressed as a 4D vector with ranges [0.0 - 1.0] for red, green, blue and alpha components respectively.\n\n___\n\n### FixedSizeArray\n\nƬ **FixedSizeArray**<`N`, `T`\\>: `N` extends ``0`` ? `never`[] : { `0`: `T` ; `length`: `N`  } & `ReadonlyArray`<`T`\\>\n\nFixed size, read-only array type.\n\n#### Type parameters\n\n| Name | Type |\n| :------ | :------ |\n| `N` | extends `number` |\n| `T` | `T` |\n\n___\n\n### HSLATransformHighlightParams\n\nƬ **HSLATransformHighlightParams**: { `kind`: ``\"hsla\"``  } & [`AtLeastOne`](NovoRender.md#atleastone)<[`HSLAOptions`](../interfaces/NovoRender.HSLAOptions.md)\\>\n\nHue, saturation, lightness, alpha transform highlight parameters\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/namespaces/NovoRender.md", "loc": { "lines": { "from": 111, "to": 140 } } }
    }
  ],
  [
    "467",
    {
      "pageContent": "HighlightParams\n\nƬ **HighlightParams**: [`NeutralHighlightParams`](../interfaces/NovoRender.NeutralHighlightParams.md) \\| [`TransparentHighlightParams`](../interfaces/NovoRender.TransparentHighlightParams.md) \\| [`ColorHighlightParams`](../interfaces/NovoRender.ColorHighlightParams.md) \\| [`RGBATransformHighlightParams`](NovoRender.md#rgbatransformhighlightparams) \\| [`HSLATransformHighlightParams`](NovoRender.md#hslatransformhighlightparams)\n\n___\n\n### ObjectId\n\nƬ **ObjectId**: `number`\n\nInteger index/handle for identifying a single object\n\n___\n\n### ObjectIdArray\n\nƬ **ObjectIdArray**: `ReadonlyArray`<[`ObjectId`](NovoRender.md#objectid)\\>\n\nRead only array of integer indices/handles for identifying a set of objects\n\n___\n\n### PathInfo\n\nƬ **PathInfo**: `Object`\n\n#### Type declaration\n\n| Name | Type |\n| :------ | :------ |\n| `centerDepth` | `number` |\n| `originalIndex` | `number` |\n| `path` | `string` |\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/namespaces/NovoRender.md", "loc": { "lines": { "from": 142, "to": 176 } } }
    }
  ],
  [
    "468",
    {
      "pageContent": "PathInfo\n\nƬ **PathInfo**: `Object`\n\n#### Type declaration\n\n| Name | Type |\n| :------ | :------ |\n| `centerDepth` | `number` |\n| `originalIndex` | `number` |\n| `path` | `string` |\n\n___\n\n### PostEffectParams\n\nƬ **PostEffectParams**: [`GrayscaleParams`](../interfaces/NovoRender.GrayscaleParams.md) \\| [`TemporalAntialiasingParams`](../interfaces/NovoRender.TemporalAntialiasingParams.md) \\| [`ScreenSpaceAmbientOcclusionParams`](../interfaces/NovoRender.ScreenSpaceAmbientOcclusionParams.md) \\| [`OutlineParams`](../interfaces/NovoRender.OutlineParams.md)\n\n___\n\n### RGBATransformHighlightParams\n\nƬ **RGBATransformHighlightParams**: { `kind`: ``\"rgba\"``  } & [`AtLeastOne`](NovoRender.md#atleastone)<[`RGBAOptions`](../interfaces/NovoRender.RGBAOptions.md)\\>\n\nRed, green, blue, alpha transform highlight parameters\n\n___\n\n### RecursivePartial\n\nƬ **RecursivePartial**<`T`\\>: { [P in keyof T]?: RecursivePartial<T[P]\\> }\n\n#### Type parameters\n\n| Name |\n| :------ |\n| `T` |\n\n___",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/namespaces/NovoRender.md", "loc": { "lines": { "from": 176, "to": 214 } } }
    }
  ],
  [
    "469",
    {
      "pageContent": "RecursivePartial\n\nƬ **RecursivePartial**<`T`\\>: { [P in keyof T]?: RecursivePartial<T[P]\\> }\n\n#### Type parameters\n\n| Name |\n| :------ |\n| `T` |\n\n___\n\n### RecursiveReadonly\n\nƬ **RecursiveReadonly**<`T`\\>: { readonly [P in keyof T]: RecursiveReadonly<T[P]\\> }\n\n#### Type parameters\n\n| Name |\n| :------ |\n| `T` |\n\n___\n\n### RenderSettingsParams\n\nƬ **RenderSettingsParams**: `Partial`<`Readonly`<[`RenderSettings`](../interfaces/NovoRender.RenderSettings.md)\\>\\>\n\nA partial, read only variant of render settings for initial settings and updates.",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/namespaces/NovoRender.md", "loc": { "lines": { "from": 214, "to": 242 } } }
    }
  ],
  ["470", { "pageContent": "Functions", "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/namespaces/NovoRender.md", "loc": { "lines": { "from": 244, "to": 244 } } } }],
  [
    "471",
    {
      "pageContent": "createAPI\n\n▸ **createAPI**(`options?`): [`API`](../interfaces/NovoRender.API.md)\n\nCreate an instance of the NovoRender API.\n\n**`Throws`**\n\nError if current browser and device has insufficient 3D rendering capabilities.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `options?` | [`APIOptions`](../interfaces/NovoRender.APIOptions.md) | Custom settings [APIOptions](../interfaces/NovoRender.APIOptions.md) to create API. |\n\n#### Returns\n\n[`API`](../interfaces/NovoRender.API.md)\n\nAn initialized API object\n\n▸ **createAPI**(`options?`): [`API`](../interfaces/NovoRender.API.md)\n\nCreate an instance of the NovoRender API.\n\n**`Throws`**\n\nError if current browser and device has insufficient 3D rendering capabilities.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `options?` | [`APIOptions`](../interfaces/NovoRender.APIOptions.md) | Custom settings [APIOptions](../interfaces/NovoRender.APIOptions.md) to create API. |",
      "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/namespaces/NovoRender.md", "loc": { "lines": { "from": 246, "to": 280 } } }
    }
  ],
  ["472", { "pageContent": "Returns\n\n[`API`](../interfaces/NovoRender.API.md)\n\nAn initialized API object", "metadata": { "source": "/media/Datas/novorender/docs/docs/webgl-api/namespaces/NovoRender.md", "loc": { "lines": { "from": 280, "to": 284 } } } }],
  [
    "473",
    {
      "pageContent": "import moduleInterface from \"!!./snippet.ts?raw\";\nimport pinhole from \"!!./pick.ts?raw\";\nimport ortho from \"!!./pick.ts?raw\";\nimport { demo } from \"../../misc\";\nimport * as NovoRender from \"@novorender/webgl-api\";\nimport type { SnippetModule } from \"./module\";\n\nexport const objectSelection = {\n  ...demo(\"cameras\", \"pinhole\", pinhole),\n  ...demo(\"cameras\", \"ortho\", ortho),\n};\n\n// this function will run entire demo and call into playground snippet for editable code.\nasync function run(canvas: HTMLCanvasElement, snippet: SnippetModule, state: { readonly exit: boolean }) {\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n  const noOffscreenCanvas = !(\"OffscreenCanvas\" in self);\n  const webglAPI = NovoRender.createAPI({ noOffscreenCanvas });\n  const view = await webglAPI.createView({ background: { color: [0, 0, 0.1, 1] } }, canvas);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/cameras/index.ts", "loc": { "lines": { "from": 1, "to": 18 } } }
    }
  ],
  [
    "474",
    {
      "pageContent": "// we interact with snippet module here, but could also interact elsewhere with other function, e.g. in render loop or on mouse clicks etc.\n  view.camera.controller = snippet.init(canvas, webglAPI);\n\n  view.scene = await webglAPI.loadScene(NovoRender.WellKnownSceneUrls.empty);\n  for (;;) {\n    if (state.exit) break;\n    function cb() {\n      if (state.exit) view.invalidateCamera(); // force a re-render to exit the render() function (TODO: make it a return value instead?)\n    }\n\n    // handle canvas resizes\n    const { clientWidth, clientHeight } = canvas;\n    view.applySettings({\n      display: { width: clientWidth, height: clientHeight },\n    });\n    const output = await view.render(cb);\n    {\n      const image = await output.getImage();\n      if (image) {\n        ctx?.transferFromImageBitmap(image);\n      }\n      image?.close();\n    }\n  }\n\n  // clean up here\n  webglAPI.dispose();\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/cameras/index.ts", "loc": { "lines": { "from": 20, "to": 47 } } }
    }
  ],
  [
    "475",
    {
      "pageContent": "// This file should be imported into the playground\nimport * as NovoRender from \"@novorender/webgl-api\";\n\nexport interface InitInput {\n  readonly canvas: HTMLCanvasElement;\n  readonly webglAPI: NovoRender.API;\n  readonly view: NovoRender.View;\n}\n\nexport interface InitOutput {\n  readonly controller: NovoRender.CameraController;\n}\n\nexport interface SnippetModule {\n  init(canvas: HTMLCanvasElement, webglAPI: NovoRender.API): NovoRender.CameraController;\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/cameras/module.ts", "loc": { "lines": { "from": 1, "to": 16 } } }
    }
  ],
  [
    "476",
    {
      "pageContent": "// ideally a snippet looks like this, while still being type checked against the module interface.\nimport type * as NovoRender from \"@novorender/webgl-api\"; // should we only use type imports here and pass everything else as params?\nexport function init(canvas: HTMLCanvasElement, webglAPI: NovoRender.API) {\n  return webglAPI.createCameraController({ kind: \"ortho\" }, canvas);\n}\n\n// Below is an alternative syntax that could be used to enforce module interface, which might be easier to do.\n// The import and export const statements should be omitted, leaving only the \"inner\" parts of the objects to be edited.\n// Quite possibly, we could drag in all imports from the snippet.ts file itself, so that everything is already in scope and no import statements needed in the snippet itself.",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/cameras/orhto.ts", "loc": { "lines": { "from": 1, "to": 9 } } }
    }
  ],
  [
    "477",
    {
      "pageContent": "// import type { SnippetModule } from \"./snippet\";\n// export const snippet: SnippetModule = {\n//     init(canvas: HTMLCanvasElement, webglAPI: NovoRender.API) {\n//         return webglAPI.createCameraController({ kind: \"ortho\" }, canvas);\n//     }\n// };",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/cameras/orhto.ts", "loc": { "lines": { "from": 11, "to": 16 } } }
    }
  ],
  [
    "478",
    {
      "pageContent": "// should we only use type imports here and pass everything else as params?\nimport type * as NovoRender from \"@novorender/webgl-api\";\n\nexport async function init(canvas: HTMLCanvasElement, webglAPI: NovoRender.API) {\n  // provide a camera controller\n  const controller = webglAPI.createCameraController({ kind: \"orbit\" }, canvas);\n  return { controller } as const;\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/cameras/pinhole.ts", "loc": { "lines": { "from": 1, "to": 8 } } }
    }
  ],
  [
    "479",
    {
      "pageContent": "// HiddenRangeStarted\nimport * as WebglApi from \"@novorender/webgl-api\";\nimport * as MeasureApi from \"@novorender/measure-api\";\nimport * as DataJsApi from \"@novorender/data-js-api\";\nimport * as GlMatrix from \"gl-matrix\";\n\nexport interface IParams {\n  webglApi: typeof WebglApi;\n  measureApi: typeof MeasureApi;\n  dataJsApi: typeof DataJsApi;\n  glMatrix: typeof GlMatrix;\n  canvas: HTMLCanvasElement;\n  canvas2D: HTMLCanvasElement;\n  previewCanvas: HTMLCanvasElement;\n}\n\n// HiddenRangeEnded\nexport async function main({ webglApi, canvas }: IParams) {\n  // initialize the webgl api\n  const api = webglApi.createAPI();\n\n  // create a view\n  const view = await api.createView({ background: { color: [0, 0, 0.1, 1] } }, canvas);\n\n  // load a predefined scene into the view, available scenes are cube, oilrig, condos\n  const scene = (view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.condos));",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/box.ts", "loc": { "lines": { "from": 1, "to": 26 } } }
    }
  ],
  [
    "480",
    {
      "pageContent": "// load a predefined scene into the view, available scenes are cube, oilrig, condos\n  const scene = (view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.condos));\n\n  // provide a camera controller, available controller types are static, orbit, flight and turntable\n  view.camera.controller = api.createCameraController({ kind: \"orbit\" }, canvas);\n\n  // get center of scene\n  const [cx, cy, cz] = scene.boundingSphere.center;\n\n  // apply clipping volume\n  view.applySettings({\n    clippingVolume: {\n      enabled: true,\n      mode: \"union\",\n      planes: [\n        [-1, 0, 0, cx - 5], // left plane\n        [1, 0, 0, -(cx + 5)], // right plane\n        [0, -1, 0, cy + 4], // bottom plane\n        [0, 1, 0, -(cy + 8)], // top plane\n        [0, 0, -1, cz - 5], // front plane\n        [0, 0, 1, -(cz + 5)], // back plane\n      ],\n    },\n  });\n\n  // create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/box.ts", "loc": { "lines": { "from": 26, "to": 52 } } }
    }
  ],
  [
    "481",
    {
      "pageContent": "// create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: { width: canvas.width, height: canvas.height },\n      });\n    }\n  }).observe(canvas);\n\n  // render loop\n  while (true) {\n    // Render frame\n    const output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    (output as any).dispose();\n  }\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/box.ts", "loc": { "lines": { "from": 52, "to": 82 } } }
    }
  ],
  [
    "482",
    {
      "pageContent": "// HiddenRangeStarted\nimport * as WebglApi from \"@novorender/webgl-api\";\nimport * as MeasureApi from \"@novorender/measure-api\";\nimport * as DataJsApi from \"@novorender/data-js-api\";\nimport * as GlMatrix from \"gl-matrix\";\n\nexport interface IParams {\n  webglApi: typeof WebglApi;\n  measureApi: typeof MeasureApi;\n  dataJsApi: typeof DataJsApi;\n  glMatrix: typeof GlMatrix;\n  canvas: HTMLCanvasElement;\n  canvas2D: HTMLCanvasElement;\n  previewCanvas: HTMLCanvasElement;\n}\n\n// HiddenRangeEnded\nexport async function main({ webglApi, canvas }: IParams) {\n  // initialize the webgl api\n  const api = webglApi.createAPI();\n\n  // create a view\n  const view = await api.createView({ background: { color: [0, 0, 0.1, 1] } }, canvas);\n\n  // load a predefined scene into the view, available scenes are cube, oilrig, condos\n  const scene = (view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.condos));",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/dual.ts", "loc": { "lines": { "from": 1, "to": 26 } } }
    }
  ],
  [
    "483",
    {
      "pageContent": "// load a predefined scene into the view, available scenes are cube, oilrig, condos\n  const scene = (view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.condos));\n\n  // provide a camera controller, available controller types are static, orbit, flight and turntable\n  view.camera.controller = api.createCameraController({ kind: \"orbit\" }, canvas);\n\n  // get center of scene\n  const [cx, cy, cz] = scene.boundingSphere.center;\n\n  // apply clipping volume\n  view.applySettings({\n    clippingVolume: {\n      enabled: true,\n      mode: \"union\",\n      planes: [\n        [1, 0, 0, -cx],\n        [0, 1, 0, -cy],\n      ],\n    },\n  });\n\n  // create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/dual.ts", "loc": { "lines": { "from": 26, "to": 48 } } }
    }
  ],
  [
    "484",
    {
      "pageContent": "// create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: { width: canvas.width, height: canvas.height },\n      });\n    }\n  }).observe(canvas);\n\n  // render loop\n  while (true) {\n    // Render frame\n    const output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    (output as any).dispose();\n  }\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/dual.ts", "loc": { "lines": { "from": 48, "to": 78 } } }
    }
  ],
  [
    "485",
    {
      "pageContent": "// HiddenRangeStarted\nimport * as WebglApi from \"@novorender/webgl-api\";\nimport * as MeasureApi from \"@novorender/measure-api\";\nimport * as DataJsApi from \"@novorender/data-js-api\";\nimport * as GlMatrix from \"gl-matrix\";\n\nexport interface IParams {\n  webglApi: typeof WebglApi;\n  measureApi: typeof MeasureApi;\n  dataJsApi: typeof DataJsApi;\n  glMatrix: typeof GlMatrix;\n  canvas: HTMLCanvasElement;\n  canvas2D: HTMLCanvasElement;\n  previewCanvas: HTMLCanvasElement;\n}\n\n// HiddenRangeEnded\nexport async function main({ webglApi, canvas }: IParams) {\n  // initialize the webgl api\n  const api = webglApi.createAPI();\n\n  // create a view\n  const view = await api.createView({ background: { color: [0, 0, 0.1, 1] } }, canvas);\n\n  // load a predefined scene into the view, available scenes are cube, oilrig, condos\n  const scene = (view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.condos));",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/flipped.ts", "loc": { "lines": { "from": 1, "to": 26 } } }
    }
  ],
  [
    "486",
    {
      "pageContent": "// load a predefined scene into the view, available scenes are cube, oilrig, condos\n  const scene = (view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.condos));\n\n  // provide a camera controller, available controller types are static, orbit, flight and turntable\n  view.camera.controller = api.createCameraController({ kind: \"orbit\" }, canvas);\n\n  // get center of scene\n  const [cx, cy, cz] = scene.boundingSphere.center;\n\n  // apply clipping volume\n  view.applySettings({\n    clippingVolume: {\n      enabled: true,\n      mode: \"union\",\n      planes: [\n        [-1, -0, -0, +cx], // flip plane\n      ],\n    },\n  });\n\n  // create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/flipped.ts", "loc": { "lines": { "from": 26, "to": 47 } } }
    }
  ],
  [
    "487",
    {
      "pageContent": "// create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: { width: canvas.width, height: canvas.height },\n      });\n    }\n  }).observe(canvas);\n\n  // render loop\n  while (true) {\n    // Render frame\n    const output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    (output as any).dispose();\n  }\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/flipped.ts", "loc": { "lines": { "from": 47, "to": 77 } } }
    }
  ],
  [
    "488",
    {
      "pageContent": "import single from \"!!./single.ts?raw\";\nimport offset from \"!!./offset.ts?raw\";\nimport flipped from \"!!./flipped.ts?raw\";\nimport rotated from \"!!./rotated.ts?raw\";\nimport dual from \"!!./dual.ts?raw\";\nimport slab from \"!!./slab.ts?raw\";\nimport slab_inv from \"!!./slab_inv.ts?raw\";\nimport box from \"!!./box.ts?raw\";\nimport { demo } from \"../../misc\";",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/index.ts", "loc": { "lines": { "from": 1, "to": 9 } } }
    }
  ],
  [
    "489",
    {
      "pageContent": "export const clippingVolumes = {\n  ...demo(\"clipping_volumes\", \"single\", single, {}, \"Simple clipping volume with a single plane along the yz axes, effectively clipping everything to the right of center.\"),\n  ...demo(\"clipping_volumes\", \"offset\", offset, {}, \"We used the center of the scene (which is far from origo) to position the plane.\"),\n  ...demo(\"clipping_volumes\", \"flipped\", flipped, {}, \"Flipping the plane by flipping the direction of the normal.\"),\n  ...demo(\"clipping_volumes\", \"rotated\", rotated, {}, \"Single plane, rotated.\"),\n  ...demo(\"clipping_volumes\", \"dual\", dual, {}, \"More complex clipping volume with an additional plane along the xz axes, effectively clipping everything to the right and above center.\"),\n  ...demo(\"clipping_volumes\", \"slab\", slab, {}, \"A perhaps more useful volume is a slab, consisting of a top and bottom plane, but otherwise extending into infinity.\"),",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/index.ts", "loc": { "lines": { "from": 11, "to": 17 } } }
    }
  ],
  [
    "490",
    {
      "pageContent": "...demo(\"clipping_volumes\", \"slab\", slab, {}, \"A perhaps more useful volume is a slab, consisting of a top and bottom plane, but otherwise extending into infinity.\"),\n  ...demo(\"clipping_volumes\", \"slab_inv\", slab_inv, {}, \"Clip everything inside of the volume, rather than outside, simply flip the planes (negate all elements) and change the combination mode.\"),\n  ...demo(\"clipping_volumes\", \"box\", box, {}, \"Axis aligned clipping box.\"),\n};",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/index.ts", "loc": { "lines": { "from": 17, "to": 20 } } }
    }
  ],
  [
    "491",
    {
      "pageContent": "// HiddenRangeStarted\nimport * as WebglApi from \"@novorender/webgl-api\";\nimport * as MeasureApi from \"@novorender/measure-api\";\nimport * as DataJsApi from \"@novorender/data-js-api\";\nimport * as GlMatrix from \"gl-matrix\";\n\nexport interface IParams {\n  webglApi: typeof WebglApi;\n  measureApi: typeof MeasureApi;\n  dataJsApi: typeof DataJsApi;\n  glMatrix: typeof GlMatrix;\n  canvas: HTMLCanvasElement;\n  canvas2D: HTMLCanvasElement;\n  previewCanvas: HTMLCanvasElement;\n}\n\n// HiddenRangeEnded\nexport async function main({ webglApi, canvas }: IParams) {\n  // initialize the webgl api\n  const api = webglApi.createAPI();\n\n  // create a view\n  const view = await api.createView({ background: { color: [0, 0, 0.1, 1] } }, canvas);\n\n  // load a predefined scene into the view, available scenes are cube, oilrig, condos\n  const scene = (view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.condos));",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/offset.ts", "loc": { "lines": { "from": 1, "to": 26 } } }
    }
  ],
  [
    "492",
    {
      "pageContent": "// load a predefined scene into the view, available scenes are cube, oilrig, condos\n  const scene = (view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.condos));\n\n  // provide a camera controller, available controller types are static, orbit, flight and turntable\n  view.camera.controller = api.createCameraController({ kind: \"orbit\" }, canvas);\n\n  // get center of scene\n  const [cx, cy, cz] = scene.boundingSphere.center;\n\n  // apply clipping volume\n  view.applySettings({\n    clippingVolume: {\n      enabled: true,\n      mode: \"union\",\n      planes: [\n        [1, 0, 0, -(cx + 5)], // offset plane\n      ],\n    },\n  });\n\n  // create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/offset.ts", "loc": { "lines": { "from": 26, "to": 47 } } }
    }
  ],
  [
    "493",
    {
      "pageContent": "// create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: { width: canvas.width, height: canvas.height },\n      });\n    }\n  }).observe(canvas);\n\n  // render loop\n  while (true) {\n    // Render frame\n    const output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    (output as any).dispose();\n  }\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/offset.ts", "loc": { "lines": { "from": 47, "to": 77 } } }
    }
  ],
  [
    "494",
    {
      "pageContent": "// HiddenRangeStarted\nimport * as WebglApi from \"@novorender/webgl-api\";\nimport * as MeasureApi from \"@novorender/measure-api\";\nimport * as DataJsApi from \"@novorender/data-js-api\";\nimport * as GlMatrix from \"gl-matrix\";\n\nexport interface IParams {\n  webglApi: typeof WebglApi;\n  measureApi: typeof MeasureApi;\n  dataJsApi: typeof DataJsApi;\n  glMatrix: typeof GlMatrix;\n  canvas: HTMLCanvasElement;\n  canvas2D: HTMLCanvasElement;\n  previewCanvas: HTMLCanvasElement;\n}\n\n// HiddenRangeEnded\nexport async function main({ webglApi, canvas }: IParams) {\n  // initialize the webgl api\n  const api = webglApi.createAPI();\n\n  // create a view\n  const view = await api.createView({ background: { color: [0, 0, 0.1, 1] } }, canvas);\n\n  // load a predefined scene into the view, available scenes are cube, oilrig, condos\n  const scene = (view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.condos));",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/rotated.ts", "loc": { "lines": { "from": 1, "to": 26 } } }
    }
  ],
  [
    "495",
    {
      "pageContent": "// load a predefined scene into the view, available scenes are cube, oilrig, condos\n  const scene = (view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.condos));\n\n  // provide a camera controller, available controller types are static, orbit, flight and turntable\n  view.camera.controller = api.createCameraController({ kind: \"orbit\" }, canvas);\n\n  // get center of scene\n  const [cx, cy, cz] = scene.boundingSphere.center;\n\n  // compute plane normal\n  const angle = (45 / 180) * Math.PI; // 45 deg rotation angle as radians\n  const nx = Math.cos(angle);\n  const ny = Math.sin(angle);\n  const nz = 0;\n\n  // compute plane offset\n  const o = -(cx * nx + cy * ny + cz * nz);\n\n  // apply clipping volume\n  view.applySettings({\n    clippingVolume: {\n      enabled: true,\n      mode: \"union\",\n      planes: [\n        [nx, ny, nz, o], // rotate plane around z-axis\n      ],\n    },\n  });\n\n  // create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/rotated.ts", "loc": { "lines": { "from": 26, "to": 56 } } }
    }
  ],
  [
    "496",
    {
      "pageContent": "// create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: { width: canvas.width, height: canvas.height },\n      });\n    }\n  }).observe(canvas);\n\n  // render loop\n  while (true) {\n    // Render frame\n    const output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    (output as any).dispose();\n  }\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/rotated.ts", "loc": { "lines": { "from": 56, "to": 86 } } }
    }
  ],
  [
    "497",
    {
      "pageContent": "// HiddenRangeStarted\nimport * as WebglApi from \"@novorender/webgl-api\";\nimport * as MeasureApi from \"@novorender/measure-api\";\nimport * as DataJsApi from \"@novorender/data-js-api\";\nimport * as GlMatrix from \"gl-matrix\";\n\nexport interface IParams {\n  webglApi: typeof WebglApi;\n  measureApi: typeof MeasureApi;\n  dataJsApi: typeof DataJsApi;\n  glMatrix: typeof GlMatrix;\n  canvas: HTMLCanvasElement;\n  canvas2D: HTMLCanvasElement;\n  previewCanvas: HTMLCanvasElement;\n}\n\n// HiddenRangeEnded\nexport async function main({ webglApi, canvas }: IParams) {\n  // initialize the webgl api\n  const api = webglApi.createAPI();\n\n  // create a view\n  const view = await api.createView({ background: { color: [0, 0, 0.1, 1] } }, canvas);\n\n  // load a predefined scene into the view, available scenes are cube, oilrig, condos\n  const scene = (view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.condos));",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/single.ts", "loc": { "lines": { "from": 1, "to": 26 } } }
    }
  ],
  [
    "498",
    {
      "pageContent": "// load a predefined scene into the view, available scenes are cube, oilrig, condos\n  const scene = (view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.condos));\n\n  // provide a camera controller, available controller types are static, orbit, flight and turntable\n  view.camera.controller = api.createCameraController({ kind: \"orbit\" }, canvas);\n\n  // get center of scene\n  const [cx, cy, cz] = scene.boundingSphere.center;\n\n  // apply clipping volume\n  view.applySettings({\n    clippingVolume: {\n      enabled: true,\n      mode: \"union\",\n      planes: [[1, 0, 0, -cx]],\n    },\n  });\n\n  // create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/single.ts", "loc": { "lines": { "from": 26, "to": 45 } } }
    }
  ],
  [
    "499",
    {
      "pageContent": "// create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: { width: canvas.width, height: canvas.height },\n      });\n    }\n  }).observe(canvas);\n\n  while (true) {\n    // render loop\n    // Render frame\n    const output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    (output as any).dispose();\n  }\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/single.ts", "loc": { "lines": { "from": 45, "to": 75 } } }
    }
  ],
  [
    "500",
    {
      "pageContent": "// HiddenRangeStarted\nimport * as WebglApi from \"@novorender/webgl-api\";\nimport * as MeasureApi from \"@novorender/measure-api\";\nimport * as DataJsApi from \"@novorender/data-js-api\";\nimport * as GlMatrix from \"gl-matrix\";\n\nexport interface IParams {\n  webglApi: typeof WebglApi;\n  measureApi: typeof MeasureApi;\n  dataJsApi: typeof DataJsApi;\n  glMatrix: typeof GlMatrix;\n  canvas: HTMLCanvasElement;\n  canvas2D: HTMLCanvasElement;\n  previewCanvas: HTMLCanvasElement;\n}\n\n// HiddenRangeEnded\nexport async function main({ webglApi, canvas }: IParams) {\n  // initialize the webgl api\n  const api = webglApi.createAPI();\n\n  // create a view\n  const view = await api.createView({ background: { color: [0, 0, 0.1, 1] } }, canvas);\n\n  // load a predefined scene into the view, available scenes are cube, oilrig, condos\n  const scene = (view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.condos));",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/slab.ts", "loc": { "lines": { "from": 1, "to": 26 } } }
    }
  ],
  [
    "501",
    {
      "pageContent": "// load a predefined scene into the view, available scenes are cube, oilrig, condos\n  const scene = (view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.condos));\n\n  // provide a camera controller, available controller types are static, orbit, flight and turntable\n  view.camera.controller = api.createCameraController({ kind: \"orbit\" }, canvas);\n\n  // get center of scene\n  const [cx, cy, cz] = scene.boundingSphere.center;\n\n  // apply clipping volume\n  view.applySettings({\n    clippingVolume: {\n      enabled: true,\n      mode: \"union\",\n      planes: [\n        [0, -1, 0, cy + 4], // bottom plane\n        [0, 1, 0, -(cy + 8)], // top plane\n      ],\n    },\n  });\n\n  // create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/slab.ts", "loc": { "lines": { "from": 26, "to": 48 } } }
    }
  ],
  [
    "502",
    {
      "pageContent": "// create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: { width: canvas.width, height: canvas.height },\n      });\n    }\n  }).observe(canvas);\n\n  // render loop\n  while (true) {\n    // Render frame\n    const output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    (output as any).dispose();\n  }\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/slab.ts", "loc": { "lines": { "from": 48, "to": 78 } } }
    }
  ],
  [
    "503",
    {
      "pageContent": "// HiddenRangeStarted\nimport * as WebglApi from \"@novorender/webgl-api\";\nimport * as MeasureApi from \"@novorender/measure-api\";\nimport * as DataJsApi from \"@novorender/data-js-api\";\nimport * as GlMatrix from \"gl-matrix\";\n\nexport interface IParams {\n  webglApi: typeof WebglApi;\n  measureApi: typeof MeasureApi;\n  dataJsApi: typeof DataJsApi;\n  glMatrix: typeof GlMatrix;\n  canvas: HTMLCanvasElement;\n  canvas2D: HTMLCanvasElement;\n  previewCanvas: HTMLCanvasElement;\n}\n\n// HiddenRangeEnded\nexport async function main({ webglApi, canvas }: IParams) {\n  // initialize the webgl api\n  const api = webglApi.createAPI();\n\n  // create a view\n  const view = await api.createView({ background: { color: [0, 0, 0.1, 1] } }, canvas);\n\n  // load a predefined scene into the view, available scenes are cube, oilrig, condos\n  const scene = (view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.condos));",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/slab_inv.ts", "loc": { "lines": { "from": 1, "to": 26 } } }
    }
  ],
  [
    "504",
    {
      "pageContent": "// load a predefined scene into the view, available scenes are cube, oilrig, condos\n  const scene = (view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.condos));\n\n  // provide a camera controller, available controller types are static, orbit, flight and turntable\n  view.camera.controller = api.createCameraController({ kind: \"orbit\" }, canvas);\n\n  // get center of scene\n  const [cx, cy, cz] = scene.boundingSphere.center;\n\n  // apply clipping volume\n  view.applySettings({\n    clippingVolume: {\n      enabled: true,\n      mode: \"intersection\",\n      planes: [\n        [0, 1, 0, -(cy + 4)], // bottom plane\n        [0, -1, 0, cy + 8], // top plane\n      ],\n    },\n  });\n\n  // create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/slab_inv.ts", "loc": { "lines": { "from": 26, "to": 48 } } }
    }
  ],
  [
    "505",
    {
      "pageContent": "// create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: { width: canvas.width, height: canvas.height },\n      });\n    }\n  }).observe(canvas);\n\n  // render loop\n  while (true) {\n    // Render frame\n    const output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    (output as any).dispose();\n  }\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/clipping_volumes/slab_inv.ts", "loc": { "lines": { "from": 48, "to": 78 } } }
    }
  ],
  [
    "506",
    {
      "pageContent": "// HiddenRangeStarted\nimport * as WebglApi from \"@novorender/webgl-api\";\nimport * as MeasureApi from \"@novorender/measure-api\";\nimport * as DataJsApi from \"@novorender/data-js-api\";\nimport * as GlMatrix from \"gl-matrix\";\nimport type { DrawPart, DrawProduct } from \"@novorender/measure-api\";\n\nexport interface IParams {\n  webglApi: typeof WebglApi;\n  measureApi: typeof MeasureApi;\n  dataJsApi: typeof DataJsApi;\n  glMatrix: typeof GlMatrix;\n  canvas: HTMLCanvasElement;\n  canvas2D: HTMLCanvasElement;\n  previewCanvas: HTMLCanvasElement;\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/drawing2D/drawing_2d.ts", "loc": { "lines": { "from": 1, "to": 16 } } }
    }
  ],
  [
    "507",
    {
      "pageContent": "// HiddenRangeEnded\nasync function draw2d(\n  _measureApi: MeasureApi.MeasureAPI,\n  view: WebglApi.View,\n  measureScene: MeasureApi.MeasureScene,\n  measureEntity1: MeasureApi.MeasureEntity | undefined,\n  measureEntity2: MeasureApi.MeasureEntity | undefined,\n  context2D: CanvasRenderingContext2D | null,\n  canvas2D: HTMLCanvasElement,\n  result: MeasureApi.DuoMeasurementValues | undefined,\n  glMatrix: typeof GlMatrix\n) {\n  //Await all draw objects first to avoid flickering\n  const [drawResult, drawProduct1, drawProduct2] = await Promise.all([\n    result && _measureApi.getDrawMeasureEntity(view, measureScene, result),\n    measureEntity1 && _measureApi.getDrawMeasureEntity(view, measureScene, measureEntity1),\n    measureEntity2 && _measureApi.getDrawMeasureEntity(view, measureScene, measureEntity2),\n  ]);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/drawing2D/drawing_2d.ts", "loc": { "lines": { "from": 18, "to": 35 } } }
    }
  ],
  [
    "508",
    {
      "pageContent": "//Extract needed camera settings\n  const { camera } = view;\n  const cameraDirection = glMatrix.vec3.transformQuat(glMatrix.vec3.create(), glMatrix.vec3.fromValues(0, 0, -1), camera.rotation);\n  const camSettings = { pos: camera.position, dir: cameraDirection };\n\n  if (context2D) {\n    context2D.clearRect(0, 0, canvas2D.width, canvas2D.height);\n\n    //Draw result in green, all lines use 3 pixel width\n    if (drawResult) {\n      drawProduct(context2D as CanvasRenderingContext2D, camSettings, drawResult, { lineColor: \"green\" }, 3, glMatrix);\n    }\n\n    //Draw first object with yellow line and blue fill\n    if (drawProduct1) {\n      drawProduct(context2D as CanvasRenderingContext2D, camSettings, drawProduct1, { lineColor: \"yellow\", fillColor: \"blue\" }, 3, glMatrix);\n    }",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/drawing2D/drawing_2d.ts", "loc": { "lines": { "from": 37, "to": 53 } } }
    }
  ],
  [
    "509",
    {
      "pageContent": "//Draw second object with blue lines and yellow fill\n    if (drawProduct2) {\n      drawProduct(context2D as CanvasRenderingContext2D, camSettings, drawProduct2, { lineColor: \"blue\", fillColor: \"yellow\" }, 3, glMatrix);\n    }\n  }\n}\n\n// HiddenRangeStarted\n// Below are utility functions copied from our frontend (https://github.com/novorender/novoweb/blob/develop/src/features/engine2D/utils.ts)\nexport interface ColorSettings {\n  lineColor?: string | CanvasGradient;\n  fillColor?: string;\n  pointColor?: string | { start: string; middle: string; end: string };\n  outlineColor?: string;\n  complexCylinder?: boolean;\n}\n\nexport interface TextSettings {\n  type: \"distance\" | \"center\";\n  unit?: string;\n  customText?: string[];\n}\n\nexport interface CameraSettings {\n  pos: GlMatrix.ReadonlyVec3;\n  dir: GlMatrix.ReadonlyVec3;\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/drawing2D/drawing_2d.ts", "loc": { "lines": { "from": 55, "to": 81 } } }
    }
  ],
  [
    "510",
    {
      "pageContent": "export function drawProduct(ctx: CanvasRenderingContext2D, camera: CameraSettings, product: DrawProduct, colorSettings: ColorSettings, pixelWidth: number, glMatrix: typeof GlMatrix) {\n  for (const obj of product.objects) {\n    if (colorSettings.complexCylinder && obj.kind === \"cylinder\" && obj.parts.length === 3) {\n      let startCol = \"red\";\n      let endCol = \"lime\";\n      const cylinderLine = obj.parts[0];\n      if (cylinderLine.elevation && cylinderLine.vertices2D) {\n        if (cylinderLine.elevation.from > cylinderLine.elevation.to) {\n          const tmp = startCol;\n          startCol = endCol;\n          endCol = tmp;\n        }\n        const gradX = glMatrix.vec2.fromValues(cylinderLine.vertices2D[0][0], cylinderLine.vertices2D[1][0]);\n        const gradY = glMatrix.vec2.fromValues(cylinderLine.vertices2D[0][1], cylinderLine.vertices2D[1][1]);\n        const gradient = ctx.createLinearGradient(gradX[0], gradY[0], gradX[1], gradY[1]);\n        gradient.addColorStop(0, startCol);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/drawing2D/drawing_2d.ts", "loc": { "lines": { "from": 83, "to": 98 } } }
    }
  ],
  [
    "511",
    {
      "pageContent": "const gradient = ctx.createLinearGradient(gradX[0], gradY[0], gradX[1], gradY[1]);\n        gradient.addColorStop(0, startCol);\n        gradient.addColorStop(1, endCol);\n        drawPart(ctx, camera, cylinderLine, { lineColor: gradient, outlineColor: \"rgba(80, 80, 80, .8)\" }, pixelWidth, glMatrix);\n      }",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/drawing2D/drawing_2d.ts", "loc": { "lines": { "from": 98, "to": 102 } } }
    }
  ],
  [
    "512",
    {
      "pageContent": "for (let i = 1; i < 3; ++i) {\n        const col = i === 1 ? startCol : endCol;\n        drawPart(ctx, camera, obj.parts[i], { lineColor: col, outlineColor: \"rgba(80, 80, 80, .8)\" }, pixelWidth, glMatrix);\n      }\n    } else {\n      obj.parts.forEach((part) => {\n        drawPart(ctx, camera, part, colorSettings, pixelWidth, glMatrix);\n      });\n    }\n  }\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/drawing2D/drawing_2d.ts", "loc": { "lines": { "from": 104, "to": 114 } } }
    }
  ],
  [
    "513",
    {
      "pageContent": "export function drawPart(ctx: CanvasRenderingContext2D, camera: CameraSettings, part: DrawPart, colorSettings: ColorSettings, pixelWidth: number, glMatrix: typeof GlMatrix, textSettings?: TextSettings): boolean {\n  if (part.vertices2D) {\n    ctx.lineWidth = pixelWidth;\n    ctx.strokeStyle = colorSettings.lineColor ?? \"black\";\n    ctx.fillStyle = colorSettings.fillColor ?? \"transparent\";\n    if (part.drawType === \"angle\" && part.vertices2D.length === 3 && part.text) {\n      return drawAngle(ctx, camera, part, glMatrix);\n    } else if (part.drawType === \"lines\" || part.drawType === \"filled\") {\n      return drawLinesOrPolygon(ctx, part, colorSettings, glMatrix, textSettings);\n    } else if (part.drawType === \"vertex\") {\n      return drawPoints(ctx, part, colorSettings);\n    }\n  }\n  return false;\n}\n\nfunction drawAngle(ctx: CanvasRenderingContext2D, camera: CameraSettings, part: DrawPart, glMatrix: typeof GlMatrix) {\n  const { vec2, vec3 } = glMatrix;",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/drawing2D/drawing_2d.ts", "loc": { "lines": { "from": 116, "to": 133 } } }
    }
  ],
  [
    "514",
    {
      "pageContent": "function drawAngle(ctx: CanvasRenderingContext2D, camera: CameraSettings, part: DrawPart, glMatrix: typeof GlMatrix) {\n  const { vec2, vec3 } = glMatrix;\n\n  if (part.vertices2D) {\n    ctx.fillStyle = \"transparent\";\n    const anglePoint = part.vertices2D[0];\n    const fromP = part.vertices2D[1];\n    const toP = part.vertices2D[2];\n    const d0 = vec2.sub(vec2.create(), fromP, anglePoint);\n    const d1 = vec2.sub(vec2.create(), toP, anglePoint);\n    const l0 = vec2.len(d0);\n    const l1 = vec2.len(d1);\n    const camDist = vec3.distance(camera.pos, part.vertices3D[0]);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/drawing2D/drawing_2d.ts", "loc": { "lines": { "from": 133, "to": 145 } } }
    }
  ],
  [
    "515",
    {
      "pageContent": "const dirA = vec3.sub(vec3.create(), part.vertices3D[1], part.vertices3D[0]);\n    vec3.normalize(dirA, dirA);\n    const dirB = vec3.sub(vec3.create(), part.vertices3D[2], part.vertices3D[0]);\n    vec3.normalize(dirB, dirB);\n    const dirCamA = vec3.sub(vec3.create(), part.vertices3D[1], camera.pos);\n    const dirCamB = vec3.sub(vec3.create(), part.vertices3D[2], camera.pos);\n    const dirCamP = vec3.sub(vec3.create(), part.vertices3D[0], camera.pos);\n    const norm = vec3.cross(vec3.create(), dirA, dirB);\n    vec3.normalize(dirCamA, dirCamA);\n    vec3.normalize(dirCamB, dirCamB);\n    vec3.normalize(dirCamP, dirCamP);\n\n    if (Math.abs(vec3.dot(dirCamP, norm)) < 0.15) {\n      return false;\n    }",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/drawing2D/drawing_2d.ts", "loc": { "lines": { "from": 147, "to": 161 } } }
    }
  ],
  [
    "516",
    {
      "pageContent": "if (Math.abs(vec3.dot(dirCamP, norm)) < 0.15) {\n      return false;\n    }\n\n    if (camDist > (l0 + l1) / 10) {\n      return false;\n    }\n    if (l0 < 40 || l1 < 40) {\n      return false;\n    }\n    vec2.scale(d0, d0, 1 / l0);\n    vec2.scale(d1, d1, 1 / l1);\n    const dir = vec2.add(vec2.create(), d1, d0);\n    const dirLen = vec2.len(dir);\n    if (dirLen < 0.001) {\n      vec2.set(dir, 0, 1);\n    } else {\n      vec2.scale(dir, dir, 1 / dirLen);\n    }\n\n    let angleA = Math.atan2(d0[1], d0[0]);\n    let angleB = Math.atan2(d1[1], d1[0]);\n\n    const sw = d0[0] * d1[1] - d0[1] * d1[0];\n\n    if (sw < 0) {\n      const tmp = angleA;\n      angleA = angleB;\n      angleB = tmp;\n    }\n\n    ctx.beginPath();\n\n    ctx.arc(anglePoint[0], anglePoint[1], 50, angleA, angleB);\n    ctx.stroke();\n\n    if (part.text) {\n      ctx.fillStyle = \"white\";\n      ctx.strokeStyle = \"black\";\n      ctx.lineWidth = 2;\n      ctx.font = `bold ${16}px \"Open Sans\", sans-serif`;",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/drawing2D/drawing_2d.ts", "loc": { "lines": { "from": 161, "to": 201 } } }
    }
  ],
  [
    "517",
    {
      "pageContent": "if (part.text) {\n      ctx.fillStyle = \"white\";\n      ctx.strokeStyle = \"black\";\n      ctx.lineWidth = 2;\n      ctx.font = `bold ${16}px \"Open Sans\", sans-serif`;\n\n      const textX = anglePoint[0] + dir[0] * 25;\n      const textY = anglePoint[1] + dir[1] * 25;\n      ctx.translate(textX, textY);\n      ctx.strokeText(part.text, 0, 0);\n      ctx.fillText(part.text, 0, 0);\n      ctx.resetTransform();\n    }\n    return true;\n  }\n  return false;\n}\n\nfunction drawLinesOrPolygon(ctx: CanvasRenderingContext2D, part: DrawPart, colorSettings: ColorSettings, glMatrix: typeof GlMatrix, text?: TextSettings) {\n  const { vec2 } = glMatrix;\n\n  if (part.vertices2D) {\n    ctx.beginPath();\n    ctx.moveTo(part.vertices2D[0][0], part.vertices2D[0][1]);\n    for (let i = 1; i < part.vertices2D.length; ++i) {\n      ctx.lineTo(part.vertices2D[i][0], part.vertices2D[i][1]);\n    }",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/drawing2D/drawing_2d.ts", "loc": { "lines": { "from": 201, "to": 227 } } }
    }
  ],
  [
    "518",
    {
      "pageContent": "if (part.voids) {\n      ctx.closePath();\n      part.voids.forEach((drawVoid) => {\n        if (drawVoid.vertices2D) {\n          ctx.moveTo(drawVoid.vertices2D[0][0], drawVoid.vertices2D[0][1]);\n          for (let i = 1; i < drawVoid.vertices2D.length; ++i) {\n            ctx.lineTo(drawVoid.vertices2D[i][0], drawVoid.vertices2D[i][1]);\n          }\n          ctx.closePath();\n        }\n      });\n    }\n\n    if (part.drawType === \"filled\") {\n      ctx.closePath();\n      ctx.fill();\n    }\n\n    if (colorSettings.outlineColor && colorSettings.lineColor) {\n      const tmpWidth = ctx.lineWidth;\n      ctx.lineWidth *= 2;\n      ctx.strokeStyle = colorSettings.outlineColor;\n      ctx.lineCap = \"round\";\n      ctx.stroke();\n      ctx.lineWidth = tmpWidth;\n      ctx.strokeStyle = colorSettings.lineColor;\n      ctx.lineCap = \"butt\";\n    }\n\n    ctx.stroke();",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/drawing2D/drawing_2d.ts", "loc": { "lines": { "from": 229, "to": 258 } } }
    }
  ],
  [
    "519",
    {
      "pageContent": "ctx.stroke();\n\n    if (colorSettings.pointColor) {\n      for (let i = 0; i < part.vertices2D.length; ++i) {\n        ctx.fillStyle = getPointColor(colorSettings.pointColor, i, part.vertices2D.length);\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = \"black\";\n        ctx.beginPath();\n        ctx.arc(part.vertices2D[i][0], part.vertices2D[i][1], 5, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.stroke();\n      }\n    }\n\n    if (text && (text.customText?.length || part.text)) {\n      ctx.strokeStyle = \"black\";\n      ctx.fillStyle = \"white\";\n      ctx.lineWidth = 2;\n      ctx.font = `bold ${16}px \"Open Sans\", sans-serif`;\n      ctx.textBaseline = \"bottom\";\n      ctx.textAlign = \"center\";",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/drawing2D/drawing_2d.ts", "loc": { "lines": { "from": 258, "to": 278 } } }
    }
  ],
  [
    "520",
    {
      "pageContent": "if (text.type === \"distance\") {\n        const points = part.vertices2D;\n        for (let i = 0; i < points.length - 1; ++i) {\n          const textStr = `${text.customText && i < text.customText.length ? text.customText[i] : part.text} ${text.unit ? text.unit : \"m\"}`;\n          let dir = points[i][0] > points[i + 1][0] ? vec2.sub(vec2.create(), points[i], points[i + 1]) : vec2.sub(vec2.create(), points[i + 1], points[i]);\n          const pixLen = ctx.measureText(textStr).width + 20;\n          if (vec2.sqrLen(dir) > pixLen * pixLen) {\n            const center = vec2.create();\n            vec2.lerp(center, points[i], points[i + 1], 0.5);\n            const x = center[0];\n            const y = center[1];\n            vec2.normalize(dir, dir);\n            const angle = Math.atan2(dir[1], dir[0]);\n            ctx.translate(x, y);\n            ctx.rotate(angle);\n            ctx.strokeText(textStr, 0, 0);\n            ctx.fillText(textStr, 0, 0);\n            ctx.resetTransform();\n          }\n        }",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/drawing2D/drawing_2d.ts", "loc": { "lines": { "from": 280, "to": 299 } } }
    }
  ],
  [
    "521",
    {
      "pageContent": "ctx.translate(x, y);\n            ctx.rotate(angle);\n            ctx.strokeText(textStr, 0, 0);\n            ctx.fillText(textStr, 0, 0);\n            ctx.resetTransform();\n          }\n        }\n      } else if (text.type === \"center\" && part.vertices2D.length > 2) {\n        const center = vec2.create();\n        for (const p of part.vertices2D) {\n          vec2.add(center, center, p);\n        }\n        const textStr = `${text.customText && text.customText.length > 0 ? text.customText : part.text ? part.text : \"\"} ${text.unit ? text.unit : \"m\"}`;\n        ctx.strokeText(textStr, center[0] / part.vertices2D.length, center[1] / part.vertices2D.length);\n        ctx.fillText(textStr, center[0] / part.vertices2D.length, center[1] / part.vertices2D.length);\n      }\n    }\n    return true;\n  }\n  return false;\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/drawing2D/drawing_2d.ts", "loc": { "lines": { "from": 299, "to": 319 } } }
    }
  ],
  [
    "522",
    {
      "pageContent": "function getPointColor(pointColor: string | { start: string; middle: string; end: string }, idx: number, length: number) {\n  if (typeof pointColor === \"string\") {\n    return pointColor;\n  }\n  if (idx === 0) {\n    return pointColor.start;\n  } else if (idx === length - 1) {\n    return pointColor.end;\n  }\n  return pointColor.middle;\n}\n\nfunction drawPoints(ctx: CanvasRenderingContext2D, part: DrawPart, colorSettings: ColorSettings) {\n  if (part.vertices2D) {\n    for (let i = 0; i < part.vertices2D.length; ++i) {\n      ctx.fillStyle = colorSettings.pointColor ? getPointColor(colorSettings.pointColor, i, part.vertices2D.length) : colorSettings.fillColor ?? \"black\";\n      ctx.lineWidth = 2;\n      ctx.strokeStyle = \"black\";\n      ctx.beginPath();\n      ctx.arc(part.vertices2D[i][0], part.vertices2D[i][1], 5, 0, 2 * Math.PI);\n      ctx.fill();\n      ctx.stroke();\n    }\n    return true;\n  }\n  return false;\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/drawing2D/drawing_2d.ts", "loc": { "lines": { "from": 321, "to": 347 } } }
    }
  ],
  [
    "523",
    {
      "pageContent": "export async function main({ webglApi, measureApi, glMatrix, canvas, canvas2D }: IParams) {\n  // initialize the webgl api\n  const api = await webglApi.createAPI();\n\n  // initialize the measure api\n  const _measureApi = await measureApi.createMeasureAPI();\n\n  // load a predefined scene into measureapi, available scenes are cube, oilrig, condos\n  const measureScene = await _measureApi.loadScene(webglApi.WellKnownSceneUrls.condos);\n\n  // create a view\n  const view = await api.createView({ background: { color: [0, 0, 0.1, 1] } }, canvas);\n\n  // provide a camera controller, available controller types are static, orbit, flight and turntable\n  view.camera.controller = api.createCameraController({ kind: \"orbit\" }, canvas);\n\n  // load a predefined scene into the view, available scenes are cube, oilrig, condos\n  view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.condos);\n\n  // create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/drawing2D/drawing_2d.ts", "loc": { "lines": { "from": 349, "to": 369 } } }
    }
  ],
  [
    "524",
    {
      "pageContent": "// create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // create 2d context for drawing\n  const context2D = canvas2D.getContext(\"2d\");\n\n  let output: WebglApi.RenderOutput;\n\n  //Parametric entities used to measure between\n  let measureEntity1: MeasureApi.MeasureEntity | undefined = undefined;\n  let measureEntity2: MeasureApi.MeasureEntity | undefined = undefined;\n  //number to alternate between selected entities.\n  let selectEntity: 1 | 2 = 1;\n\n  //Save the measure result so it can be drawn in the draw loop\n  let result: MeasureApi.MeasurementValues | undefined = undefined;",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/drawing2D/drawing_2d.ts", "loc": { "lines": { "from": 369, "to": 384 } } }
    }
  ],
  [
    "525",
    {
      "pageContent": "canvas.addEventListener(\"click\", async (e) => {\n    if (output) {\n      let result1 = await output.pick(e.offsetX, e.offsetY);\n      if (result1) {\n        if (selectEntity === 1) {\n          //Find measure entity at pick location\n          measureEntity1 = (await measureScene.pickMeasureEntity(result1.objectId, result1.position)).entity;\n          selectEntity = 2;\n        } else {\n          //Find measure entity at pick location\n          measureEntity2 = (await measureScene.pickMeasureEntity(result1.objectId, result1.position)).entity;\n          selectEntity = 1;\n        }\n        //As long as one object is selected log out the values\n        //Note that if measureEntity2 is undefined then the result will be the parametric values of measureEntity1\n        if (measureEntity1) {\n          result = await measureScene.measure(measureEntity1, measureEntity2);\n        }\n        await draw2d(_measureApi, view, measureScene, measureEntity1, measureEntity2, context2D, canvas2D, result as any, glMatrix);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/drawing2D/drawing_2d.ts", "loc": { "lines": { "from": 386, "to": 404 } } }
    }
  ],
  [
    "526",
    {
      "pageContent": "}\n        await draw2d(_measureApi, view, measureScene, measureEntity1, measureEntity2, context2D, canvas2D, result as any, glMatrix);\n      }\n    }\n  });",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/drawing2D/drawing_2d.ts", "loc": { "lines": { "from": 404, "to": 408 } } }
    }
  ],
  [
    "527",
    {
      "pageContent": "// Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: { width: canvas.width, height: canvas.height },\n      });\n    }\n  }).observe(canvas);\n\n  // render loop\n  while (true) {\n    // Render frame\n    output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    await draw2d(_measureApi, view, measureScene, measureEntity1, measureEntity2, context2D, canvas2D, result, glMatrix);\n    (output as any).dispose();\n  }\n}\n// HiddenRangeEnded",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/drawing2D/drawing_2d.ts", "loc": { "lines": { "from": 410, "to": 439 } } }
    }
  ],
  [
    "528",
    {
      "pageContent": "import drawing2d from \"!!./drawing_2d.ts?raw\";\nimport { demo } from \"../../misc\";\n\nexport const drawing2D = {\n  ...demo(\"drawing2D\", \"drawing_2d\", drawing2d, {}, \"Measure API can be used to draw measure entity or results into a 2D canvas.\"),\n};",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/drawing2D/index.ts", "loc": { "lines": { "from": 1, "to": 6 } } }
    }
  ],
  [
    "529",
    {
      "pageContent": "// HiddenRangeStarted\nimport * as WebglApi from \"@novorender/webgl-api\";\nimport * as MeasureApi from \"@novorender/measure-api\";\nimport * as DataJsApi from \"@novorender/data-js-api\";\nimport * as GlMatrix from \"gl-matrix\";\n\nexport interface IParams {\n  webglApi: typeof WebglApi;\n  measureApi: typeof MeasureApi;\n  dataJsApi: typeof DataJsApi;\n  glMatrix: typeof GlMatrix;\n  canvas: HTMLCanvasElement;\n  canvas2D: HTMLCanvasElement;\n  previewCanvas: HTMLCanvasElement;\n}\n\n// HiddenRangeEnded\nexport async function main({ webglApi, canvas }: IParams) {\n  // initialize the webgl api\n  const api = webglApi.createAPI();\n\n  // create a view\n  const view = await api.createView({ background: { color: [0, 0, 0.1, 1] } }, canvas);\n\n  // create an empty scene, available scenes are cube, oilrig, condos\n  const scene = (view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.empty));",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/dynamic_objects/dynamic_object.ts", "loc": { "lines": { "from": 1, "to": 26 } } }
    }
  ],
  [
    "530",
    {
      "pageContent": "// create an empty scene, available scenes are cube, oilrig, condos\n  const scene = (view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.empty));\n\n  // provide a camera controller, available controller types are static, orbit, flight and turntable\n  view.camera.controller = api.createCameraController({ kind: \"orbit\" }, canvas);\n\n  // load dynamic object asset\n  const asset = await api.loadAsset(new URL(\"https://api.novorender.com/assets/gltf/shaderball.glb\"));\n\n  // Add instance into scene\n  const instance = scene.createDynamicObject(asset); // we can make multiple instances from same asset.\n\n  // render the object\n  instance.visible = true;\n\n  // create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/dynamic_objects/dynamic_object.ts", "loc": { "lines": { "from": 26, "to": 42 } } }
    }
  ],
  [
    "531",
    {
      "pageContent": "// render the object\n  instance.visible = true;\n\n  // create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: { width: canvas.width, height: canvas.height },\n      });\n    }\n  }).observe(canvas);\n\n  // render loop\n  while (true) {\n    // Render frame\n    const output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    (output as any).dispose();\n  }\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/dynamic_objects/dynamic_object.ts", "loc": { "lines": { "from": 42, "to": 75 } } }
    }
  ],
  [
    "532",
    {
      "pageContent": "import dynamicObject from \"!!./dynamic_object.ts?raw\";\nimport { demo } from \"../../misc\";\n\nexport const dynamicObjects = {\n  ...demo(\"dynamic_objects\", \"dynamic_object\", dynamicObject, {}, \"Adding dynamic 3D objects into the view.\"),\n};",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/dynamic_objects/index.ts", "loc": { "lines": { "from": 1, "to": 6 } } }
    }
  ],
  [
    "533",
    {
      "pageContent": "// HiddenRangeStarted\nimport * as WebglApi from \"@novorender/webgl-api\";\nimport * as MeasureApi from \"@novorender/measure-api\";\nimport * as DataJsApi from \"@novorender/data-js-api\";\nimport * as GlMatrix from \"gl-matrix\";\n\nexport interface IParams {\n  webglApi: typeof WebglApi;\n  measureApi: typeof MeasureApi;\n  dataJsApi: typeof DataJsApi;\n  glMatrix: typeof GlMatrix;\n  canvas: HTMLCanvasElement;\n  canvas2D: HTMLCanvasElement;\n  previewCanvas: HTMLCanvasElement;\n}\n\n// HiddenRangeEnded\nexport async function main({ webglApi, canvas }: IParams) {\n  // initialize the webgl api\n  const api = webglApi.createAPI();\n\n  // Create a view\n  const view = await api.createView({ background: { color: [0, 0, 0.25, 1] } }, canvas);\n\n  // load a predefined scene into the view, available scenes are cube, oilrig, condos\n  view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.condos);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/getting_started/basic_condos.ts", "loc": { "lines": { "from": 1, "to": 26 } } }
    }
  ],
  [
    "534",
    {
      "pageContent": "// load a predefined scene into the view, available scenes are cube, oilrig, condos\n  view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.condos);\n\n  // provide a camera controller, available controller types are static, orbit, flight and turntable\n  view.camera.controller = api.createCameraController({ kind: \"turntable\" });\n\n  // Create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: { width: canvas.width, height: canvas.height },\n      });\n    }\n  }).observe(canvas);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/getting_started/basic_condos.ts", "loc": { "lines": { "from": 26, "to": 44 } } }
    }
  ],
  [
    "535",
    {
      "pageContent": "// render-loop https://dens.website/tutorials/webgl/render-loop\n  while (true) {\n    // Render frame\n    const output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    (output as any).dispose();\n  }\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/getting_started/basic_condos.ts", "loc": { "lines": { "from": 46, "to": 62 } } }
    }
  ],
  [
    "536",
    {
      "pageContent": "// HiddenRangeStarted\nimport * as WebglApi from \"@novorender/webgl-api\";\nimport * as MeasureApi from \"@novorender/measure-api\";\nimport * as DataJsApi from \"@novorender/data-js-api\";\nimport * as GlMatrix from \"gl-matrix\";\n\nexport interface IParams {\n  webglApi: typeof WebglApi;\n  measureApi: typeof MeasureApi;\n  dataJsApi: typeof DataJsApi;\n  glMatrix: typeof GlMatrix;\n  canvas: HTMLCanvasElement;\n  canvas2D: HTMLCanvasElement;\n  previewCanvas: HTMLCanvasElement;\n}\n\n// HiddenRangeEnded\nexport async function main({ webglApi, canvas }: IParams) {\n  // initialize the webgl api\n  const api = webglApi.createAPI();\n\n  // Create a view\n  const view = await api.createView({ background: { color: [0, 0, 0, 0] } }, canvas);\n\n  // load a predefined scene into the view, available scenes are cube, oilrig, condos\n  view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.condos);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/getting_started/basic_condos_1.ts", "loc": { "lines": { "from": 1, "to": 26 } } }
    }
  ],
  [
    "537",
    {
      "pageContent": "// load a predefined scene into the view, available scenes are cube, oilrig, condos\n  view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.condos);\n\n  // provide a camera controller, available controller types are static, orbit, flight and turntable\n  view.camera.controller = api.createCameraController({ kind: \"turntable\" });\n\n  // Create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: { width: canvas.width, height: canvas.height },\n      });\n    }\n  }).observe(canvas);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/getting_started/basic_condos_1.ts", "loc": { "lines": { "from": 26, "to": 44 } } }
    }
  ],
  [
    "538",
    {
      "pageContent": "// render loop: https://dens.website/tutorials/webgl/render-loop\n  while (true) {\n    // Render frame\n    const output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    (output as any).dispose();\n  }\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/getting_started/basic_condos_1.ts", "loc": { "lines": { "from": 46, "to": 62 } } }
    }
  ],
  [
    "539",
    {
      "pageContent": "// HiddenRangeStarted\nimport * as WebglApi from \"@novorender/webgl-api\";\nimport * as MeasureApi from \"@novorender/measure-api\";\nimport * as DataJsApi from \"@novorender/data-js-api\";\nimport * as GlMatrix from \"gl-matrix\";\n\nexport interface IParams {\n  webglApi: typeof WebglApi;\n  measureApi: typeof MeasureApi;\n  dataJsApi: typeof DataJsApi;\n  glMatrix: typeof GlMatrix;\n  canvas: HTMLCanvasElement;\n  canvas2D: HTMLCanvasElement;\n  previewCanvas: HTMLCanvasElement;\n}\n\n// HiddenRangeEnded\nexport async function main({ webglApi, canvas }: IParams) {\n  // initialize the webgl api\n  const api = webglApi.createAPI();\n\n  // Create a view\n  const view = await api.createView({ background: { color: [0, 0, 0.25, 1] } }, canvas);\n\n  // load a predefined scene into the view, available scenes are cube, oilrig, condos\n  view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.cube);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/getting_started/basic_cube.ts", "loc": { "lines": { "from": 1, "to": 26 } } }
    }
  ],
  [
    "540",
    {
      "pageContent": "// load a predefined scene into the view, available scenes are cube, oilrig, condos\n  view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.cube);\n\n  // provide a controller, available controller types are static, orbit, flight and turntable\n  view.camera.controller = api.createCameraController({ kind: \"turntable\" });\n\n  // Create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: { width: canvas.width, height: canvas.height },\n      });\n    }\n  }).observe(canvas);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/getting_started/basic_cube.ts", "loc": { "lines": { "from": 26, "to": 44 } } }
    }
  ],
  [
    "541",
    {
      "pageContent": "// render-loop https://dens.website/tutorials/webgl/render-loop\n  while (true) {\n    // Render frame\n    const output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    (output as any).dispose();\n  }\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/getting_started/basic_cube.ts", "loc": { "lines": { "from": 46, "to": 62 } } }
    }
  ],
  [
    "542",
    {
      "pageContent": "import basicCube from \"!!./basic_cube.ts?raw\";\nimport basicCondos from \"!!./basic_condos.ts?raw\";\nimport basicCondos1 from \"!!./basic_condos_1.ts?raw\";\n\nimport { demo } from \"../../misc\";\n\nexport const gettingStarted = {\n  ...demo(\"getting_started\", \"basic_cube\", basicCube, {}, \"A basic demonstration of the WebGL API using a predefined `cube` scene.\"),\n  ...demo(\"getting_started\", \"basic_condos\", basicCondos, {}, \"A basic demonstration of the WebGL API.\"),\n  ...demo(\"getting_started\", \"basic_condos_1\", basicCondos1, {}, \"A basic demonstration of the WebGL API using `ResizeObserver`.\"),\n};",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/getting_started/index.ts", "loc": { "lines": { "from": 1, "to": 11 } } }
    }
  ],
  [
    "543",
    {
      "pageContent": "export * from \"./clipping_volumes\";\nexport * from \"./dynamic_objects\";\nexport * from \"./object_selection\";\nexport * from \"./measure\";\nexport * from \"./getting_started\";\nexport * from \"./loading_scenes\";\nexport * from \"./searching\";\nexport * from \"./object_groups\";\nexport * from \"./drawing2D\";\nexport * from \"./object_metadata\";\nexport * from \"./pdf_placement\";",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/index.ts", "loc": { "lines": { "from": 1, "to": 11 } } }
    }
  ],
  [
    "544",
    {
      "pageContent": "import publicScene from \"!!./public_scene.ts?raw\";\nimport privateScene from \"!!./private_scene.ts?raw\";\nimport { demo } from \"../../misc\";\n\nexport const loadingScenes = {\n  ...demo(\"loading_scenes\", \"public_scene\", publicScene, {}, \"Loading public scenes.\"),\n  ...demo(\"loading_scenes\", \"private_scene\", privateScene, {}, \"Loading private scenes.\"),\n};",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/loading_scenes/index.ts", "loc": { "lines": { "from": 1, "to": 8 } } }
    }
  ],
  [
    "545",
    {
      "pageContent": "// HiddenRangeStarted\nimport * as WebglApi from \"@novorender/webgl-api\";\nimport * as MeasureApi from \"@novorender/measure-api\";\nimport * as DataJsApi from \"@novorender/data-js-api\";\nimport * as GlMatrix from \"gl-matrix\";\n\nexport interface IParams {\n  webglApi: typeof WebglApi;\n  measureApi: typeof MeasureApi;\n  dataJsApi: typeof DataJsApi;\n  glMatrix: typeof GlMatrix;\n  canvas: HTMLCanvasElement;\n  canvas2D: HTMLCanvasElement;\n  previewCanvas: HTMLCanvasElement;\n}\n\nconst demo_access_token = localStorage.getItem(\"demo_access_token\");\nconst DATA_API_SERVICE_URL = \"https://data.novorender.com/api\";",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/loading_scenes/private_scene.ts", "loc": { "lines": { "from": 1, "to": 18 } } }
    }
  ],
  [
    "546",
    {
      "pageContent": "const demo_access_token = localStorage.getItem(\"demo_access_token\");\nconst DATA_API_SERVICE_URL = \"https://data.novorender.com/api\";\n\n// HiddenRangeEnded\nexport async function main({ webglApi, dataJsApi, canvas }: IParams) {\n  // Initialize the data API with the Novorender data server service\n  // and a callback which returns the auth header with the access token\n  const dataApi = dataJsApi.createAPI({\n    serviceUrl: DATA_API_SERVICE_URL,\n    authHeader: async () => ({\n      header: \"Authorization\",\n      // We are using pre-generated demo token here for brevity.\n      // To get your own token, look at \"https://docs.novorender.com/data-rest-api/#/operations/Login\".\n      value: `Bearer ${demo_access_token}`,\n    }),\n  });\n\n  // From here on everything except the scene ID is the same as for loading public scenes",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/loading_scenes/private_scene.ts", "loc": { "lines": { "from": 18, "to": 35 } } }
    }
  ],
  [
    "547",
    {
      "pageContent": "// From here on everything except the scene ID is the same as for loading public scenes\n\n  try {\n    // Load scene metadata\n    const sceneData = await dataApi\n      // Condos scene ID, but this one requires authentication\n      .loadScene(\"7a0a302fe9b24ddeb3c496fb36e932b0\")\n      .then((res) => {\n        if (\"error\" in res) {\n          throw res;\n        } else {\n          return res;\n        }\n      });\n\n    // Destructure relevant properties into variables\n    const { url, db, settings, camera: cameraParams } = sceneData;\n\n    // initialize the webgl api\n    const api = webglApi.createAPI();\n\n    // Load scene\n    const scene = await api.loadScene(url, db);\n\n    // The code above is all you need to load the scene,\n    // however there is more scene data loaded that you can apply\n\n    // Create a view with the scene's saved settings\n    const view = await api.createView(settings, canvas);\n\n    // Set resolution scale to 1\n    view.applySettings({ quality: { resolution: { value: 1 } } });",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/loading_scenes/private_scene.ts", "loc": { "lines": { "from": 35, "to": 66 } } }
    }
  ],
  [
    "548",
    {
      "pageContent": "// Set resolution scale to 1\n    view.applySettings({ quality: { resolution: { value: 1 } } });\n\n    // Create a camera controller with the saved parameters with turntable as fallback\n    // available controller types are static, orbit, flight and turntable\n    const camera = cameraParams ?? ({ kind: \"turntable\" } as any);\n    view.camera.controller = api.createCameraController(camera, canvas);\n\n    // Assign the scene to the view\n    view.scene = scene;\n\n    // Run render loop and the resizeObserver\n    run(view, canvas);\n  } catch (e) {\n    // Handle errors however you like\n    console.warn(e);\n  }\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/loading_scenes/private_scene.ts", "loc": { "lines": { "from": 66, "to": 83 } } }
    }
  ],
  [
    "549",
    {
      "pageContent": "// Run render loop and the resizeObserver\n    run(view, canvas);\n  } catch (e) {\n    // Handle errors however you like\n    console.warn(e);\n  }\n}\n\n// HiddenRangeStarted\nasync function run(view: WebglApi.View, canvas: HTMLCanvasElement): Promise<void> {\n  // Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: { width: canvas.width, height: canvas.height },\n      });\n    }\n  }).observe(canvas);\n\n  // Create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/loading_scenes/private_scene.ts", "loc": { "lines": { "from": 83, "to": 105 } } }
    }
  ],
  [
    "550",
    {
      "pageContent": "// Create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // render loop\n  while (true) {\n    // Render frame\n    const output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    (output as any).dispose();\n  }\n}\n// HiddenRangeEnded",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/loading_scenes/private_scene.ts", "loc": { "lines": { "from": 105, "to": 125 } } }
    }
  ],
  [
    "551",
    {
      "pageContent": "// HiddenRangeStarted\nimport * as WebglApi from \"@novorender/webgl-api\";\nimport * as MeasureApi from \"@novorender/measure-api\";\nimport * as DataJsApi from \"@novorender/data-js-api\";\nimport * as GlMatrix from \"gl-matrix\";\n\nexport interface IParams {\n  webglApi: typeof WebglApi;\n  measureApi: typeof MeasureApi;\n  dataJsApi: typeof DataJsApi;\n  glMatrix: typeof GlMatrix;\n  canvas: HTMLCanvasElement;\n  canvas2D: HTMLCanvasElement;\n  previewCanvas: HTMLCanvasElement;\n}\n\n// HiddenRangeEnded\nexport async function main({ webglApi, dataJsApi, canvas }: IParams) {\n  // Initialize the data API with the Novorender data server service\n  const dataApi = dataJsApi.createAPI({\n    serviceUrl: \"https://data.novorender.com/api\",\n  });",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/loading_scenes/public_scene.ts", "loc": { "lines": { "from": 1, "to": 22 } } }
    }
  ],
  [
    "552",
    {
      "pageContent": "try {\n    // Load scene metadata\n    const sceneData = await dataApi\n      // Condos scene ID, but can be changed to any public scene ID\n      .loadScene(\"3b5e65560dc4422da5c7c3f827b6a77c\")\n      .then((res) => {\n        if (\"error\" in res) {\n          throw res;\n        } else {\n          return res;\n        }\n      });\n\n    // Destructure relevant properties into variables\n    const { url, db, settings, camera: cameraParams } = sceneData;\n\n    // initialize webgl api\n    const api = webglApi.createAPI();\n\n    // Load scene\n    const scene = await api.loadScene(url, db);\n\n    // The code above is all you need to load the scene,\n    // however there is more scene data loaded that you can apply\n\n    // Create a view with the scene's saved settings\n    const view = await api.createView(settings, canvas);\n\n    // Set resolution scale to 1\n    view.applySettings({ quality: { resolution: { value: 1 } } });",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/loading_scenes/public_scene.ts", "loc": { "lines": { "from": 24, "to": 53 } } }
    }
  ],
  [
    "553",
    {
      "pageContent": "// Set resolution scale to 1\n    view.applySettings({ quality: { resolution: { value: 1 } } });\n\n    // Create a camera controller with the saved parameters with turntable as fallback\n    // available controller types are static, orbit, flight and turntable\n    const camera = cameraParams ?? ({ kind: \"turntable\" } as any);\n    view.camera.controller = api.createCameraController(camera, canvas);\n\n    // Assign the scene to the view\n    view.scene = scene;",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/loading_scenes/public_scene.ts", "loc": { "lines": { "from": 53, "to": 62 } } }
    }
  ],
  [
    "554",
    {
      "pageContent": "// Assign the scene to the view\n    view.scene = scene;\n\n    // Run render loop and the resizeObserver\n    run(view, canvas);\n  } catch (e) {\n    // Handle errors however you like\n    console.warn(e);\n  }\n}\n// HiddenRangeStarted\nasync function run(view: WebglApi.View, canvas: HTMLCanvasElement): Promise<void> {\n  // Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: { width: canvas.clientWidth, height: canvas.clientHeight },\n      });\n    }\n  }).observe(canvas);\n\n  // Create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/loading_scenes/public_scene.ts", "loc": { "lines": { "from": 62, "to": 86 } } }
    }
  ],
  [
    "555",
    {
      "pageContent": "// Create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // render loop\n  while (true) {\n    // Render frame\n    const output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    (output as any).dispose();\n  }\n}\n// HiddenRangeEnded",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/loading_scenes/public_scene.ts", "loc": { "lines": { "from": 86, "to": 106 } } }
    }
  ],
  [
    "556",
    {
      "pageContent": "import parametricMeasure from \"!!./parametric_measure.ts?raw\";\nimport { demo } from \"../../misc\";\n\nexport const measure = {\n  ...demo(\"measure\", \"parametric_measure\", parametricMeasure, {}, \"Measure API can be used to fetch parametric data based on real world position, and calculate measurements between 2 objects.\"),\n};",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/measure/index.ts", "loc": { "lines": { "from": 1, "to": 6 } } }
    }
  ],
  [
    "557",
    {
      "pageContent": "// HiddenRangeStarted\nimport * as WebglApi from \"@novorender/webgl-api\";\nimport * as MeasureApi from \"@novorender/measure-api\";\nimport * as DataJsApi from \"@novorender/data-js-api\";\nimport * as GlMatrix from \"gl-matrix\";\n\nexport interface IParams {\n  webglApi: typeof WebglApi;\n  measureApi: typeof MeasureApi;\n  dataJsApi: typeof DataJsApi;\n  glMatrix: typeof GlMatrix;\n  canvas: HTMLCanvasElement;\n  canvas2D: HTMLCanvasElement;\n  previewCanvas: HTMLCanvasElement;\n}\n\n// we export this function to our react component which will then execute it once the demo started running.\nexport function showTip() {\n  return openAlert(\n    \"Click to select parametric object, parametric data will be shown in an alert dialog. Select another object and the measurement data between the objects will be shown in the alert dialog. Clicking further objects will alternate between first and second selected and show measure values within an alert dialog.\"\n  );\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/measure/parametric_measure.ts", "loc": { "lines": { "from": 1, "to": 22 } } }
    }
  ],
  [
    "558",
    {
      "pageContent": "// HiddenRangeEnded\nexport async function main({ webglApi, measureApi, canvas }: IParams) {\n  // initialize the webgl api\n  const api = webglApi.createAPI();\n\n  // initialize the measure api instance\n  const _measureApi = await measureApi.createMeasureAPI();\n\n  // load a predefined scene into the measure api, available scenes are cube, oilrig, condos\n  const measureScene = await _measureApi.loadScene(webglApi.WellKnownSceneUrls.condos);\n\n  // create a view\n  const view = await api.createView({ background: { color: [0, 0, 0.1, 1] } }, canvas);\n\n  // provide a camera controller, available controller types are static, orbit, flight and turntable\n  view.camera.controller = api.createCameraController({ kind: \"orbit\" }, canvas);\n\n  // create an empty scene, other available scenes are cube, oilrig, condos\n  view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.condos);\n\n  // create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/measure/parametric_measure.ts", "loc": { "lines": { "from": 24, "to": 45 } } }
    }
  ],
  [
    "559",
    {
      "pageContent": "// create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  let output: WebglApi.RenderOutput | undefined = undefined;\n\n  // Parametric entities used to measure between\n  let measureEntity1: MeasureApi.MeasureEntity | undefined = undefined;\n  let measureEntity2: MeasureApi.MeasureEntity | undefined = undefined;\n  // number to alternate between selected entities.\n  let selectEntity: 1 | 2 = 1;",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/measure/parametric_measure.ts", "loc": { "lines": { "from": 45, "to": 54 } } }
    }
  ],
  [
    "560",
    {
      "pageContent": "canvas.addEventListener(\"click\", async (e) => {\n    if (output) {\n      const result = await output.pick(e.offsetX, e.offsetY);\n      if (result) {\n        if (selectEntity === 1) {\n          // Find measure entity at pick location\n          measureEntity1 = (await measureScene.pickMeasureEntity(result.objectId, result.position)).entity;\n          selectEntity = 2;\n        } else {\n          // Find measure entity at pick location\n          measureEntity2 = (await measureScene.pickMeasureEntity(result.objectId, result.position)).entity;\n          selectEntity = 1;\n        }\n        // As long as one object is selected log out the values\n        // Note that if measureEntity2 is undefined then the result will be the parametric values of measureEntity1\n        if (measureEntity1) {\n          const _log = await measureScene.measure(measureEntity1, measureEntity2);\n          openInfoPane(_log);\n        }\n      }\n    }\n  });",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/measure/parametric_measure.ts", "loc": { "lines": { "from": 56, "to": 77 } } }
    }
  ],
  [
    "561",
    {
      "pageContent": "// Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: { width: canvas.width, height: canvas.height },\n      });\n    }\n  }).observe(canvas);\n\n  // render loop\n  while (true) {\n    // Render frame\n    output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    (output as any).dispose();\n  }\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/measure/parametric_measure.ts", "loc": { "lines": { "from": 79, "to": 106 } } }
    }
  ],
  [
    "562",
    {
      "pageContent": "// HiddenRangeStarted\nimport * as WebglApi from \"@novorender/webgl-api\";\nimport * as MeasureApi from \"@novorender/measure-api\";\nimport * as DataJsApi from \"@novorender/data-js-api\";\nimport * as GlMatrix from \"gl-matrix\";\n\nexport interface IParams {\n  webglApi: typeof WebglApi;\n  measureApi: typeof MeasureApi;\n  dataJsApi: typeof DataJsApi;\n  glMatrix: typeof GlMatrix;\n  canvas: HTMLCanvasElement;\n  canvas2D: HTMLCanvasElement;\n  previewCanvas: HTMLCanvasElement;\n}\n\n// we export this function to our react component which will then execute it once the demo started running.\nexport function showTip() {\n  return openAlert(\"Choose and click on any floor from the top-left to isolate the objectGroups in the selected floor's group.\");\n}\n\n// Condos demo scene\nconst SCENE_ID = \"c132d3eecf4f4247ace112410f4219aa\";",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_groups/floors.ts", "loc": { "lines": { "from": 1, "to": 23 } } }
    }
  ],
  [
    "563",
    {
      "pageContent": "// Condos demo scene\nconst SCENE_ID = \"c132d3eecf4f4247ace112410f4219aa\";\n\n// HiddenRangeEnded\nexport async function main({ webglApi, dataJsApi, canvas }: IParams) {\n  try {\n    // load scene into data api, create webgl api, view and load scene.\n    const [view, dataApi, objectGroups] = await initView(webglApi, dataJsApi, canvas);\n\n    const scene = view.scene!;\n\n    // run render loop and canvas resizeObserver\n    run(view, canvas);\n\n    // Find floor groups\n    const floors = objectGroups.filter((group) => group.grouping?.toLowerCase() === \"floors\");\n\n    // Create buttons\n    createFloorButtons(canvas.parentElement!, floors, (floor: DataJsApi.ObjectGroup | undefined) => {\n      if (floor) {\n        // Hide all floors\n        floors.forEach((floor) => (floor.hidden = true));\n\n        // Show clicked\n        floor.hidden = false;\n      } else {\n        // Show all floors\n        floors.forEach((floor) => (floor.hidden = false));\n      }",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_groups/floors.ts", "loc": { "lines": { "from": 23, "to": 51 } } }
    }
  ],
  [
    "564",
    {
      "pageContent": "// Show clicked\n        floor.hidden = false;\n      } else {\n        // Show all floors\n        floors.forEach((floor) => (floor.hidden = false));\n      }\n\n      // Handle visibility changes\n      handleVisibilityChanges(dataApi, scene, objectGroups);\n    });\n  } catch (e) {\n    // Handle errors however you like\n    console.warn(e);\n  }\n}\n\n// ID to track if handleVisibilityChanges has been called again before IDs have finished loading\nlet refillId = 0;\n// Hide check groups' .hidden property and toggle their objects' visibility\nasync function handleVisibilityChanges(dataApi: DataJsApi.API, scene: WebglApi.Scene, groups: DataJsApi.ObjectGroup[]) {\n  // Reset highlights\n  scene.objectHighlighter.objectHighlightIndices.fill(0);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_groups/floors.ts", "loc": { "lines": { "from": 51, "to": 72 } } }
    }
  ],
  [
    "565",
    {
      "pageContent": "// For groups that have large .ids lists we have to explicitly load the IDs\n  // when needed as to not bloat the .loadScene() response\n  const groupIdRequests: Promise<void>[] = groups.map(async (group) => {\n    if ((group.selected || group.hidden) && !group.ids) {\n      group.ids = await dataApi.getGroupIds(SCENE_ID, group.id).catch(() => {\n        console.warn(\"failed to load ids for group - \", group.id);\n        return [];\n      });\n    }\n  });\n\n  // Increment current refillId and assign local copy\n  const id = ++refillId;\n\n  // Wait for IDs to be loaded if necessary\n  await Promise.all(groupIdRequests);\n\n  // Abort changes if they are stale\n  if (id !== refillId) {\n    return;\n  }\n\n  // Hide groups that have .hidden == true\n  groups.filter((group) => group.hidden).forEach((group) => group.ids?.forEach((id) => (scene.objectHighlighter.objectHighlightIndices[id] = 255)));\n\n  scene.objectHighlighter.commit();\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_groups/floors.ts", "loc": { "lines": { "from": 74, "to": 100 } } }
    }
  ],
  [
    "566",
    {
      "pageContent": "scene.objectHighlighter.commit();\n}\n\n// HiddenRangeStarted\n// UI setup\nfunction createFloorButtons(container: HTMLElement, floors: DataJsApi.ObjectGroup[], onClick: (floor?: DataJsApi.ObjectGroup) => void): void {\n  const wrapper = document.createElement(\"div\");\n  wrapper.style.position = \"absolute\";\n  wrapper.style.top = \"0\";\n\n  floors.forEach((floor) => {\n    const btn = document.createElement(\"button\");\n    btn.innerText = floor.name;\n    btn.onclick = () => {\n      onClick(floor);\n    };\n\n    wrapper.append(btn);\n  });\n\n  const btn = document.createElement(\"button\");\n  btn.innerText = \"All\";\n  btn.onclick = () => {\n    onClick();\n  };\n\n  wrapper.append(btn);\n  container.append(wrapper);\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_groups/floors.ts", "loc": { "lines": { "from": 100, "to": 128 } } }
    }
  ],
  [
    "567",
    {
      "pageContent": "wrapper.append(btn);\n  });\n\n  const btn = document.createElement(\"button\");\n  btn.innerText = \"All\";\n  btn.onclick = () => {\n    onClick();\n  };\n\n  wrapper.append(btn);\n  container.append(wrapper);\n}\n\nasync function initView(webglApi: typeof WebglApi, dataJsAPI: typeof DataJsApi, canvas: HTMLCanvasElement): Promise<[WebglApi.View, DataJsApi.API, DataJsApi.ObjectGroup[]]> {\n  // Initialize the data API with the Novorender data server service\n  const dataApi = dataJsAPI.createAPI({\n    serviceUrl: \"https://data.novorender.com/api\",\n  });\n\n  // Load scene metadata\n  const sceneData = await dataApi\n    // Condos scene ID, but can be changed to any public scene ID\n    .loadScene(SCENE_ID)\n    .then((res) => {\n      if (\"error\" in res) {\n        throw res;\n      } else {\n        return res;\n      }\n    });\n\n  // Destructure relevant properties into variables\n  const { url, db, settings, camera: cameraParams, objectGroups } = sceneData;",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_groups/floors.ts", "loc": { "lines": { "from": 128, "to": 160 } } }
    }
  ],
  [
    "568",
    {
      "pageContent": "// Destructure relevant properties into variables\n  const { url, db, settings, camera: cameraParams, objectGroups } = sceneData;\n\n  // initialize the webgl api\n  const api = webglApi.createAPI();\n\n  // Load scene\n  const scene = await api.loadScene(url, db);\n\n  // Create a view with the scene's saved settings\n  const view = await api.createView(settings, canvas);\n\n  // Set resolution scale to 1\n  view.applySettings({ quality: { resolution: { value: 1 } } });\n\n  // Create a camera controller with the saved parameters with turntable as fallback\n  const camera = cameraParams ?? ({ kind: \"turntable\" } as any);\n  view.camera.controller = api.createCameraController(camera, canvas);\n\n  // Assign the scene to the view\n  view.scene = scene;\n\n  return [view, dataApi, objectGroups];\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_groups/floors.ts", "loc": { "lines": { "from": 160, "to": 183 } } }
    }
  ],
  [
    "569",
    {
      "pageContent": "// Assign the scene to the view\n  view.scene = scene;\n\n  return [view, dataApi, objectGroups];\n}\n\nasync function run(view: WebglApi.View, canvas: HTMLCanvasElement): Promise<void> {\n  // Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: { width: canvas.width, height: canvas.height },\n      });\n    }\n  }).observe(canvas);\n\n  // Create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_groups/floors.ts", "loc": { "lines": { "from": 183, "to": 202 } } }
    }
  ],
  [
    "570",
    {
      "pageContent": "// Create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // render loop\n  while (true) {\n    // Render frame\n    const output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    (output as any).dispose();\n  }\n}\n// HiddenRangeEnded",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_groups/floors.ts", "loc": { "lines": { "from": 202, "to": 222 } } }
    }
  ],
  [
    "571",
    {
      "pageContent": "import floors from \"!!./floors.ts?raw\";\nimport { demo } from \"../../misc\";\n\nexport const objectGroups = {\n  ...demo(\"object_groups\", \"floors\", floors, {}, \"Predefined groups that are set up for each floor and buttons that isolate objectGroups in the group of the clicked level.\"),\n};",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_groups/index.ts", "loc": { "lines": { "from": 1, "to": 6 } } }
    }
  ],
  [
    "572",
    {
      "pageContent": "// HiddenRangeStarted\nimport * as WebglApi from \"@novorender/webgl-api\";\nimport * as MeasureApi from \"@novorender/measure-api\";\nimport * as DataJsApi from \"@novorender/data-js-api\";\nimport * as GlMatrix from \"gl-matrix\";\n\nexport interface IParams {\n  webglApi: typeof WebglApi;\n  measureApi: typeof MeasureApi;\n  dataJsApi: typeof DataJsApi;\n  glMatrix: typeof GlMatrix;\n  canvas: HTMLCanvasElement;\n  canvas2D: HTMLCanvasElement;\n  previewCanvas: HTMLCanvasElement;\n}\n// HiddenRangeEnded\nexport async function main({ webglApi, dataJsApi, glMatrix, canvas }: IParams) {\n  try {\n    // load scene into data api, create webgl api, view and load scene.\n    const view = await initView(webglApi, dataJsApi, canvas);\n\n    const scene = view.scene!;\n\n    // run render loop and canvas resizeObserver\n    run(view, canvas);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_metadata/fly_to.ts", "loc": { "lines": { "from": 1, "to": 25 } } }
    }
  ],
  [
    "573",
    {
      "pageContent": "const scene = view.scene!;\n\n    // run render loop and canvas resizeObserver\n    run(view, canvas);\n\n    // Run search and fly to on load\n    // We set up a click listener below\n    {\n      const iterator = scene.search({\n        searchPattern: [\n          {\n            property: \"GUID\",\n            value: [\"06yaxhMh5CwutD_i1oN9HO\", \"06yaxhMh5CwutD_i1oN9HR\", \"0aq88u2xXFvBCrfVLun4gr\", \"0aq88u2xXFvBCrfVLun4gH\"],\n          },\n        ],\n        // false/undefined because we don't need full metadata as the object bounds\n        // are included in the lightweight HierarcicalObjectReference.\n        full: false,\n      });\n\n      const searchResult: WebglApi.HierarcicalObjectReference[] = [];\n      for await (const object of iterator) {\n        searchResult.push(object);\n      }\n\n      // Highlight results\n      highlightObjects(\n        scene,\n        searchResult.map((object) => object.id)\n      );",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_metadata/fly_to.ts", "loc": { "lines": { "from": 25, "to": 54 } } }
    }
  ],
  [
    "574",
    {
      "pageContent": "// Highlight results\n      highlightObjects(\n        scene,\n        searchResult.map((object) => object.id)\n      );\n\n      // Calculate bounds of multiple objects and fly to them\n      const bounds = getTotalBoundingSphere(searchResult, glMatrix);\n      if (bounds) {\n        view.camera.controller.zoomTo(bounds);\n      }\n    }\n\n    // Listen to click events on the canvas\n    canvas.onclick = async (event) => {\n      // Pick object at clicked position\n      const result = await view.lastRenderOutput?.pick(event.offsetX, event.offsetY);\n\n      // If picked position does not have any objects result will be undefined\n      if (!result) {\n        return;\n      }\n\n      // Highlight picked object\n      highlightObjects(scene, [result.objectId]);\n\n      // Load metadata as object bounds are not included in the pick result\n      const objectData = await scene.getObjectReference(result.objectId).loadMetaData();",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_metadata/fly_to.ts", "loc": { "lines": { "from": 54, "to": 81 } } }
    }
  ],
  [
    "575",
    {
      "pageContent": "// Load metadata as object bounds are not included in the pick result\n      const objectData = await scene.getObjectReference(result.objectId).loadMetaData();\n\n      // No calculation needed for single object\n      if (objectData.bounds?.sphere) {\n        view.camera.controller.zoomTo(objectData.bounds.sphere);\n      }\n    };\n  } catch (e) {\n    // Handle however you like\n    console.warn(e);\n  }\n}\n\nfunction getTotalBoundingSphere(nodes: WebglApi.HierarcicalObjectReference[], glMatrix: typeof GlMatrix): WebglApi.BoundingSphere | undefined {\n  const vec3 = glMatrix.vec3;\n\n  const spheres: WebglApi.BoundingSphere[] = [];\n  for (const node of nodes) {\n    const sphere = node.bounds?.sphere;\n\n    if (sphere) {\n      spheres.push(sphere);\n    }\n  }\n\n  if (spheres.length < 1) {\n    return;\n  }\n\n  const center = vec3.clone(spheres[0].center);\n  let radius = spheres[0].radius;",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_metadata/fly_to.ts", "loc": { "lines": { "from": 81, "to": 112 } } }
    }
  ],
  [
    "576",
    {
      "pageContent": "if (sphere) {\n      spheres.push(sphere);\n    }\n  }\n\n  if (spheres.length < 1) {\n    return;\n  }\n\n  const center = vec3.clone(spheres[0].center);\n  let radius = spheres[0].radius;\n\n  for (let sphere of spheres) {\n    const delta = vec3.sub(vec3.create(), sphere.center, center);\n    const dist = vec3.len(delta) + sphere.radius;\n\n    if (dist > radius) {\n      radius = (radius + dist) * 0.5;\n      vec3.add(center, center, vec3.scale(delta, delta, 1 - radius / dist));\n    }\n  }\n\n  return { center, radius };\n}\n\nfunction highlightObjects(scene: WebglApi.Scene, ids: number[]) {\n  // Reset highlights\n  scene.objectHighlighter.objectHighlightIndices.fill(0);\n\n  // Set highlight to 1 for the selected objects\n  // In this case the highlight is green, set in initView()\n  ids.forEach((id) => (scene.objectHighlighter.objectHighlightIndices[id] = 1));",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_metadata/fly_to.ts", "loc": { "lines": { "from": 112, "to": 143 } } }
    }
  ],
  [
    "577",
    {
      "pageContent": "// Set highlight to 1 for the selected objects\n  // In this case the highlight is green, set in initView()\n  ids.forEach((id) => (scene.objectHighlighter.objectHighlightIndices[id] = 1));\n\n  scene.objectHighlighter.commit();\n}\n// HiddenRangeStarted\nasync function initView(webglApi: typeof WebglApi, dataJsAPI: typeof DataJsApi, canvas: HTMLCanvasElement) {\n  // Initialize the data API with the Novorender data server service\n  const dataApi = dataJsAPI.createAPI({\n    serviceUrl: \"https://data.novorender.com/api\",\n  });\n\n  // Load scene metadata\n  const sceneData = await dataApi\n    // Condos scene ID, but can be changed to any public scene ID\n    .loadScene(\"3b5e65560dc4422da5c7c3f827b6a77c\")\n    .then((res) => {\n      if (\"error\" in res) {\n        throw res;\n      } else {\n        return res;\n      }\n    });\n\n  // Destructure relevant properties into variables\n  const { url, db, settings, camera: cameraParams } = sceneData;\n\n  // initialize the webgl api\n  const api = webglApi.createAPI();",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_metadata/fly_to.ts", "loc": { "lines": { "from": 143, "to": 172 } } }
    }
  ],
  [
    "578",
    {
      "pageContent": "// Destructure relevant properties into variables\n  const { url, db, settings, camera: cameraParams } = sceneData;\n\n  // initialize the webgl api\n  const api = webglApi.createAPI();\n\n  // Load scene\n  const scene = await api.loadScene(url, db);\n\n  // Create a view with the scene's saved settings\n  const view = await api.createView(settings, canvas);\n\n  // Set resolution scale to 1\n  view.applySettings({ quality: { resolution: { value: 1 } } });\n\n  // Create a camera controller with the saved parameters with turntable as fallback\n  const camera = cameraParams ?? ({ kind: \"turntable\" } as any);\n  view.camera.controller = api.createCameraController(camera, canvas);\n\n  // Assign the scene to the view\n  view.scene = scene;\n\n  // make object highlights\n  const highlightGroup0 = api.createHighlight({ kind: \"neutral\" });\n  const highlightGroup1 = api.createHighlight({\n    kind: \"color\",\n    color: [0, 1, 0],\n  });\n  view.settings.objectHighlights = [highlightGroup0, highlightGroup1];\n\n  return view;\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_metadata/fly_to.ts", "loc": { "lines": { "from": 172, "to": 203 } } }
    }
  ],
  [
    "579",
    {
      "pageContent": "return view;\n}\n\nasync function run(view: WebglApi.View, canvas: HTMLCanvasElement) {\n  // Create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: { width: canvas.width, height: canvas.height },\n      });\n    }\n  }).observe(canvas);\n\n  // render loop\n  while (true) {\n    // Render frame\n    const output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    (output as any).dispose();\n  }\n}\n// HiddenRangeEnded",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_metadata/fly_to.ts", "loc": { "lines": { "from": 203, "to": 238 } } }
    }
  ],
  [
    "580",
    {
      "pageContent": "import fromPick from \"!!./metadata_from_pick.ts?raw\";\nimport fromSearch from \"!!./metadata_from_search.ts?raw\";\nimport flyTo from \"!!./fly_to.ts?raw\";\nimport { demo } from \"../../misc\";\n\nexport const objectMetadata = {\n  ...demo(\"object_metadata\", \"metadata_from_pick\", fromPick, {}, \"Metadata from picking objects.\"),\n  ...demo(\"object_metadata\", \"metadata_from_search\", fromSearch, {}, \"Metadata from search.\"),\n  ...demo(\"object_metadata\", \"fly_to\", flyTo, {}, \"How to fly to objects using CameraController.zoomTo(), When the example is run it will first do a quick search for 4 objects and fly to them. After that it will fly to any object you click.\"),\n};",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_metadata/index.ts", "loc": { "lines": { "from": 1, "to": 10 } } }
    }
  ],
  [
    "581",
    {
      "pageContent": "// HiddenRangeStarted\nimport * as WebglApi from \"@novorender/webgl-api\";\nimport * as MeasureApi from \"@novorender/measure-api\";\nimport * as DataJsApi from \"@novorender/data-js-api\";\nimport * as GlMatrix from \"gl-matrix\";\n\nexport interface IParams {\n  webglApi: typeof WebglApi;\n  measureApi: typeof MeasureApi;\n  dataJsApi: typeof DataJsApi;\n  glMatrix: typeof GlMatrix;\n  canvas: HTMLCanvasElement;\n  canvas2D: HTMLCanvasElement;\n  previewCanvas: HTMLCanvasElement;\n}\n\n// we export this function to our react component which will then execute it once the demo started running.\nexport function showTip() {\n  return openAlert(\"Select any object to display its metadata\");\n}\n\n// HiddenRangeEnded\nexport async function main({ webglApi, dataJsApi, canvas }: IParams) {\n  try {\n    // load scene into data api, create webgl api, view and load scene.\n    const view = await initView(webglApi, dataJsApi, canvas);\n\n    const scene = view.scene!;",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_metadata/metadata_from_pick.ts", "loc": { "lines": { "from": 1, "to": 28 } } }
    }
  ],
  [
    "582",
    {
      "pageContent": "const scene = view.scene!;\n\n    // run render loop and canvas resizeObserver\n    run(view, canvas);\n\n    // Listen to click events on the canvas\n    canvas.onclick = async (event) => {\n      // Pick object at clicked position\n      const result = await view.lastRenderOutput?.pick(event.offsetX, event.offsetY);\n\n      // If picked position does not have any objects result will be undefined\n      if (!result) {\n        return;\n      }\n\n      // Highlight object that the metadata belong to\n      highlightObject(scene, result.objectId);\n\n      // Load metadata\n      const objectData = await scene.getObjectReference(result.objectId).loadMetaData();\n\n      // Display metadata\n      openInfoPane(objectData);\n    };\n  } catch (e) {\n    // Handle however you like\n    console.warn(e);\n  }\n}\n\nfunction highlightObject(scene: WebglApi.Scene, id: number): void {\n  // Reset highlights\n  scene.objectHighlighter.objectHighlightIndices.fill(0);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_metadata/metadata_from_pick.ts", "loc": { "lines": { "from": 28, "to": 60 } } }
    }
  ],
  [
    "583",
    {
      "pageContent": "function highlightObject(scene: WebglApi.Scene, id: number): void {\n  // Reset highlights\n  scene.objectHighlighter.objectHighlightIndices.fill(0);\n\n  // Set highlight to 1 for the selected object\n  // In this case the highlight is green, set in initView()\n  scene.objectHighlighter.objectHighlightIndices[id] = 1;\n\n  scene.objectHighlighter.commit();\n}\n\n// HiddenRangeStarted\nasync function initView(webglApi: typeof WebglApi, dataJsAPI: typeof DataJsApi, canvas: HTMLCanvasElement): Promise<WebglApi.View> {\n  // Initialize the data API with the Novorender data server service\n  const dataApi = dataJsAPI.createAPI({\n    serviceUrl: \"https://data.novorender.com/api\",\n  });\n\n  // Load scene metadata\n  const sceneData = await dataApi\n    .loadScene(\"3b5e65560dc4422da5c7c3f827b6a77c\") // Condos scene ID, but can be changed to any public scene ID\n    .then((res) => {\n      if (\"error\" in res) {\n        throw res;\n      } else {\n        return res;\n      }\n    });",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_metadata/metadata_from_pick.ts", "loc": { "lines": { "from": 60, "to": 87 } } }
    }
  ],
  [
    "584",
    {
      "pageContent": "// Destructure relevant properties into variables\n  const { url, db, settings, camera: cameraParams } = sceneData;\n\n  // initialize the webgl api\n  const api = webglApi.createAPI();\n\n  // Load scene\n  const scene = await api.loadScene(url, db);\n\n  // Create a view with the scene's saved settings\n  const view = await api.createView(settings, canvas);\n\n  // Set resolution scale to 1\n  view.applySettings({ quality: { resolution: { value: 1 } } });\n\n  // Create a camera controller with the saved parameters with turntable as fallback\n  const camera = cameraParams ?? ({ kind: \"turntable\" } as any);\n  view.camera.controller = api.createCameraController(camera, canvas);\n\n  // Assign the scene to the view\n  view.scene = scene;\n\n  // make object highlights\n  const highlightGroup0 = api.createHighlight({ kind: \"neutral\" });\n  const highlightGroup1 = api.createHighlight({\n    kind: \"color\",\n    color: [0, 1, 0],\n  });\n  view.settings.objectHighlights = [highlightGroup0, highlightGroup1];\n\n  return view;\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_metadata/metadata_from_pick.ts", "loc": { "lines": { "from": 89, "to": 120 } } }
    }
  ],
  [
    "585",
    {
      "pageContent": "return view;\n}\n\nasync function run(view: WebglApi.View, canvas: HTMLCanvasElement): Promise<void> {\n  // Create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: { width: canvas.width, height: canvas.height },\n      });\n    }\n  }).observe(canvas);\n\n  // render loop\n  while (true) {\n    // Render frame\n    const output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    (output as any).dispose();\n  }\n}\n// HiddenRangeEnded",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_metadata/metadata_from_pick.ts", "loc": { "lines": { "from": 120, "to": 155 } } }
    }
  ],
  [
    "586",
    {
      "pageContent": "// HiddenRangeStarted\nimport * as WebglApi from \"@novorender/webgl-api\";\nimport * as MeasureApi from \"@novorender/measure-api\";\nimport * as DataJsApi from \"@novorender/data-js-api\";\nimport * as GlMatrix from \"gl-matrix\";\n\nexport interface IParams {\n  webglApi: typeof WebglApi;\n  measureApi: typeof MeasureApi;\n  dataJsApi: typeof DataJsApi;\n  glMatrix: typeof GlMatrix;\n  canvas: HTMLCanvasElement;\n  canvas2D: HTMLCanvasElement;\n  previewCanvas: HTMLCanvasElement;\n}\n\n// HiddenRangeEnded\nexport async function main({ webglApi, dataJsApi, canvas }: IParams) {\n  try {\n    // load scene into data api, create webgl api, view and load scene.\n    const view = await initView(webglApi, dataJsApi, canvas);\n\n    const scene = view.scene!;\n\n    // run render loop and canvas resizeObserver\n    run(view, canvas);\n\n    const iterator = scene.search({\n      searchPattern: \"Roof\",\n      // True so that metadata is preloaded\n      full: true,\n    });\n\n    const searchResult: WebglApi.ObjectData[] = [];",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_metadata/metadata_from_search.ts", "loc": { "lines": { "from": 1, "to": 34 } } }
    }
  ],
  [
    "587",
    {
      "pageContent": "const iterator = scene.search({\n      searchPattern: \"Roof\",\n      // True so that metadata is preloaded\n      full: true,\n    });\n\n    const searchResult: WebglApi.ObjectData[] = [];\n\n    // Use the first 5 results to keep the properties in the property box\n    // relatively short\n    for (let i = 0; i < 5; i++) {\n      const iteratorResult = await iterator.next();\n\n      if (iteratorResult.done) {\n        break;\n      }\n\n      // Because we have set the search option \"full: true\"\n      // .loadMetadata() will not result in any more requests being made\n      // Try flipping it to false and see the difference in the network request log\n      const objectWithMetadata = await iteratorResult.value.loadMetaData();\n      searchResult.push(objectWithMetadata);\n    }",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_metadata/metadata_from_search.ts", "loc": { "lines": { "from": 34, "to": 56 } } }
    }
  ],
  [
    "588",
    {
      "pageContent": "// Highlight results\n    highlightObjects(\n      scene,\n      searchResult.map((object) => object.id)\n    );\n    // Display metadata\n    openInfoPane(searchResult);\n  } catch (e) {\n    // Handle however you like\n    console.warn(e);\n  }\n}\n\nfunction highlightObjects(scene: WebglApi.Scene, ids: number[]): void {\n  // Reset highlights\n  scene.objectHighlighter.objectHighlightIndices.fill(0);\n\n  // Set highlight to 1 for the selected objects\n  // In this case the highlight is green, set in initView()\n  ids.forEach((id) => (scene.objectHighlighter.objectHighlightIndices[id] = 1));\n\n  scene.objectHighlighter.commit();\n}\n\n// HiddenRangeStarted\nasync function initView(webglApi: typeof WebglApi, dataJsAPI: typeof DataJsApi, canvas: HTMLCanvasElement): Promise<WebglApi.View> {\n  // Initialize the data API with the Novorender data server service\n  const dataApi = dataJsAPI.createAPI({\n    serviceUrl: \"https://data.novorender.com/api\",\n  });",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_metadata/metadata_from_search.ts", "loc": { "lines": { "from": 58, "to": 87 } } }
    }
  ],
  [
    "589",
    {
      "pageContent": "// Load scene metadataa\n  const sceneData = await dataApi\n    // Condos scene ID, but can be changed to any public scene ID\n    .loadScene(\"3b5e65560dc4422da5c7c3f827b6a77c\")\n    .then((res) => {\n      if (\"error\" in res) {\n        throw res;\n      } else {\n        return res;\n      }\n    });\n\n  // Destructure relevant properties into variables\n  const { url, db, settings, camera: cameraParams } = sceneData;\n\n  // initialize the webgl api\n  const api = webglApi.createAPI();\n\n  // Load scene\n  const scene = await api.loadScene(url, db);\n\n  // Create a view with the scene's saved settings\n  const view = await api.createView(settings, canvas);\n\n  // Set resolution scale to 1\n  view.applySettings({ quality: { resolution: { value: 1 } } });\n\n  // Create a camera controller with the saved parameters with turntable as fallback\n  const camera = cameraParams ?? ({ kind: \"turntable\" } as any);\n  view.camera.controller = api.createCameraController(camera, canvas);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_metadata/metadata_from_search.ts", "loc": { "lines": { "from": 89, "to": 118 } } }
    }
  ],
  [
    "590",
    {
      "pageContent": "// Assign the scene to the view\n  view.scene = scene;\n\n  // make object highlights\n  const highlightGroup0 = api.createHighlight({ kind: \"neutral\" });\n  const highlightGroup1 = api.createHighlight({\n    kind: \"color\",\n    color: [0, 1, 0],\n  });\n  view.settings.objectHighlights = [highlightGroup0, highlightGroup1];\n\n  return view;\n}\n\nasync function run(view: WebglApi.View, canvas: HTMLCanvasElement): Promise<void> {\n  // Create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: { width: canvas.width, height: canvas.height },\n      });\n    }\n  }).observe(canvas);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_metadata/metadata_from_search.ts", "loc": { "lines": { "from": 120, "to": 147 } } }
    }
  ],
  [
    "591",
    {
      "pageContent": "// render loop\n  while (true) {\n    // Render frame\n    const output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    (output as any).dispose();\n  }\n}\n// HiddenRangeEnded",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_metadata/metadata_from_search.ts", "loc": { "lines": { "from": 149, "to": 166 } } }
    }
  ],
  [
    "592",
    {
      "pageContent": "import pick from \"!!./pick.ts?raw\";\nimport { demo } from \"../../misc\";\n\nexport const objectSelection = {\n  ...demo(\"object_selection\", \"pick\", pick, {}, \"Highlighting sets/groups of objects.\"),\n};",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_selection/index.ts", "loc": { "lines": { "from": 1, "to": 6 } } }
    }
  ],
  [
    "593",
    {
      "pageContent": "// HiddenRangeStarted\nimport * as WebglApi from \"@novorender/webgl-api\";\nimport * as MeasureApi from \"@novorender/measure-api\";\nimport * as DataJsApi from \"@novorender/data-js-api\";\nimport * as GlMatrix from \"gl-matrix\";\n\nexport interface IParams {\n  webglApi: typeof WebglApi;\n  measureApi: typeof MeasureApi;\n  dataJsApi: typeof DataJsApi;\n  glMatrix: typeof GlMatrix;\n  canvas: HTMLCanvasElement;\n  canvas2D: HTMLCanvasElement;\n  previewCanvas: HTMLCanvasElement;\n}\n\n// HiddenRangeEnded\nexport async function main({ webglApi, canvas }: IParams) {\n  // initialize the webgl api\n  const api = webglApi.createAPI();\n\n  // Create View, camera controller and load scene\n  const view = await initView(api, canvas);\n\n  const scene = view.scene!;\n\n  // run render loop and canvas resizeObserver\n  run(view, canvas);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_selection/pick.ts", "loc": { "lines": { "from": 1, "to": 28 } } }
    }
  ],
  [
    "594",
    {
      "pageContent": "// Create View, camera controller and load scene\n  const view = await initView(api, canvas);\n\n  const scene = view.scene!;\n\n  // run render loop and canvas resizeObserver\n  run(view, canvas);\n\n  // Set up highlight groups\n  const deSaturated = api.createHighlight({\n    kind: \"hsla\",\n    saturation: 0.5,\n  });\n  const limeGreen = api.createHighlight({\n    kind: \"color\",\n    color: [0, 1, 0],\n  });\n\n  view.settings.objectHighlights = [deSaturated, limeGreen];\n\n  // Listen to click events to pick objects\n  canvas.onclick = async (e: MouseEvent) => {\n    const result = await view.lastRenderOutput?.pick(e.offsetX, e.offsetY);\n    if (result) {\n      // Reset highlights\n      // Here we set all objects to use the highlight found at view.settings.objectHighlights[0]\n      // In this case \"deSaturated\"\n      scene.objectHighlighter.objectHighlightIndices.fill(0);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_selection/pick.ts", "loc": { "lines": { "from": 28, "to": 55 } } }
    }
  ],
  [
    "595",
    {
      "pageContent": "// Set selected object to use highlight found at view.settings.objectHighlights[1]\n      // In this case \"limeGreen\"\n      scene.objectHighlighter.objectHighlightIndices[result.objectId] = 1;\n\n      scene.objectHighlighter.commit();\n    }\n  };\n}\n// HiddenRangeStarted\nasync function initView(api: WebglApi.API, canvas: HTMLCanvasElement): Promise<WebglApi.View> {\n  // Create a view\n  const view = await api.createView(\n    { background: { color: [0, 0, 0, 0] } }, // Transparent\n    canvas\n  );\n\n  // Provide a camera controller\n  view.camera.controller = api.createCameraController({ kind: \"flight\" }, canvas);\n\n  // Load the Condos demo scene\n  view.scene = await api.loadScene(WebglApi.WellKnownSceneUrls.condos);\n\n  return view;\n}\nasync function run(view: WebglApi.View, canvas: HTMLCanvasElement): Promise<void> {\n  // Create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_selection/pick.ts", "loc": { "lines": { "from": 57, "to": 83 } } }
    }
  ],
  [
    "596",
    {
      "pageContent": "// Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: { width: canvas.width, height: canvas.height },\n      });\n    }\n  }).observe(canvas);\n\n  // render loop\n  while (true) {\n    // Render frame\n    const output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    (output as any).dispose();\n  }\n}\n// HiddenRangeEnded",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/object_selection/pick.ts", "loc": { "lines": { "from": 85, "to": 113 } } }
    }
  ],
  [
    "597",
    {
      "pageContent": "import pdfPlacement from \"!!./pdf_placement.ts?raw\";\n\nimport { demo } from \"../../misc\";\n\nexport const PDFPlacement = {\n  ...demo(\"pdf_placement\", \"pdf_placement\", pdfPlacement, { enablePreviewCanvas: true }, \"Use two reference points on both the model and the PDF to place and scale the PDF in 3D space.\"),\n};",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/pdf_placement/index.ts", "loc": { "lines": { "from": 1, "to": 7 } } }
    }
  ],
  [
    "598",
    {
      "pageContent": "// HiddenRangeStarted\nimport * as WebglApi from \"@novorender/webgl-api\";\nimport * as MeasureApi from \"@novorender/measure-api\";\nimport * as DataJsApi from \"@novorender/data-js-api\";\nimport * as GlMatrix from \"gl-matrix\";\nimport type { API, RecursivePartial, RenderSettings, RenderOutput, View, OrthoControllerParams, Scene } from \"@novorender/webgl-api\";\nimport type { SceneData } from \"@novorender/data-js-api\";\nimport type { DrawPart, DrawProduct } from \"@novorender/measure-api\";\nimport type { vec2, ReadonlyVec3 } from \"gl-matrix\";\n\nexport interface IParams {\n  webglApi: typeof WebglApi;\n  measureApi: typeof MeasureApi;\n  dataJsApi: typeof DataJsApi;\n  glMatrix: typeof GlMatrix;\n  canvas: HTMLCanvasElement;\n  canvas2D: HTMLCanvasElement;\n  previewCanvas: HTMLCanvasElement;\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/pdf_placement/pdf_placement.ts", "loc": { "lines": { "from": 1, "to": 19 } } }
    }
  ],
  [
    "599",
    {
      "pageContent": "// we export this function to our react component which will then execute it once the demo started running.\nexport function showTip() {\n  return openAlert(\"Choose 2 points from the 3D view (on the left) and 2 points from the PDF view (on the right), both in the identical locations, to show the computations.\");\n}\nconst DATA_API_SERVICE_URL = \"https://data.novorender.com/api\";\n\n// HiddenRangeEnded\nexport async function main({ webglApi, measureApi, dataJsApi, glMatrix, canvas, canvas2D, previewCanvas }: IParams) {\n  // Initialize the data API with the Novorender data server service\n  const dataApi = dataJsApi.createAPI({\n    // we're loading a public scene so it doesn't require any auth header,\n    // see `https://docs.novorender.com/docs/tutorials/loading_scenes#private-scenes` if you want to load private scenes.\n    serviceUrl: DATA_API_SERVICE_URL,\n  });\n\n  // Initialize measureApi instance\n  const _measureApi = await measureApi.createMeasureAPI();",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/pdf_placement/pdf_placement.ts", "loc": { "lines": { "from": 21, "to": 37 } } }
    }
  ],
  [
    "600",
    {
      "pageContent": "// Initialize measureApi instance\n  const _measureApi = await measureApi.createMeasureAPI();\n\n  // load a public scene\n  const pdfScene = (await dataApi.loadScene(\"4f50d89ea8cd493ea3bc16f504ad5a1f\")) as SceneData;\n\n  // render config, adjust however you want\n  const renderSettings: RecursivePartial<RenderSettings> = {\n    quality: {\n      resolution: { value: 1 }, // Set resolution scale to 1\n    },\n    clippingVolume: {\n      enabled: true,\n      mode: \"union\",\n      planes: [[0, 1, 0, -5.5]],\n    },\n  };\n\n  // create webgl api, view and load scene and set cameraController.\n  const view = await initView(webglApi, canvas, pdfScene, renderSettings);\n\n  // @todo - re-enable\n  // const elevation = await getElevation(view.scene as Scene);\n\n  let preview: string | undefined;\n\n  if (pdfScene && !(pdfScene as any).error) {\n    preview = await downloadPdfPreview(pdfScene as SceneData);\n  }\n  const previewCanvasContext2D = previewCanvas.getContext(\"2d\");",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/pdf_placement/pdf_placement.ts", "loc": { "lines": { "from": 37, "to": 66 } } }
    }
  ],
  [
    "601",
    {
      "pageContent": "if (pdfScene && !(pdfScene as any).error) {\n    preview = await downloadPdfPreview(pdfScene as SceneData);\n  }\n  const previewCanvasContext2D = previewCanvas.getContext(\"2d\");\n\n  if (preview) {\n    // image to draw on PDF view (right side).\n    const img = new Image();\n    img.onload = () => {\n      if (previewCanvasContext2D) {\n        previewCanvasContext2D.drawImage(\n          img,\n          0,\n          0,\n          previewCanvas.width,\n          previewCanvas.height\n          // 0,\n          // 0,\n          // previewCanvas.width,\n          // previewCanvas.height\n        );\n      }\n    };\n    img.src = preview as string;\n  } else {\n    // just to show error details on previewCanvas, if preview failed to load\n    showErrorDetails(previewCanvas, previewCanvasContext2D, (pdfScene as any).error);\n  }",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/pdf_placement/pdf_placement.ts", "loc": { "lines": { "from": 66, "to": 93 } } }
    }
  ],
  [
    "602",
    {
      "pageContent": "/** vars for 3D view click listener */\n  const context2D = canvas2D.getContext(\"2d\");\n  let currentOutput: RenderOutput;\n  let selectEntity: 1 | 2 = 1;\n  let posA: ReadonlyVec3 | undefined;\n  let posB: ReadonlyVec3 | undefined;\n  let draw: MeasureApi.DrawProduct | undefined;\n  /** END */\n\n  // 3D view click listener\n  canvas.onclick = async (e: MouseEvent) => {\n    if (currentOutput) {\n      const pickInfo = await currentOutput.pick(e.offsetX, e.offsetY);\n      if (pickInfo) {\n        if (selectEntity === 1) {\n          posA = pickInfo.position;\n          selectEntity = 2;\n        } else {\n          posB = pickInfo.position;\n          selectEntity = 1;\n        }\n        if (posA && posB) {\n          draw = _measureApi.getDrawObjectFromPoints(view, [posA, posB], false, false);\n        } else if (posA) {\n          draw = _measureApi.getDrawObjectFromPoints(view, [posA], false, false);\n        }\n        await drawProduct(context2D, draw, 3, canvas2D);\n      }\n    }\n  };",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/pdf_placement/pdf_placement.ts", "loc": { "lines": { "from": 95, "to": 124 } } }
    }
  ],
  [
    "603",
    {
      "pageContent": "/** vars for PDF view (right-side) click listener */\n  let pdfPosA: vec2 | undefined;\n  let pdfPosB: vec2 | undefined;\n  let imgHeight: number;\n  let imgWidth: number;\n  let previewCanvasWidth: number;\n  let previewCanvasHeight: number;\n  let updatedPdfPosA: vec2 | null;\n  let updatedPdfPosB: vec2 | null;\n  let selectingA = true;\n  /** END */\n\n  // Preview Canvas (right-side) click listener\n  previewCanvas.onclick = (e: MouseEvent) => {\n    // destructure necessary glMatrix functions\n    const {\n      vec2: { fromValues, dist, sub, create, normalize, dot },\n    } = glMatrix;\n\n    if (previewCanvas && preview && previewCanvasContext2D) {\n      // check if positions were updated via pane resizes\n      // not necessary if you don't resize pane/canvas\n      if (updatedPdfPosA) {\n        pdfPosA = updatedPdfPosA;\n        updatedPdfPosA = null;\n      }\n      if (updatedPdfPosB) {\n        pdfPosB = updatedPdfPosB;\n        updatedPdfPosB = null;\n      }",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/pdf_placement/pdf_placement.ts", "loc": { "lines": { "from": 126, "to": 155 } } }
    }
  ],
  [
    "604",
    {
      "pageContent": "previewCanvasWidth = previewCanvas.width;\n      previewCanvasHeight = previewCanvas.height;\n\n      const x = e.offsetX;\n      const y = e.offsetY;",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/pdf_placement/pdf_placement.ts", "loc": { "lines": { "from": 157, "to": 161 } } }
    }
  ],
  [
    "605",
    {
      "pageContent": "if (selectingA) {\n        pdfPosA = fromValues(x, y);\n      } else {\n        pdfPosB = fromValues(x, y);\n      }\n      selectingA = !selectingA;\n      if (preview && previewCanvasContext2D) {\n        const img = new Image();\n        img.onload = () => {\n          if (previewCanvasContext2D && preview) {\n            // Redraw the image to the preview canvas\n            previewCanvasContext2D.clearRect(0, 0, previewCanvasWidth, previewCanvasHeight);\n            previewCanvasContext2D.drawImage(img, 0, 0, previewCanvasWidth, previewCanvasHeight);\n            imgHeight = img.height;\n            imgWidth = img.width;\n            if (pdfPosA) {\n              drawArc(previewCanvasContext2D, pdfPosA[0], pdfPosA[1], \"green\");\n            }\n            if (pdfPosB) {\n              drawArc(previewCanvasContext2D, pdfPosB[0], pdfPosB[1], \"blue\");\n            }\n          }\n        };\n        img.src = preview;\n      }\n      if (posA && posB && draw) {\n        if (pdfPosA && pdfPosB) {",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/pdf_placement/pdf_placement.ts", "loc": { "lines": { "from": 163, "to": 189 } } }
    }
  ],
  [
    "606",
    {
      "pageContent": "}\n          }\n        };\n        img.src = preview;\n      }\n      if (posA && posB && draw) {\n        if (pdfPosA && pdfPosB) {\n          const modelPosA = fromValues(posA[0], posA[2] * -1);\n          const modelPosB = fromValues(posB[0], posB[2] * -1);\n          const canvasToImageScaleX = imgWidth / previewCanvasWidth;\n          const canvasToImageScaleY = imgHeight / previewCanvasHeight;\n          //Invert Y axis on the pixel positions on the pdf image\n          const pixelPosA = fromValues(pdfPosA[0] * canvasToImageScaleX, imgHeight - pdfPosA[1] * canvasToImageScaleY);\n          const pixelPosB = fromValues(pdfPosB[0] * canvasToImageScaleX, imgHeight - pdfPosB[1] * canvasToImageScaleY);\n          const pixelLength = dist(pixelPosA, pixelPosB);\n          const modelLength = dist(modelPosA, modelPosB);\n          const modelDir = sub(create(), modelPosB, modelPosA);\n          normalize(modelDir, modelDir);\n          const pixDir = sub(create(), pixelPosA, pixelPosB);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/pdf_placement/pdf_placement.ts", "loc": { "lines": { "from": 189, "to": 207 } } }
    }
  ],
  [
    "607",
    {
      "pageContent": "const modelDir = sub(create(), modelPosB, modelPosA);\n          normalize(modelDir, modelDir);\n          const pixDir = sub(create(), pixelPosA, pixelPosB);\n          normalize(pixDir, pixDir);\n          const scale = modelLength / pixelLength;\n          const radAroundZ = Math.acos(dot(modelDir, pixDir)) * -1;\n          const degreesAroundZ = (radAroundZ / Math.PI) * 180;\n          const pdfToWorldScale = imgHeight * scale;\n          const translation = sub(create(), modelPosA, fromValues(pixelPosA[0] * scale * Math.cos(radAroundZ), pixelPosA[1] * scale * Math.sin(radAroundZ)));",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/pdf_placement/pdf_placement.ts", "loc": { "lines": { "from": 207, "to": 215 } } }
    }
  ],
  [
    "608",
    {
      "pageContent": "// calculations to show/log in the info pane\n          const calculations = { radians: radAroundZ, degrees: degreesAroundZ, pdfToWorldScale, translation };\n          openInfoPane(calculations, \"PDF Transformation\");\n        }\n      }\n    }\n  };\n\n  // Create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // runs resizeObserver for main canvas (3D view), just to update width/height.\n  runResizeObserver(view, canvas);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/pdf_placement/pdf_placement.ts", "loc": { "lines": { "from": 217, "to": 229 } } }
    }
  ],
  [
    "609",
    {
      "pageContent": "// resizeObserver for preview canvas (right-side) to re-draw images/arc or update size on pane resizes.\n  new ResizeObserver((entries) => {\n    for (const { contentRect } of entries) {\n      const scaledWidth = contentRect.width / previewCanvasWidth;\n      const scaledHeight = contentRect.height / previewCanvasHeight;\n      if (pdfPosA) {\n        updatedPdfPosA = glMatrix.vec2.fromValues(scaledWidth * pdfPosA[0], scaledHeight * pdfPosA[1]);\n      }\n      if (pdfPosB) {\n        updatedPdfPosB = glMatrix.vec2.fromValues(scaledWidth * pdfPosB[0], scaledHeight * pdfPosB[1]);\n      }\n      if (preview && previewCanvasContext2D) {\n        const img = new Image();\n        img.onload = () => {\n          if (previewCanvasContext2D && preview) {\n            previewCanvasContext2D.clearRect(0, 0, contentRect.width, contentRect.height);\n            // Redraw the image to the preview canvas\n            previewCanvasContext2D.drawImage(img, 0, 0, contentRect.width, contentRect.height);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/pdf_placement/pdf_placement.ts", "loc": { "lines": { "from": 231, "to": 248 } } }
    }
  ],
  [
    "610",
    {
      "pageContent": "// Redraw the image to the preview canvas\n            previewCanvasContext2D.drawImage(img, 0, 0, contentRect.width, contentRect.height);\n            if (updatedPdfPosA) {\n              drawArc(previewCanvasContext2D, updatedPdfPosA[0], updatedPdfPosA[1], \"green\");\n            }\n            if (updatedPdfPosB) {\n              drawArc(previewCanvasContext2D, updatedPdfPosB[0], updatedPdfPosB[1], \"blue\");\n            }\n          }\n        };\n        img.src = preview;\n      }\n    }\n  }).observe(previewCanvas);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/pdf_placement/pdf_placement.ts", "loc": { "lines": { "from": 248, "to": 261 } } }
    }
  ],
  [
    "611",
    {
      "pageContent": "// render loop\n  while (true) {\n    // Render frame\n    currentOutput = await view.render();\n    {\n      // Finalize output image\n      const image = await currentOutput.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    if (posA && posB) {\n      draw = _measureApi.getDrawObjectFromPoints(view, [posA, posB], false, false);\n    } else if (posA) {\n      draw = _measureApi.getDrawObjectFromPoints(view, [posA], false, false);\n    }\n    await drawProduct(context2D, draw, 3, canvas2D);\n    (currentOutput as any).dispose();\n  }\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/pdf_placement/pdf_placement.ts", "loc": { "lines": { "from": 263, "to": 285 } } }
    }
  ],
  [
    "612",
    {
      "pageContent": "async function getElevation(scene: Scene): Promise<number | undefined> {\n  try {\n    const iterator = scene.search(\n      {\n        searchPattern: [{ property: \"IfcClass\", value: \"IfcBuildingStorey\", exact: true }],\n      },\n      undefined\n    );\n    const iteratorResult = await iterator.next();\n    const data = await iteratorResult.value.loadMetaData();\n    for (const prop of data.properties) {\n      if (prop[0] === \"Novorender/Elevation\") {\n        return Number(prop[1]);\n      }\n    }\n    return undefined;\n  } catch (error) {\n    console.log(error);\n  }\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/pdf_placement/pdf_placement.ts", "loc": { "lines": { "from": 287, "to": 306 } } }
    }
  ],
  [
    "613",
    {
      "pageContent": "async function downloadPdfPreview(scene: SceneData): Promise<string | undefined> {\n  if (scene.db) {\n    // perform a db search to get the metadata\n    const iterator = scene.db.search(\n      {\n        searchPattern: [{ property: \"Novorender/Document/Preview\", exact: true }],\n      },\n      undefined\n    );\n    const iteratorResult = await iterator.next();\n    const data = await iteratorResult.value.loadMetaData();\n    for (const prop of data.properties) {\n      if (prop[0] === \"Novorender/Document/Preview\") {\n        const url = new URL((scene as any).url);\n        url.pathname += prop[1];\n        // This is the PDF image URL\n        return url.toString();\n      }\n    }\n  }\n  return undefined;\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/pdf_placement/pdf_placement.ts", "loc": { "lines": { "from": 308, "to": 329 } } }
    }
  ],
  [
    "614",
    {
      "pageContent": "// HiddenRangeStarted\nfunction showErrorDetails(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D | null, error: string) {\n  ctx!.font = \"18px Arial\";\n  ctx!.fillStyle = \"red\";\n  ctx!.textAlign = \"center\";\n  ctx!.fillText(`Failed to load the PDF Preview.`, canvas.width / 2, canvas.height / 2);\n  ctx!.fillText(`Error: ${error}`, canvas.width / 2, canvas.height / 1.8);\n}\n\nasync function initView(webglApi: typeof WebglApi, canvas: HTMLCanvasElement, pdfScene: SceneData, renderSettings: RecursivePartial<RenderSettings>): Promise<View> {\n  // Destructure relevant properties into variables\n  const { settings } = pdfScene;\n\n  // initialize the webgl api\n  const api = webglApi.createAPI();\n\n  // Load scene\n  const scene = await api.loadScene(WebglApi.WellKnownSceneUrls.condos);\n\n  // Create a view with the scene's saved settings\n  const view = await api.createView(settings, canvas);\n\n  view.applySettings(renderSettings);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/pdf_placement/pdf_placement.ts", "loc": { "lines": { "from": 331, "to": 353 } } }
    }
  ],
  [
    "615",
    {
      "pageContent": "// Create a view with the scene's saved settings\n  const view = await api.createView(settings, canvas);\n\n  view.applySettings(renderSettings);\n\n  //set up camera controller\n  const orthoController = api.createCameraController({ kind: \"ortho\" }, canvas);\n  (orthoController as any).init([750, 18, -180], [0, 0, 0], view.camera);\n  (orthoController.params as OrthoControllerParams).referenceCoordSys = [1, 0, 0, 0, 0, 0, -1, 0, 0, 1, 0, 0, 728, 7, -230, 1];\n  (orthoController.params as OrthoControllerParams).fieldOfView = 35;\n  view.camera.controller = orthoController;\n\n  // Assign the scene to the view\n  view.scene = scene;\n\n  return view;\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/pdf_placement/pdf_placement.ts", "loc": { "lines": { "from": 353, "to": 369 } } }
    }
  ],
  [
    "616",
    {
      "pageContent": "// Assign the scene to the view\n  view.scene = scene;\n\n  return view;\n}\n\nasync function runResizeObserver(view: View, canvas: HTMLCanvasElement): Promise<void> {\n  // Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const { target, contentRect } of entries) {\n      canvas.width = contentRect.width;\n      canvas.height = contentRect.height;\n      view.applySettings({\n        display: { width: canvas.width, height: canvas.height },\n      });\n    }\n  }).observe(canvas);\n}\n\n// Below are utility functions copied from our frontend (https://github.com/novorender/novoweb/blob/develop/src/features/engine2D/utils.ts)\ninterface ColorSettings {\n  lineColor?: string | CanvasGradient;\n  fillColor?: string;\n  pointColor?: string | { start: string; middle: string; end: string };\n  outlineColor?: string;\n  complexCylinder?: boolean;\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/pdf_placement/pdf_placement.ts", "loc": { "lines": { "from": 369, "to": 395 } } }
    }
  ],
  [
    "617",
    {
      "pageContent": "function drawProduct(context2D: CanvasRenderingContext2D | null, product: DrawProduct | undefined, pixelWidth: number, canvas2D: HTMLCanvasElement): void {\n  if (product) {\n    if (context2D) {\n      context2D.clearRect(0, 0, canvas2D.width, canvas2D.height);\n      for (const obj of (product as DrawProduct).objects) {\n        obj.parts.forEach((part) => {\n          drawPart(context2D, part, pixelWidth);\n        });\n      }\n    }\n  }\n}\n\nfunction drawPart(ctx: CanvasRenderingContext2D, part: DrawPart, pixelWidth: number): void {\n  if (part.vertices2D) {\n    ctx.lineWidth = pixelWidth;\n    drawPoints(ctx, part);\n  }\n}\n\nfunction drawPoints(ctx: CanvasRenderingContext2D, part: DrawPart): void {\n  const colorSettings: Array<ColorSettings> = [\n    { fillColor: \"green\", outlineColor: \"green\", lineColor: \"green\" },\n    { fillColor: \"blue\", outlineColor: \"blue\", lineColor: \"blue\" },\n  ];",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/pdf_placement/pdf_placement.ts", "loc": { "lines": { "from": 397, "to": 421 } } }
    }
  ],
  [
    "618",
    {
      "pageContent": "if (part.vertices2D) {\n    for (let i = 0; i < part.vertices2D.length; ++i) {\n      drawArc(ctx, part.vertices2D[i][0], part.vertices2D[i][1], colorSettings[i].fillColor as string);\n    }\n  }\n}\n\nfunction drawArc(ctx: CanvasRenderingContext2D, x: number, y: number, fillStyle: string): void {\n  ctx.fillStyle = fillStyle;\n  ctx.lineWidth = 2;\n  ctx.strokeStyle = \"black\";\n  ctx.beginPath();\n  ctx.arc(x, y, 5, 0, 2 * Math.PI);\n  ctx.fill();\n  ctx.stroke();\n}\n// HiddenRangeEnded",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/pdf_placement/pdf_placement.ts", "loc": { "lines": { "from": 423, "to": 439 } } }
    }
  ],
  [
    "619",
    {
      "pageContent": "// HiddenRangeStarted\nimport * as WebglApi from \"@novorender/webgl-api\";\nimport * as MeasureApi from \"@novorender/measure-api\";\nimport * as DataJsApi from \"@novorender/data-js-api\";\nimport * as GlMatrix from \"gl-matrix\";\n\nexport interface IParams {\n  webglApi: typeof WebglApi;\n  measureApi: typeof MeasureApi;\n  dataJsApi: typeof DataJsApi;\n  glMatrix: typeof GlMatrix;\n  canvas: HTMLCanvasElement;\n  canvas2D: HTMLCanvasElement;\n  previewCanvas: HTMLCanvasElement;\n}\n\n// HiddenRangeEnded\nexport async function main({ webglApi, dataJsApi, canvas }: IParams) {\n  try {\n    // load scene into data api, create webgl api, view and load scene and set cameraController.\n    const view = await initView(webglApi, dataJsApi, canvas);\n\n    const scene = view.scene!;\n\n    // run render loop and canvas resizeObserver\n    run(view, canvas);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/searching/exact_search.ts", "loc": { "lines": { "from": 1, "to": 26 } } }
    }
  ],
  [
    "620",
    {
      "pageContent": "const scene = view.scene!;\n\n    // run render loop and canvas resizeObserver\n    run(view, canvas);\n\n    // Run the searches\n    // Exact search only checking the property \"ifcClass\" and the exact value \"ifcRoof\"\n    const iterator = scene.search({\n      searchPattern: [{ property: \"ifcClass\", value: \"ifcRoof\", exact: true }],\n    });\n\n    // In this example we just want to isolate the objects so all we need is the object ID\n    const result: number[] = [];\n    for await (const object of iterator) {\n      result.push(object.id);\n    }\n\n    // Then we isolate the objects found\n    isolateObjects(scene, result);\n  } catch (e) {\n    console.warn(e);\n  }\n}\n\nfunction isolateObjects(scene: WebglApi.Scene, ids: number[]): void {\n  // Set highlight 255 on all objects\n  // Highlight index 255 is reserved fully transparent\n  scene.objectHighlighter.objectHighlightIndices.fill(255);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/searching/exact_search.ts", "loc": { "lines": { "from": 26, "to": 53 } } }
    }
  ],
  [
    "621",
    {
      "pageContent": "// Set highlight back to 0 for objects to be isolated\n  // Highlight 0 should be neutral as we haven't changed view.settings.objectHighlights\n  ids.forEach((id) => (scene.objectHighlighter.objectHighlightIndices[id] = 0));\n\n  scene.objectHighlighter.commit();\n}\n// HiddenRangeStarted\nasync function initView(webglApi: typeof WebglApi, dataJsAPI: typeof DataJsApi, canvas: HTMLCanvasElement): Promise<WebglApi.View> {\n  // Initialize the data API with the Novorender data server service\n  const dataApi = dataJsAPI.createAPI({\n    serviceUrl: \"https://data.novorender.com/api\",\n  });\n\n  // Load scene metadata\n  const sceneData = await dataApi\n    // Condos scene ID, but can be changed to any public scene ID\n    .loadScene(\"3b5e65560dc4422da5c7c3f827b6a77c\")\n    .then((res) => {\n      if (\"error\" in res) {\n        throw res;\n      } else {\n        return res;\n      }\n    });\n\n  // Destructure relevant properties into variables\n  const { url, db, settings, camera: cameraParams } = sceneData;",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/searching/exact_search.ts", "loc": { "lines": { "from": 55, "to": 81 } } }
    }
  ],
  [
    "622",
    {
      "pageContent": "// Destructure relevant properties into variables\n  const { url, db, settings, camera: cameraParams } = sceneData;\n\n  // initialize the webgl api\n  const api = webglApi.createAPI();\n\n  // Load scene\n  const scene = await api.loadScene(url, db);\n\n  // Create a view with the scene's saved settings\n  const view = await api.createView(settings, canvas);\n\n  // Set resolution scale to 1\n  view.applySettings({ quality: { resolution: { value: 1 } } });\n\n  // Create a camera controller with the saved parameters with turntable as fallback\n  const camera = cameraParams ?? ({ kind: \"turntable\" } as any);\n  view.camera.controller = api.createCameraController(camera, canvas);\n\n  // Assign the scene to the view\n  view.scene = scene;\n\n  return view;\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/searching/exact_search.ts", "loc": { "lines": { "from": 81, "to": 104 } } }
    }
  ],
  [
    "623",
    {
      "pageContent": "// Assign the scene to the view\n  view.scene = scene;\n\n  return view;\n}\n\nasync function run(view: WebglApi.View, canvas: HTMLCanvasElement): Promise<void> {\n  // Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: { width: canvas.width, height: canvas.height },\n      });\n    }\n  }).observe(canvas);\n\n  // Create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/searching/exact_search.ts", "loc": { "lines": { "from": 104, "to": 123 } } }
    }
  ],
  [
    "624",
    {
      "pageContent": "// Create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // render loop\n  while (true) {\n    // Render frame\n    const output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    (output as any).dispose();\n  }\n}\n// HiddenRangeEnded",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/searching/exact_search.ts", "loc": { "lines": { "from": 123, "to": 143 } } }
    }
  ],
  [
    "625",
    {
      "pageContent": "// HiddenRangeStarted\nimport * as WebglApi from \"@novorender/webgl-api\";\nimport * as MeasureApi from \"@novorender/measure-api\";\nimport * as DataJsApi from \"@novorender/data-js-api\";\nimport * as GlMatrix from \"gl-matrix\";\n\nexport interface IParams {\n  webglApi: typeof WebglApi;\n  measureApi: typeof MeasureApi;\n  dataJsApi: typeof DataJsApi;\n  glMatrix: typeof GlMatrix;\n  canvas: HTMLCanvasElement;\n  canvas2D: HTMLCanvasElement;\n  previewCanvas: HTMLCanvasElement;\n}\n\n// HiddenRangeEnded\nexport async function main({ webglApi, dataJsApi, canvas }: IParams) {\n  try {\n    // load scene into data api, create webgl api, view and load scene and set cameraController.\n    const view = await initView(webglApi, dataJsApi, canvas);\n\n    const scene = view.scene!;\n\n    // run render loop and canvas resizeObserver\n    run(view, canvas);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/searching/exact_search_excluding_result.ts", "loc": { "lines": { "from": 1, "to": 26 } } }
    }
  ],
  [
    "626",
    {
      "pageContent": "const scene = view.scene!;\n\n    // run render loop and canvas resizeObserver\n    run(view, canvas);\n\n    // Run the searches\n    // Same as the exact search, but with exclude. This will return all object except the ones found above.\n    const iterator = scene.search({\n      searchPattern: [{ property: \"ifcClass\", value: \"ifcRoof\", exact: true, exclude: true }],\n    });\n\n    // In this example we just want to isolate the objects so all we need is the object ID\n    const result: number[] = [];\n    for await (const object of iterator) {\n      result.push(object.id);\n    }\n\n    // Then we isolate the objects found\n    isolateObjects(scene, result);\n  } catch (e) {\n    console.warn(e);\n  }\n}\n\nfunction isolateObjects(scene: WebglApi.Scene, ids: number[]): void {\n  // Set highlight 255 on all objects\n  // Highlight index 255 is reserved fully transparent\n  scene.objectHighlighter.objectHighlightIndices.fill(255);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/searching/exact_search_excluding_result.ts", "loc": { "lines": { "from": 26, "to": 53 } } }
    }
  ],
  [
    "627",
    {
      "pageContent": "// Set highlight back to 0 for objects to be isolated\n  // Highlight 0 should be neutral as we haven't changed view.settings.objectHighlights\n  ids.forEach((id) => (scene.objectHighlighter.objectHighlightIndices[id] = 0));\n\n  scene.objectHighlighter.commit();\n}\n// HiddenRangeStarted\nasync function initView(webglApi: typeof WebglApi, dataJsAPI: typeof DataJsApi, canvas: HTMLCanvasElement): Promise<WebglApi.View> {\n  // Initialize the data API with the Novorender data server service\n  const dataApi = dataJsAPI.createAPI({\n    serviceUrl: \"https://data.novorender.com/api\",\n  });\n\n  // Load scene metadata\n  const sceneData = await dataApi\n    // Condos scene ID, but can be changed to any public scene ID\n    .loadScene(\"3b5e65560dc4422da5c7c3f827b6a77c\")\n    .then((res) => {\n      if (\"error\" in res) {\n        throw res;\n      } else {\n        return res;\n      }\n    });\n\n  // Destructure relevant properties into variables\n  const { url, db, settings, camera: cameraParams } = sceneData;",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/searching/exact_search_excluding_result.ts", "loc": { "lines": { "from": 55, "to": 81 } } }
    }
  ],
  [
    "628",
    {
      "pageContent": "// Destructure relevant properties into variables\n  const { url, db, settings, camera: cameraParams } = sceneData;\n\n  // initialize the webgl api\n  const api = webglApi.createAPI();\n\n  // Load scene\n  const scene = await api.loadScene(url, db);\n\n  // Create a view with the scene's saved settings\n  const view = await api.createView(settings, canvas);\n\n  // Set resolution scale to 1\n  view.applySettings({ quality: { resolution: { value: 1 } } });\n\n  // Create a camera controller with the saved parameters with turntable as fallback\n  const camera = cameraParams ?? ({ kind: \"turntable\" } as any);\n  view.camera.controller = api.createCameraController(camera, canvas);\n\n  // Assign the scene to the view\n  view.scene = scene;\n\n  return view;\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/searching/exact_search_excluding_result.ts", "loc": { "lines": { "from": 81, "to": 104 } } }
    }
  ],
  [
    "629",
    {
      "pageContent": "// Assign the scene to the view\n  view.scene = scene;\n\n  return view;\n}\n\nasync function run(view: WebglApi.View, canvas: HTMLCanvasElement): Promise<void> {\n  // Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: { width: canvas.width, height: canvas.height },\n      });\n    }\n  }).observe(canvas);\n\n  // Create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/searching/exact_search_excluding_result.ts", "loc": { "lines": { "from": 104, "to": 123 } } }
    }
  ],
  [
    "630",
    {
      "pageContent": "// Create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // render loop\n  while (true) {\n    // Render frame\n    const output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    (output as any).dispose();\n  }\n}\n// HiddenRangeEnded",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/searching/exact_search_excluding_result.ts", "loc": { "lines": { "from": 123, "to": 143 } } }
    }
  ],
  [
    "631",
    {
      "pageContent": "// HiddenRangeStarted\nimport * as WebglApi from \"@novorender/webgl-api\";\nimport * as MeasureApi from \"@novorender/measure-api\";\nimport * as DataJsApi from \"@novorender/data-js-api\";\nimport * as GlMatrix from \"gl-matrix\";\n\nexport interface IParams {\n  webglApi: typeof WebglApi;\n  measureApi: typeof MeasureApi;\n  dataJsApi: typeof DataJsApi;\n  glMatrix: typeof GlMatrix;\n  canvas: HTMLCanvasElement;\n  canvas2D: HTMLCanvasElement;\n  previewCanvas: HTMLCanvasElement;\n}\n\n// HiddenRangeEnded\nexport async function main({ webglApi, dataJsApi, canvas }: IParams) {\n  try {\n    // load scene into data api, create webgl api, view and load scene and set cameraController.\n    const view = await initView(webglApi, dataJsApi, canvas);\n\n    const scene = view.scene!;\n\n    // run render loop and canvas resizeObserver\n    run(view, canvas);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/searching/fluffy_search.ts", "loc": { "lines": { "from": 1, "to": 26 } } }
    }
  ],
  [
    "632",
    {
      "pageContent": "const scene = view.scene!;\n\n    // run render loop and canvas resizeObserver\n    run(view, canvas);\n\n    // Run the searches\n    // Fluffy search which will search all properties for words starting with \"Roof\"\n    // \"Roo\" will still find roofs, but \"oof\" will not\n    const iterator = scene.search({ searchPattern: \"Roof\" });\n\n    // In this example we just want to isolate the objects so all we need is the object ID\n    const result: number[] = [];\n    for await (const object of iterator) {\n      result.push(object.id);\n    }\n\n    // Then we isolate the objects found\n    isolateObjects(scene, result);\n  } catch (e) {\n    console.warn(e);\n  }\n}\n\nfunction isolateObjects(scene: WebglApi.Scene, ids: number[]): void {\n  // Set highlight 255 on all objects\n  // Highlight index 255 is reserved fully transparent\n  scene.objectHighlighter.objectHighlightIndices.fill(255);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/searching/fluffy_search.ts", "loc": { "lines": { "from": 26, "to": 52 } } }
    }
  ],
  [
    "633",
    {
      "pageContent": "// Set highlight back to 0 for objects to be isolated\n  // Highlight 0 should be neutral as we haven't changed view.settings.objectHighlights\n  ids.forEach((id) => (scene.objectHighlighter.objectHighlightIndices[id] = 0));\n\n  scene.objectHighlighter.commit();\n}\n// HiddenRangeStarted\nasync function initView(webglApi: typeof WebglApi, dataJsAPI: typeof DataJsApi, canvas: HTMLCanvasElement): Promise<WebglApi.View> {\n  // Initialize the data API with the Novorender data server service\n  const dataApi = dataJsAPI.createAPI({\n    serviceUrl: \"https://data.novorender.com/api\",\n  });\n\n  // Load scene metadata\n  const sceneData = await dataApi\n    // Condos scene ID, but can be changed to any public scene ID\n    .loadScene(\"3b5e65560dc4422da5c7c3f827b6a77c\")\n    .then((res) => {\n      if (\"error\" in res) {\n        throw res;\n      } else {\n        return res;\n      }\n    });\n\n  // Destructure relevant properties into variables\n  const { url, db, settings, camera: cameraParams } = sceneData;",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/searching/fluffy_search.ts", "loc": { "lines": { "from": 54, "to": 80 } } }
    }
  ],
  [
    "634",
    {
      "pageContent": "// Destructure relevant properties into variables\n  const { url, db, settings, camera: cameraParams } = sceneData;\n\n  // initialize the webgl api\n  const api = webglApi.createAPI();\n\n  // Load scene\n  const scene = await api.loadScene(url, db);\n\n  // Create a view with the scene's saved settings\n  const view = await api.createView(settings, canvas);\n\n  // Set resolution scale to 1\n  view.applySettings({ quality: { resolution: { value: 1 } } });\n\n  // Create a camera controller with the saved parameters with turntable as fallback\n  const camera = cameraParams ?? ({ kind: \"turntable\" } as any);\n  view.camera.controller = api.createCameraController(camera, canvas);\n\n  // Assign the scene to the view\n  view.scene = scene;\n\n  return view;\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/searching/fluffy_search.ts", "loc": { "lines": { "from": 80, "to": 103 } } }
    }
  ],
  [
    "635",
    {
      "pageContent": "// Assign the scene to the view\n  view.scene = scene;\n\n  return view;\n}\n\nasync function run(view: WebglApi.View, canvas: HTMLCanvasElement): Promise<void> {\n  // Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: { width: canvas.width, height: canvas.height },\n      });\n    }\n  }).observe(canvas);\n\n  // Create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/searching/fluffy_search.ts", "loc": { "lines": { "from": 103, "to": 122 } } }
    }
  ],
  [
    "636",
    {
      "pageContent": "// Create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // render loop\n  while (true) {\n    // Render frame\n    const output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    (output as any).dispose();\n  }\n}\n// HiddenRangeEnded",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/searching/fluffy_search.ts", "loc": { "lines": { "from": 122, "to": 142 } } }
    }
  ],
  [
    "637",
    {
      "pageContent": "import searchByPath from \"!!./search_by_path.ts?raw\";\nimport fluffySearch from \"!!./fluffy_search.ts?raw\";\nimport exactSearch from \"!!./exact_search.ts?raw\";\nimport exactSearchExcludingResult from \"!!./exact_search_excluding_result.ts?raw\";\n\nimport { demo } from \"../../misc\";\n\nexport const searching = {\n  ...demo(\"searching\", \"searchByPath\", searchByPath, {}, \"Demonstration path search pattern where the resulting objects are isolated in the view.\"),\n  ...demo(\"searching\", \"fluffySearch\", fluffySearch, {}, 'Fluffy search pattern which will search all properties for words starting with \"Roof\".'),\n  ...demo(\"searching\", \"exactSearch\", exactSearch, {}, 'Exact search only checking the property \"ifcClass\" and the exact value \"ifcRoof\".'),\n  ...demo(\"searching\", \"exactSearchExcludingResult\", exactSearchExcludingResult, {}, \"Same as the Exact search pattern, but with exclude. This will return all objects except the ones found above.\"),\n};",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/searching/index.ts", "loc": { "lines": { "from": 1, "to": 13 } } }
    }
  ],
  [
    "638",
    {
      "pageContent": "// HiddenRangeStarted\nimport * as WebglApi from \"@novorender/webgl-api\";\nimport * as MeasureApi from \"@novorender/measure-api\";\nimport * as DataJsApi from \"@novorender/data-js-api\";\nimport * as GlMatrix from \"gl-matrix\";\n\nexport interface IParams {\n  webglApi: typeof WebglApi;\n  measureApi: typeof MeasureApi;\n  dataJsApi: typeof DataJsApi;\n  glMatrix: typeof GlMatrix;\n  canvas: HTMLCanvasElement;\n  canvas2D: HTMLCanvasElement;\n  previewCanvas: HTMLCanvasElement;\n}\n\n// HiddenRangeEnded\nexport async function main({ webglApi, dataJsApi, canvas }: IParams) {\n  try {\n    // load scene into data api, create webgl api, view and load scene and set cameraController.\n    const view = await initView(webglApi, dataJsApi, canvas);\n\n    const scene = view.scene!;\n\n    // run render loop and canvas resizeObserver\n    run(view, canvas);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/searching/search_by_path.ts", "loc": { "lines": { "from": 1, "to": 26 } } }
    }
  ],
  [
    "639",
    {
      "pageContent": "const scene = view.scene!;\n\n    // run render loop and canvas resizeObserver\n    run(view, canvas);\n\n    // Run the searches\n    // Path is similar to filesystem file/folder hierarchical paths, e.g. my_folder/my_object\n    // Paths reflect original CAD model hierarchy (.ifc, .rvm, etc)\n    // This will find all objects on the 2nd floor\n    const iterator = scene.search({\n      parentPath: \"Condos.ifc/3/Surface:2481563/Apartment with 12 condos/2ND FLOOR\",\n    });\n\n    // In this example we just want to isolate the objects so all we need is the object ID\n    const result: number[] = [];\n    for await (const object of iterator) {\n      result.push(object.id);\n    }\n\n    // Then we isolate the objects found\n    isolateObjects(scene, result);\n  } catch (e) {\n    console.warn(e);\n  }\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/searching/search_by_path.ts", "loc": { "lines": { "from": 26, "to": 50 } } }
    }
  ],
  [
    "640",
    {
      "pageContent": "// Then we isolate the objects found\n    isolateObjects(scene, result);\n  } catch (e) {\n    console.warn(e);\n  }\n}\n\nfunction isolateObjects(scene: WebglApi.Scene, ids: number[]): void {\n  // Set highlight 255 on all objects\n  // Highlight index 255 is reserved fully transparent\n  scene.objectHighlighter.objectHighlightIndices.fill(255);\n\n  // Set highlight back to 0 for objects to be isolated\n  // Highlight 0 should be neutral as we haven't changed view.settings.objectHighlights\n  ids.forEach((id) => (scene.objectHighlighter.objectHighlightIndices[id] = 0));\n\n  scene.objectHighlighter.commit();\n}\n// HiddenRangeStarted\nasync function initView(webglApi: typeof WebglApi, dataJsAPI: typeof DataJsApi, canvas: HTMLCanvasElement): Promise<WebglApi.View> {\n  // Initialize the data API with the Novorender data server service\n  const dataApi = dataJsAPI.createAPI({\n    serviceUrl: \"https://data.novorender.com/api\",\n  });",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/searching/search_by_path.ts", "loc": { "lines": { "from": 50, "to": 73 } } }
    }
  ],
  [
    "641",
    {
      "pageContent": "// Load scene metadata\n  const sceneData = await dataApi\n    // Condos scene ID, but can be changed to any public scene ID\n    .loadScene(\"3b5e65560dc4422da5c7c3f827b6a77c\")\n    .then((res) => {\n      if (\"error\" in res) {\n        throw res;\n      } else {\n        return res;\n      }\n    });\n\n  // Destructure relevant properties into variables\n  const { url, db, settings, camera: cameraParams } = sceneData;\n\n  // initialize the webgl api\n  const api = webglApi.createAPI();\n\n  // Load scene\n  const scene = await api.loadScene(url, db);\n\n  // Create a view with the scene's saved settings\n  const view = await api.createView(settings, canvas);\n\n  // Set resolution scale to 1\n  view.applySettings({ quality: { resolution: { value: 1 } } });\n\n  // Create a camera controller with the saved parameters with turntable as fallback\n  const camera = cameraParams ?? ({ kind: \"turntable\" } as any);\n  view.camera.controller = api.createCameraController(camera, canvas);",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/searching/search_by_path.ts", "loc": { "lines": { "from": 75, "to": 104 } } }
    }
  ],
  [
    "642",
    {
      "pageContent": "// Assign the scene to the view\n  view.scene = scene;\n\n  return view;\n}\n\nasync function run(view: WebglApi.View, canvas: HTMLCanvasElement): Promise<void> {\n  // Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: { width: canvas.width, height: canvas.height },\n      });\n    }\n  }).observe(canvas);\n\n  // Create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/searching/search_by_path.ts", "loc": { "lines": { "from": 106, "to": 125 } } }
    }
  ],
  [
    "643",
    {
      "pageContent": "// Create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // render loop\n  while (true) {\n    // Render frame\n    const output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    (output as any).dispose();\n  }\n}\n// HiddenRangeEnded",
      "metadata": { "source": "/media/Datas/novorender/docs/demo-snippets/tutorials/searching/search_by_path.ts", "loc": { "lines": { "from": 125, "to": 145 } } }
    }
  ],
  [
    "644",
    {
      "pageContent": "/// <reference types=\"gl-matrix\" />\r\n\r\ndeclare module \"@novorender/webgl-api\" {\r\n    type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> & U[keyof U];\r\n\r\n    import type { ReadonlyVec3, ReadonlyVec4, ReadonlyQuat, ReadonlyMat3, ReadonlyMat4 } from \"gl-matrix\";\r\n\r\n    /** Polyfill for missing/removed API interface.\r\n     * @remarks See https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/convertToBlob for more details.\r\n     */\r\n    export interface ImageEncodeOptions_ {\r\n        readonly type: string;\r\n        readonly quality: number;\r\n    }\r\n\r\n    /** Color expressed as a 3D vector with ranges [0.0 - 1.0] for red, green and blue components respectively. */\r\n    export type ColorRGB = ReadonlyVec3;\r\n\r\n    /** Color expressed as a 4D vector with ranges [0.0 - 1.0] for red, green, blue and alpha components respectively. */\r\n    export type ColorRGBA = ReadonlyVec4;\r\n\r\n    /** Integer index/handle for identifying a single object */\r\n    export type ObjectId = number; // integer",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1, "to": 23 } } }
    }
  ],
  [
    "645",
    {
      "pageContent": "export type ColorRGBA = ReadonlyVec4;\r\n\r\n    /** Integer index/handle for identifying a single object */\r\n    export type ObjectId = number; // integer\r\n\r\n    /** Read only array of integer indices/handles for identifying a set of objects */\r\n    export type ObjectIdArray = ReadonlyArray<ObjectId>; // go for Uin32Array instead?\r\n\r\n    /** Fixed size, read-only array type. */\r\n    export type FixedSizeArray<N extends number, T> = N extends 0\r\n        ? never[]\r\n        : {\r\n            0: T;\r\n            length: N;\r\n        } & ReadonlyArray<T>;\r\n\r\n    /** Axis-aligned bounding box */\r\n    export interface AABB {\r\n        /** minimum coordinates */\r\n        readonly min: ReadonlyVec3;\r\n        /** maximum coordinates */\r\n        readonly max: ReadonlyVec3;\r\n    }\r\n\r\n    /** Bounding sphere */\r\n    export interface BoundingSphere {\r\n        /** Sphere center. */\r\n        readonly center: ReadonlyVec3;\r\n        /** Sphere radius. */\r\n        readonly radius: number;\r\n    }",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 23, "to": 53 } } }
    }
  ],
  [
    "646",
    {
      "pageContent": "export interface BoundingSphere {\r\n        /** Sphere center. */\r\n        readonly center: ReadonlyVec3;\r\n        /** Sphere radius. */\r\n        readonly radius: number;\r\n    }\r\n\r\n    /** Geographic coordinate expressed by angles */\r\n    export interface GeoLocation {\r\n        /** Angle ranging from 0° at the Prime Meridian to +180° eastward and −180° westward. */\r\n        longitude: number;\r\n        /** Angle ranging from 0° at the Equator to +90° (North pole) and -90° (South pole). */\r\n        latitude: number;\r\n    }\r\n\r\n    /** Visual highlighting for groups of objects.\r\n     * @remarks\r\n     * This interface is used to highlight or hide sets of objects, based e.g. on interactive selections or queries.\r\n     * Each 3D object in the scene has a unique id/index, which can be assigned to one of the available highlight groups.\r\n     * By default, all objects are assigned to group #0.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 53, "to": 72 } } }
    }
  ],
  [
    "647",
    {
      "pageContent": "* Each 3D object in the scene has a unique id/index, which can be assigned to one of the available highlight groups.\r\n     * By default, all objects are assigned to group #0.\r\n     * To change a highlight for a specific object or set of objects, simply change the {@link objectGroups} index for that/this object id(s):\r\n     * `objectHighlights[objectId] = newHighlightGroupIndex`.\r\n     *\r\n     * Highlight index 255/0xff is reserved and used to hide objects.\r\n     * Although you can also hide objects by making them 100% transparent (opacity = 0), assigning them to index 255 is more performant.\r\n     *\r\n     * Changes to object highlights does not become visible until you call the {@link commit} method.\r\n     */\r\n    export interface ObjectHighlighter {\r\n        /** Indexed collection of groups. */\r\n        readonly objectHighlightIndices: Uint8Array; // TODO: Use a generic indexer interface instead?\r\n\r\n        /** Commit changes for rendering. */\r\n        commit(): Promise<void>;\r\n    }",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 72, "to": 88 } } }
    }
  ],
  [
    "648",
    {
      "pageContent": "readonly objectHighlightIndices: Uint8Array; // TODO: Use a generic indexer interface instead?\r\n\r\n        /** Commit changes for rendering. */\r\n        commit(): Promise<void>;\r\n    }\r\n\r\n    /** Linear transform options.\r\n     * @remarks\r\n     * The transform is performed by first applying scale, then adding offset, i.e.: result = value * scale + offset.\r\n     * If scale = 0, offset will effectively replace input value.\r\n     */\r\n    export interface LinearTransform {\r\n        /** Multiplicand for input value. Default = 1.*/\r\n        readonly scale?: number;\r\n        /** Addend for scaled input value. Default = 0. */\r\n        readonly offset?: number;\r\n    }\r\n\r\n    /** Options for RGBA + alpha color transformation.\r\n     * @remarks\r\n     * All input values are between 0 and 1.\r\n     */\r\n    export interface RGBAOptions {\r\n        /** Red color adjustment. */\r\n        readonly red: number | LinearTransform;\r\n        /** Green color adjustment. */\r\n        readonly green: number | LinearTransform;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 88, "to": 114 } } }
    }
  ],
  [
    "649",
    {
      "pageContent": "/** Red color adjustment. */\r\n        readonly red: number | LinearTransform;\r\n        /** Green color adjustment. */\r\n        readonly green: number | LinearTransform;\r\n        /** Blue color adjustment. */\r\n        readonly blue: number | LinearTransform;\r\n        /** Opacity/alpha adjustment. */\r\n        readonly opacity: number | LinearTransform;\r\n    }\r\n\r\n    /** Options for HSL + alpha color transformation.\r\n     * @remarks\r\n     * All input values are between 0 and 1.\r\n     * See [Wikipedia](https://en.wikipedia.org/wiki/HSL_and_HSV) for more details on the HSV color space.\r\n     */\r\n    export interface HSLAOptions {\r\n        /** Lightness adjustment. */\r\n        readonly lightness: number | LinearTransform;\r\n        /** Saturation adjustment (scale). */\r\n        readonly saturation: number;\r\n        // /** Hue adjustment (offset). */\r\n        // readonly hue: number;\r\n        /** Opacity/alpha adjustment. */\r\n        readonly opacity: number | LinearTransform;\r\n    }",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 114, "to": 138 } } }
    }
  ],
  [
    "650",
    {
      "pageContent": "// /** Hue adjustment (offset). */\r\n        // readonly hue: number;\r\n        /** Opacity/alpha adjustment. */\r\n        readonly opacity: number | LinearTransform;\r\n    }\r\n\r\n    /** Visual highlighting for a group of objects.\r\n     * @remarks\r\n     * Highlighting is done using a linear transformation matrix per group, which allows for various visual effects in addition to simply assigning a single color.\r\n     * This can be useful to preserve at least some aspects of the original material colors, by, e.g. making certain objects semi-transparent, darker/brighter or color/grayscale.\r\n     */\r\n    export interface Highlight {\r\n        /** 5x4 row-major matrix for color/opacity transform.\r\n         * @remarks\r\n         * This matrix defines the linear transformation that is applied to the original RGBA color before rendering.\r\n         * The fifth column is multiplied by a constant 1, making it useful for translation.\r\n         * The resulting colors are computed thus:\r\n         * ```",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 138, "to": 155 } } }
    }
  ],
  [
    "651",
    {
      "pageContent": "* The fifth column is multiplied by a constant 1, making it useful for translation.\r\n         * The resulting colors are computed thus:\r\n         * ```\r\n         * output_red = r*m[0] + g*m[1] + b*m[2] + a*m[3] + m[4]\r\n         * output_green = r*m[5] + g*m[6] + b*m[7] + a*m[8] + m[9]\r\n         * output_blue = r*m[10] + g*m[11] + b*m[12] + a*m[13] + m[14]\r\n         * output_alpha = r*m[15] + g*m[16] + b*m[17] + a*m[18] + m[19]\r\n         * ```\r\n         * All input values are between 0 and 1 and output value will be clamped to this range.\r\n         * Setting this matrix directly offers the most amount of flexibility.\r\n         */\r\n        rgbaTransform: FixedSizeArray<20, number>;\r\n    }\r\n\r\n    /** Asset data used for dynamic objects.\r\n     * @remarks\r\n     * Dynamic assets represents some combination of 3D geometry, textures, animations, sound and physics data.\r\n     * They can then be introduced into a scene as dynamic objects, allowing multiple instances of each assets.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 155, "to": 172 } } }
    }
  ],
  [
    "652",
    {
      "pageContent": "* They can then be introduced into a scene as dynamic objects, allowing multiple instances of each assets.\r\n     * Assets can be imported from an existing file, such as a gltf model.\r\n     */\r\n    export interface DynamicAsset {\r\n        /** The url used for loading data, if any. */\r\n        readonly url?: URL;\r\n\r\n        /** The id assigned to this asset. */\r\n        readonly id: number;\r\n\r\n        /** The bounding sphere of the loaded asset. */\r\n        readonly boundingSphere: BoundingSphere;\r\n\r\n        /** Dispose of asset data.\r\n         * @remarks\r\n         * Disposing of asset data will free up associated system memory.\r\n         * Doing so will make it impossible to create new dynamic objects from this asset.\r\n         * Already created dynamic objects will remain, however, since they are essentially GPU memory copies.\r\n         */\r\n        dispose(): void;\r\n\r\n        // TODO: create assets from scene subset snapshots for e.g. offline rendering.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 172, "to": 193 } } }
    }
  ],
  [
    "653",
    {
      "pageContent": "*/\r\n        dispose(): void;\r\n\r\n        // TODO: create assets from scene subset snapshots for e.g. offline rendering.\r\n        // TODO: create/edit programatically for e.g. UI elements.\r\n        // TODO: add export to gltf/whatnot.\r\n    }\r\n\r\n    /** 3D object that can be animated and moved.\r\n     * @remarks\r\n     * Unlike the static geometry of a scene, dynamic objects can be added/removed and moved around after a scene has been created.\r\n     * This functionality comes at a cost, however.\r\n     * Dynamic objects must be fully loaded into client memory before they can be rendered, which restricts their practial use to relatively trivial geometry only.\r\n     * Nor can they take advantage of globally pre-baked information, such as indirect light.\r\n     * They also lack several features of static scene geometry, such as object picking and clipping volumes etc.\r\n     * Dynamic objects can be helpful for 3D UI widgets, background animations of e.g. moving people, cars or animals etc.\r\n     */",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 193, "to": 209 } } }
    }
  ],
  [
    "654",
    {
      "pageContent": "* Dynamic objects can be helpful for 3D UI widgets, background animations of e.g. moving people, cars or animals etc.\r\n     */\r\n    export interface DynamicObject {\r\n        /** The scene from this this object was created. */\r\n        readonly scene: Scene;\r\n        /** The geometry used for rendering. */\r\n        readonly geometry: DynamicAsset;\r\n        /** Whether to render object or not. */\r\n        visible: boolean;\r\n        /** The 3D position of object in world space coordinates. */\r\n        position: ReadonlyVec3;\r\n        /** The 3D orientation of object in world space expressed as a quaternion. */\r\n        rotation: ReadonlyQuat;\r\n        /** The scale of object in local coordinates. */\r\n        scale: ReadonlyVec3;\r\n        /** Remove object from scene and free up any associated resources. */\r\n        dispose(): void;\r\n        // TODO: add animation timer and run/pause mechanism\r\n    }\r\n\r\n    /** Lightweight reference to a single object within a scene instance.\r\n     * @remarks",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 209, "to": 230 } } }
    }
  ],
  [
    "655",
    {
      "pageContent": "dispose(): void;\r\n        // TODO: add animation timer and run/pause mechanism\r\n    }\r\n\r\n    /** Lightweight reference to a single object within a scene instance.\r\n     * @remarks\r\n     * Object metadata are not loaded with scene automatically and may require an additional server request. This interface contains only the identity required to perform such a request.\r\n     */\r\n    export interface ObjectReference {\r\n        /** The id of the object */\r\n        readonly id: ObjectId;\r\n\r\n        /** The instance that contains this object. */\r\n        // readonly instance: Instance;\r\n\r\n        /** Load the associated object meta data. */\r\n        loadMetaData(): Promise<ObjectData>;\r\n    }\r\n\r\n    /** Type of node */\r\n    export const enum NodeType {\r\n        /** Node has children. */\r\n        Internal = 0,\r\n        /** Node has no children. */\r\n        Leaf = 1,\r\n    }\r\n\r\n    /** Hierarcical object reference to a single object within a scene instance.\r\n     *\r\n     * @remarks",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 230, "to": 259 } } }
    }
  ],
  [
    "656",
    {
      "pageContent": "Internal = 0,\r\n        /** Node has no children. */\r\n        Leaf = 1,\r\n    }\r\n\r\n    /** Hierarcical object reference to a single object within a scene instance.\r\n     *\r\n     * @remarks\r\n     * This interface extends {@link ObjectReference} with data required for hierachical tree views and 3D rendering without loading the entire set of metadata.\r\n     */\r\n    export interface HierarcicalObjectReference extends ObjectReference {\r\n        /** The path of the object expressed as a hierarchical filesystem-like path string. */\r\n        readonly path: string;\r\n\r\n        /** Type of node. */\r\n        readonly type: NodeType;\r\n\r\n        /** Bounding volume */\r\n        readonly bounds?: {\r\n            // readonly box: AABB;\r\n            readonly sphere: BoundingSphere;\r\n        };\r\n        readonly descendants?: ObjectId[];\r\n    }\r\n\r\n    /** Object metadata.\r\n     */\r\n    export interface ObjectData extends HierarcicalObjectReference {\r\n        /** Name of object (typically a GUID from IFC database). */",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 259, "to": 287 } } }
    }
  ],
  [
    "657",
    {
      "pageContent": "}\r\n\r\n    /** Object metadata.\r\n     */\r\n    export interface ObjectData extends HierarcicalObjectReference {\r\n        /** Name of object (typically a GUID from IFC database). */\r\n        readonly name: string;\r\n\r\n        /** Description of object (typically from IFC database). */\r\n        readonly description?: string;\r\n\r\n        /** Url associated with object */\r\n        readonly url?: string;\r\n\r\n        /** String dictionary of any additional metadata properties associated with object */\r\n        properties: [key: string, value: string][];\r\n\r\n        /** Save object meta data. */\r\n        save(): Promise<boolean>;\r\n    }\r\n\r\n    interface CameraProperties {\r\n        /** Camera type. */\r\n        readonly kind: \"pinhole\" | \"orthographic\";\r\n        /** Camera position expressed as a world space 3D vector. */\r\n        readonly position: ReadonlyVec3;\r\n        /** Camera orientation expressed as a world space 3D quaternion. */\r\n        readonly rotation: ReadonlyQuat;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 287, "to": 314 } } }
    }
  ],
  [
    "658",
    {
      "pageContent": "readonly position: ReadonlyVec3;\r\n        /** Camera orientation expressed as a world space 3D quaternion. */\r\n        readonly rotation: ReadonlyQuat;\r\n        /** Field of view expressed as the vertical viewing angle in degrees for pinhole cameras, or vertical aperature dimension in meters for orthographic cameras. */\r\n        fieldOfView: number;\r\n        /** Distance to the view frustum near clipping plane.\r\n         * @remarks\r\n         *  The value must be larger than 0 and preferably as large as possible without creating undesired clipping effects near the camera.\r\n         *  Camera controllers will automatically adjust this value whenever a new scene is assigned to their view, so setting it manually is generally not required.\r\n         *  See {@link https://en.wikipedia.org/wiki/Viewing_frustum} for more details.\r\n         */\r\n        near: number;\r\n        /** Distance to the view frustum far clipping plane.\r\n         * @remarks",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 314, "to": 327 } } }
    }
  ],
  [
    "659",
    {
      "pageContent": "*/\r\n        near: number;\r\n        /** Distance to the view frustum far clipping plane.\r\n         * @remarks\r\n         *  The value must be larger than {@link near} and and large enough to include the desired maximum viewing distance, which typically is some multiple of the scene size.\r\n         *  Camera controllers will automatically adjust this value whenever a new scene is assigned to their view, so setting it manually is generally not required.\r\n         *  See {@link https://en.wikipedia.org/wiki/Viewing_frustum} for more details.\r\n         */\r\n        far: number;\r\n    }\r\n\r\n    /** Camera Object. */\r\n    interface Camera extends CameraProperties {\r\n        /** The view to which this camera belongs. */\r\n        readonly view: View;\r\n        /** Get or set the motion controller assigned to this camera. By default, this will be a static controller, whose only function is to provide a reasonable default view for a given scene. */\r\n        controller: CameraController;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 327, "to": 343 } } }
    }
  ],
  [
    "660",
    {
      "pageContent": "controller: CameraController;\r\n        /** Compute the distance of point from camera view plane. */\r\n        getDistanceFromViewPlane(point: ReadonlyVec3): number;\r\n    }\r\n\r\n    /** Search pattern */\r\n    export interface SearchPattern {\r\n        /** Property name to find. */\r\n        property?: string;\r\n        /** Value to find.  \r\n         * if value is array of strings then search property value should match any (\"or\" function) of array values\r\n         */\r\n        value?: string | string[];\r\n        /** Require exact match or not. */\r\n        exact?: boolean;\r\n        /** Exclude this match from result.\r\n         * property name is mandatory\r\n         */\r\n        exclude?: boolean;\r\n        /** Range of values to search.\r\n         * property name is mandatory\r\n         */\r\n        range?: { min: string; max: string; };\r\n\r\n        /** Volume to include in search.\r\n         * @remarks\r\n         * We currently only use object axis alinged bounding boxes (AABB) for this search.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 343, "to": 369 } } }
    }
  ],
  [
    "661",
    {
      "pageContent": "/** Volume to include in search.\r\n         * @remarks\r\n         * We currently only use object axis alinged bounding boxes (AABB) for this search.\r\n         * Each plane defines a half-space, where the positive side of the plane is included in the search.\r\n         * If {@link exact} is true, the whole object AABB must be on the positive side.\r\n         * Else it must be at least partially on the positive side.\r\n         * If {@link exclude} is true, all objects that would have been excluded will now be included, and vice versa.\r\n         */\r\n        planes?: readonly ReadonlyVec4[];\r\n    }\r\n\r\n    /** Search object options */\r\n    export interface SearchOptions {\r\n        /** Path to search start from.\r\n         * @remarks\r\n         * Path is similar to filesystem file/folder hierarchical paths, e.g. my_folder/my_object.\r\n         * Paths reflect original CAD model hierarchy (.ifc, .rvm, etc).\r\n         * Only objects contained within specified folder will be returned.\r\n         */",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 369, "to": 387 } } }
    }
  ],
  [
    "662",
    {
      "pageContent": "* Paths reflect original CAD model hierarchy (.ifc, .rvm, etc).\r\n         * Only objects contained within specified folder will be returned.\r\n         */\r\n        parentPath?: string;\r\n\r\n        /** How many generations of descendants to include in search.\r\n         * @remarks\r\n         * 0 - object itself\r\n         *\r\n         * 1 - children only\r\n         *\r\n         * undefined - deepest levels.\r\n         */\r\n        descentDepth?: number;\r\n\r\n        /** Property pattern to search for. */\r\n        searchPattern?: SearchPattern[] | string;\r\n\r\n        /** Preload all matching objects.\r\n         * @remarks\r\n         * This param should be set if you want to access some parameters of all results later to prevent per object data request.\r\n         */\r\n        full?: boolean;\r\n    }\r\n\r\n    /** Scene document\r\n     *\r\n     * @remarks\r\n     * A scene represents the document entity of NovoRender, corresponding to something akin to a top level CAD assembly.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 387, "to": 415 } } }
    }
  ],
  [
    "663",
    {
      "pageContent": "full?: boolean;\r\n    }\r\n\r\n    /** Scene document\r\n     *\r\n     * @remarks\r\n     * A scene represents the document entity of NovoRender, corresponding to something akin to a top level CAD assembly.\r\n     * It provides information for both rendering 3D geometry and querying for object metadata.\r\n     * In order to fascilitate complex datasets on small client devices, scenes load most data on demand and caches a relevant, but still potentially substantial subset in system and GPU memory.\r\n     * Weaker devices may struggle to host multiple scenes in memory at once, so make sure to remove any references to unused scenes and related objects for effective garbage collection when loading new scenes.\r\n     */\r\n    export interface Scene {\r\n        /** Scene Id\r\n         * @remarks\r\n         * For new scenes, this will contain a random string/guid.\r\n         */\r\n        id: string;\r\n\r\n        /** Scene title */\r\n        title: string;\r\n\r\n        /** Scene subtrees types\r\n         * @remark",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 415, "to": 437 } } }
    }
  ],
  [
    "664",
    {
      "pageContent": "*/\r\n        id: string;\r\n\r\n        /** Scene title */\r\n        title: string;\r\n\r\n        /** Scene subtrees types\r\n         * @remark\r\n         * Available types\r\n         */\r\n        readonly subtrees?: (\"terrain\" | \"triangles\" | \"lines\" | \"points\" | \"documents\")[];\r\n\r\n        readonly variants?: (\"deviation\" | \"intensity\")[];\r\n\r\n        /** Date of scene creation */\r\n        readonly dateCreated: Date;\r\n\r\n        /** Date of when scene was last saved */\r\n        readonly dateLastSaved: Date;\r\n\r\n        /** Scene description. */\r\n        description?: string;\r\n\r\n        /** Geological location of scene.\r\n         * @remarks\r\n         * This location is used for calculating correct lighting/sun position for a given time and date. In future, it may also be used for google earth-like background settings and map icons etc. For static structures in particular, providing an accurate location is thus recommended.\r\n         */\r\n        location?: GeoLocation;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 437, "to": 464 } } }
    }
  ],
  [
    "665",
    {
      "pageContent": "*/\r\n        location?: GeoLocation;\r\n\r\n        /** Local timezone expressed in hours from GMT.\r\n         * @remarks\r\n         * Information for calculating correct lighting/sun position using local time rather than UTC.\r\n         *\r\n         */\r\n        timezone?: number;\r\n\r\n        /** The bounding sphere of the scene in world space.\r\n         * @remarks\r\n         * This property is useful for e.g. initial camera positioning based on approximate scene size and center.\r\n         */\r\n        readonly boundingSphere: BoundingSphere;\r\n\r\n        /** Return a queryable object reference.\r\n         * @param id Object Id\r\n         */\r\n        getObjectReference(id: ObjectId): ObjectReference;\r\n\r\n        /** Search for objects.\r\n         * @param filter {@link SearchOptions} filtering options.\r\n         * @param signal Abort request signal.\r\n         * @remarks\r\n         * Scenes contains objects with associated properties.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 464, "to": 489 } } }
    }
  ],
  [
    "666",
    {
      "pageContent": "* @param filter {@link SearchOptions} filtering options.\r\n         * @param signal Abort request signal.\r\n         * @remarks\r\n         * Scenes contains objects with associated properties.\r\n         * Loading scenes with millions of objects direcly into memory may be slow or even impossible on memory constrained devices.\r\n         * This function lets you selectively load object properties based on some criteria.\r\n         * An example of this is if you want to make a virtual tree view that only load child nodes on demand when the user expands a folder to make your UI scale to very large scenes.\r\n         * ```typescript\r\n         * const children = scene.search({ parentPath: \"rootfolder/subfolder\", descentDepth: 1});\r\n         * for await (const child of children) {\r\n         * // TODO: append child's properties to UI\r\n         * }\r\n         * ```\r\n         * @returns Async iterator of {@link HierarcicalObjectReference}\r\n         */",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 489, "to": 503 } } }
    }
  ],
  [
    "667",
    {
      "pageContent": "* // TODO: append child's properties to UI\r\n         * }\r\n         * ```\r\n         * @returns Async iterator of {@link HierarcicalObjectReference}\r\n         */\r\n        search(filter: SearchOptions, signal?: AbortSignal): AsyncIterableIterator<HierarcicalObjectReference>;\r\n\r\n        /** Returns all descendants */\r\n        descendants(object: HierarcicalObjectReference, signal: AbortSignal | undefined): Promise<ObjectId[]>;\r\n\r\n        /** Compute sun position.\r\n         * @param time Desired date and time of day in universal time (UTC).\r\n         * @remarks\r\n         * The computation will take into account seasonal changes as well as time.\r\n         * The {@link timezone} may be useful to provide the correct UTC time in the physical area described by the scene but is not used by this method directly.\r\n         * @returns The sun position, which can then be used in the render settings to visualize the light conditions for a given site on the given time.\r\n         */",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 503, "to": 519 } } }
    }
  ],
  [
    "668",
    {
      "pageContent": "* @returns The sun position, which can then be used in the render settings to visualize the light conditions for a given site on the given time.\r\n         */\r\n        computeSunPosition(time: Date): { azimuth: number; inclination: number; };\r\n\r\n        /** List of dynamic objects currently in scene.\r\n         * @remarks\r\n         * To add a new dynamic object, see {@link createDynamicObject}.\r\n         * To remove a dynamic object, see {@link DynamicObject.dispose}.\r\n         */\r\n        readonly dynamicObjects: IterableIterator<DynamicObject>;\r\n\r\n        /** Create a new dynamic object.\r\n         * @param asset The geometry asset to use for this object.\r\n         * @returns A new dynamic object, whose state is initially invisible by default.\r\n         */\r\n        createDynamicObject(asset: DynamicAsset): DynamicObject;\r\n\r\n        /** An object that allows sets of objects to be highlighted using different color transforms. */\r\n        readonly objectHighlighter: ObjectHighlighter;\r\n    }",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 519, "to": 538 } } }
    }
  ],
  [
    "669",
    {
      "pageContent": "/** An object that allows sets of objects to be highlighted using different color transforms. */\r\n        readonly objectHighlighter: ObjectHighlighter;\r\n    }\r\n\r\n    /** Camera motion controller.\r\n     * @remarks\r\n     * A motion controller fascilitates navigating a camera in space from user input.\r\n     */\r\n    export interface CameraController {\r\n        /** Defines mouse buttons actions.\r\n         * @param mouseButtonsMap Bitmask definition what buttons will rotate, pan and orbit camera.\r\n         * @remarks\r\n         * Bit mask of buttons:\r\n         * 1 - left button.\r\n         * 2 - right button.\r\n         * 4 - middle button.\r\n         * Default value: { rotate: 1, pan: 4, orbit: 2, pivot: 2 }\r\n         * rotate, pan and orbit are movement while button hold\r\n         * pivot is setting of pivot point for orbit rotation on button down\r\n         * You could disable some action by do not set it or set to 0, like { rotate: 1, pan: 2 } or { rotate: 1, pan: 2, orbit: 0}",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 538, "to": 557 } } }
    }
  ],
  [
    "670",
    {
      "pageContent": "* You could disable some action by do not set it or set to 0, like { rotate: 1, pan: 2 } or { rotate: 1, pan: 2, orbit: 0}\r\n         * Here could be combination of buttons, for example if you want use right button for rotation and left or middle button for panning and no orbit then value should be { rotate: 2, pan: 5 }\r\n         */\r\n        mouseButtonsMap: { rotate: number; pan: number; orbit: number; pivot: number; };\r\n\r\n        /** Defines touch fingers actions.\r\n         * @param fingersMap defines how many fingers will rotate, pan and orbit camera.\r\n         * @remarks\r\n         * Default value: { rotate: 1, pan: 3, orbit: 3, pivot: 3 }\r\n         * rotate, pan and orbit are movement while holding fingers\r\n         * pivot is setting of pivot point for orbit rotation\r\n         * You could disable some action by do not set it or set to 0, like { rotate: 1, pan: 2 } or { rotate: 1, pan: 2, orbit: 0}\r\n         */",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 557, "to": 569 } } }
    }
  ],
  [
    "671",
    {
      "pageContent": "* You could disable some action by do not set it or set to 0, like { rotate: 1, pan: 2 } or { rotate: 1, pan: 2, orbit: 0}\r\n         */\r\n        fingersMap: { rotate: number; pan: number; orbit: number; pivot: number; };\r\n\r\n        /** Reset camera position and rotation to scene default. */\r\n        reset(): void;\r\n\r\n        /** Zoom to area of interest.\r\n         * @param bounds The bounding volume that should be brought into view.\r\n         * @remarks\r\n         * Bounding volumes can be gotten from the scene itself, or an selection of objects within the scene.\r\n         * A typical case is to update the 3D view to reflect some object selection.\r\n         * The controller will attempt to position the camera at a reasonable distance from the specified volume, using its center as the focal point.\r\n         * The controller will not attempt to avoid moving through walls etc.\r\n         */\r\n        zoomTo(bounds: BoundingSphere): void;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 569, "to": 584 } } }
    }
  ],
  [
    "672",
    {
      "pageContent": "* The controller will not attempt to avoid moving through walls etc.\r\n         */\r\n        zoomTo(bounds: BoundingSphere): void;\r\n\r\n        /** Move camera to exact position and rotation. */\r\n        moveTo(position: ReadonlyVec3, rotation: ReadonlyQuat): void;\r\n\r\n        /** Whether controller is enabled. Default is true. */\r\n        enabled: boolean;\r\n\r\n        /** Whether to automatically zoom to scene extents when new scene is selected. Default is true. */\r\n        autoZoomToScene?: boolean;\r\n\r\n        // /** Controller parameters */\r\n        readonly params: Required<CameraControllerParams>;\r\n    }\r\n\r\n    /** Static camera motion controller parameters. */\r\n    export interface StaticControllerParams {\r\n        /** The kind of camera controller. */\r\n        readonly kind: \"static\";\r\n\r\n        /** The world space coordinate of the camera itself (default [0,0,1]). */\r\n        position?: ReadonlyVec3;\r\n\r\n        /** The world space coordinate to look at (default [0,0,0]). */",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 584, "to": 609 } } }
    }
  ],
  [
    "673",
    {
      "pageContent": "/** The world space coordinate of the camera itself (default [0,0,1]). */\r\n        position?: ReadonlyVec3;\r\n\r\n        /** The world space coordinate to look at (default [0,0,0]). */\r\n        target?: ReadonlyVec3;\r\n\r\n        /** The world space up vector (default [0,1,0]). */\r\n        up?: ReadonlyVec3;\r\n    }\r\n\r\n    /** Turntable camera motion controller parameters. */\r\n    export interface TurntableControllerParams {\r\n        /** The kind of camera controller. */\r\n        readonly kind: \"turntable\";\r\n\r\n        /** The world space coordinate to orbit around. */\r\n        pivotPoint?: ReadonlyVec3;\r\n\r\n        /** The camera distance relative to pivot point in meters. */\r\n        distance?: number;\r\n\r\n        /** The camera elevation relative to pivot point in meters. */\r\n        elevation?: number;\r\n\r\n        /** The current turntable rotation angle in degrees (+/-180) */\r\n        rotation?: number;\r\n\r\n        /** The velocity with which the camera rotates in degrees/second. */",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 609, "to": 636 } } }
    }
  ],
  [
    "674",
    {
      "pageContent": "/** The current turntable rotation angle in degrees (+/-180) */\r\n        rotation?: number;\r\n\r\n        /** The velocity with which the camera rotates in degrees/second. */\r\n        rotationalVelocity?: number;\r\n    }\r\n\r\n    /** Orbit type camera motion controller */\r\n    export interface OrbitControllerParams {\r\n        /** The kind of camera controller. */\r\n        readonly kind: \"orbit\";\r\n\r\n        /** The world space coordinate to orbit around. (0,0,0) is default. */\r\n        pivotPoint?: ReadonlyVec3;\r\n\r\n        /** The current pitch of camera in degrees (+/-90) */\r\n        pitch?: number;\r\n\r\n        /** The current yaw of camera in degrees (+/-180) */\r\n        yaw?: number;\r\n\r\n        /** The camera distance relative to pivot point in meters. */\r\n        distance?: number;\r\n\r\n        /** The camera distance relative to pivot point in meters. */\r\n        maxDistance?: number;\r\n\r\n        /** The velocity with which the camera moves through space in meters/second */\r\n        linearVelocity?: number;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 636, "to": 664 } } }
    }
  ],
  [
    "675",
    {
      "pageContent": "maxDistance?: number;\r\n\r\n        /** The velocity with which the camera moves through space in meters/second */\r\n        linearVelocity?: number;\r\n\r\n        /** The velocity with which the camera rotates in degrees/second. */\r\n        rotationalVelocity?: number;\r\n    }\r\n\r\n    /** Flight type camera motion controller */\r\n    export interface FlightControllerParams {\r\n        /** The kind of camera controller. */\r\n        readonly kind: \"flight\";\r\n\r\n        /** The world space coordinate of camera. (0,0,0) is default. */\r\n        position?: ReadonlyVec3;\r\n\r\n        /** The world space coordinate to orbit around. (0,0,0) is default. */\r\n        pivotPoint?: ReadonlyVec3 | false;\r\n\r\n        /** The current pitch of camera in degrees (+/-90) */\r\n        pitch?: number;\r\n\r\n        /** The current yaw of camera in degrees (+/-180) */\r\n        yaw?: number;\r\n\r\n        /** The velocity with which the camera moves through space in meters/second */\r\n        linearVelocity?: number;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 664, "to": 691 } } }
    }
  ],
  [
    "676",
    {
      "pageContent": "yaw?: number;\r\n\r\n        /** The velocity with which the camera moves through space in meters/second */\r\n        linearVelocity?: number;\r\n\r\n        /** The allow automatic zoom velocity according last pivot point distance */\r\n        autoZoomSpeed?: boolean;\r\n\r\n        /** Near camera clipping distance */\r\n        near?: number;\r\n\r\n        /** Far camera clipping distance */\r\n        far?: number;\r\n\r\n        /** Camera flight time in zoomTo*/\r\n        flightTime?: number;\r\n\r\n        /** Camera Field of View in degrees */\r\n        fieldOfView?: number;\r\n    }\r\n\r\n    /** Flight type camera motion controller */\r\n    export interface OrthoControllerParams {\r\n        /** The kind of camera controller. */\r\n        readonly kind: \"ortho\";\r\n\r\n        /** The world space reference coordinate system to move along. Identity matrix is default. */\r\n        referenceCoordSys?: ReadonlyMat4;\r\n\r\n        /** The position in the reference coordinate system. (0,0,0) is default. */\r\n        position?: ReadonlyVec3;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 691, "to": 721 } } }
    }
  ],
  [
    "677",
    {
      "pageContent": "referenceCoordSys?: ReadonlyMat4;\r\n\r\n        /** The position in the reference coordinate system. (0,0,0) is default. */\r\n        position?: ReadonlyVec3;\r\n\r\n        /** The velocity with which the camera moves through space in meters/second */\r\n        linearVelocity?: number;\r\n\r\n        /** Near camera clipping distance */\r\n        near?: number;\r\n\r\n        /** Far camera clipping distance */\r\n        far?: number;\r\n\r\n        /** Camera (vertical) field of view in meters. */\r\n        fieldOfView?: number;\r\n    }\r\n\r\n    export type CameraControllerParams = StaticControllerParams | TurntableControllerParams | OrbitControllerParams | FlightControllerParams | OrthoControllerParams;\r\n\r\n    /** Neutral highlight parameters */\r\n    export interface NeutralHighlightParams {\r\n        /** The kind of highlight. */\r\n        kind: \"neutral\";\r\n    }\r\n\r\n    /** Transparent highlight parameters */\r\n    export interface TransparentHighlightParams {\r\n        /** The kind of highlight. */\r\n        kind: \"transparent\";",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 721, "to": 750 } } }
    }
  ],
  [
    "678",
    {
      "pageContent": "kind: \"neutral\";\r\n    }\r\n\r\n    /** Transparent highlight parameters */\r\n    export interface TransparentHighlightParams {\r\n        /** The kind of highlight. */\r\n        kind: \"transparent\";\r\n        /** The opacity to assign. Value must between 0.0 (fully transparent) and 1.0 (fully opaque) */\r\n        opacity: number;\r\n    }\r\n\r\n    /** Color assign highlight parameters */\r\n    export interface ColorHighlightParams {\r\n        /** The kind of highlight. */\r\n        kind: \"color\";\r\n        /** The color to assign. */\r\n        color: ColorRGB | ColorRGBA;\r\n    }\r\n\r\n    /** Red, green, blue, alpha transform highlight parameters */\r\n    export type RGBATransformHighlightParams = {\r\n        /** The kind of highlight. */\r\n        kind: \"rgba\";\r\n    } & AtLeastOne<RGBAOptions>;\r\n\r\n    /** Hue, saturation, lightness, alpha transform highlight parameters */\r\n    export type HSLATransformHighlightParams = {\r\n        /** The kind of highlight. */\r\n        kind: \"hsla\";\r\n    } & AtLeastOne<HSLAOptions>;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 750, "to": 779 } } }
    }
  ],
  [
    "679",
    {
      "pageContent": "export type HSLATransformHighlightParams = {\r\n        /** The kind of highlight. */\r\n        kind: \"hsla\";\r\n    } & AtLeastOne<HSLAOptions>;\r\n\r\n    export type HighlightParams = NeutralHighlightParams | TransparentHighlightParams | ColorHighlightParams | RGBATransformHighlightParams | HSLATransformHighlightParams;\r\n\r\n    /** Output from object picking */\r\n    export interface PickInfo {\r\n        /** ObjectId of picked object */\r\n        objectId: ObjectId;\r\n        /** World space position of picked pixel */\r\n        position: ReadonlyVec3;\r\n        /** World space normal of picked pixel */\r\n        normal: ReadonlyVec3;\r\n    }\r\n\r\n    /** Rendering performance statistics */\r\n    export interface PerformanceStatistics {\r\n        /** # milliseconds spent on various aspects of rendering last frame. */\r\n        readonly cpuTime: {\r\n            readonly animation: number; // time spent in main thread doing camera updates and animations\r\n            readonly render: {",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 779, "to": 801 } } }
    }
  ],
  [
    "680",
    {
      "pageContent": "readonly cpuTime: {\r\n            readonly animation: number; // time spent in main thread doing camera updates and animations\r\n            readonly render: {\r\n                readonly draw: number; // time spent on WebGL rendering\r\n                readonly update: number; // time spent updating GPU buffers\r\n            };\r\n            readonly geometry: {\r\n                readonly update: number; // time spent traversing and updating octree\r\n            };\r\n        };\r\n        /** # milliseconds spent on GPU to render last frame. \r\n         * @remarks This requires EXT_disjoint_timer_query_webgl2, which currently is only supported on chrome for PC and Mac.\r\n         */\r\n        readonly gpuTime: number | undefined;\r\n        /** # gpu bytes allocated by static geometry. */\r\n        readonly gpuBytes: number | undefined;\r\n        /** # milliseconds since last frame was rendered.\r\n         * @remarks\r\n         * This value is an approximation of framerate when moving the camera.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 801, "to": 819 } } }
    }
  ],
  [
    "681",
    {
      "pageContent": "/** # milliseconds since last frame was rendered.\r\n         * @remarks\r\n         * This value is an approximation of framerate when moving the camera. \r\n         * It is used to automatically adjust render resolution in cases where the framerate drops below a certain threshold.\r\n         * If the last render was triggered by anything other than camera movement, e.g. an update in the scene or a post effect loop, this value will be undefined.\r\n         */\r\n        readonly frameInterval: number | undefined;\r\n        /** # Triangles rendered in last frame. */\r\n        readonly triangles: number;\r\n        /** # Points rendered in last frame. */\r\n        readonly points: number;\r\n        /** # draw calls emitted in last frame. */\r\n        readonly drawCalls: number;\r\n        /** Are all pending nodes loaded and sent to rendering pipeline? */\r\n        readonly sceneResolved: boolean;\r\n        /** Camera generation */\r\n        readonly cameraGeneration: number;\r\n    }",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 819, "to": 836 } } }
    }
  ],
  [
    "682",
    {
      "pageContent": "/** Are all pending nodes loaded and sent to rendering pipeline? */\r\n        readonly sceneResolved: boolean;\r\n        /** Camera generation */\r\n        readonly cameraGeneration: number;\r\n    }\r\n\r\n    /** Parameters for directional lighting. */\r\n    export interface DirectionalLight { }\r\n\r\n    /** Node for terrain elevation color gradient curve. */\r\n    export interface ElevationColorGradientNode {\r\n        /** Elevation above/below sea level in meters. */\r\n        readonly elevation: number;\r\n        /** Color to use at this elevation. */\r\n        readonly color: ColorRGB;\r\n    }\r\n\r\n    /** Node for point cloud deviation color gradient curve. */\r\n    export interface DeviationColorGradientNode {\r\n        /** Deviation. */\r\n        readonly deviation: number;\r\n        /** Color to use at this deviation. */\r\n        readonly color: ColorRGBA;\r\n    }\r\n\r\n    /** Node for point cloud intensity color gradient curve. */\r\n    export interface IntensityColorGradientNode {\r\n        /** Intensity. */",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 836, "to": 863 } } }
    }
  ],
  [
    "683",
    {
      "pageContent": "readonly color: ColorRGBA;\r\n    }\r\n\r\n    /** Node for point cloud intensity color gradient curve. */\r\n    export interface IntensityColorGradientNode {\r\n        /** Intensity. */\r\n        readonly intensity: number;\r\n        /** Color to use at this deviation. */\r\n        readonly color: ColorRGBA;\r\n    }\r\n\r\n    /** Render settings\r\n     * @remarks\r\n     * These settings controls various visual aspects of the 3D view.\r\n     */\r\n    export interface RenderSettings {\r\n        /** Display settings */\r\n        readonly display: {\r\n            /** Render width in pixels.\r\n             * @remarks \r\n             * This number must be an integer!\r\n             * Also note that if you pass in a canvas when creating the view, that canvas' pixel size (.width) will be set the same as this display size.\r\n             */\r\n            width: number;\r\n            /** Display height in pixels.\r\n             * @remarks\r\n             * This number must be an integer!",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 863, "to": 889 } } }
    }
  ],
  [
    "684",
    {
      "pageContent": "*/\r\n            width: number;\r\n            /** Display height in pixels.\r\n             * @remarks\r\n             * This number must be an integer!\r\n             * Also note that if you pass in a canvas when creating the view, this canvas' pixel size (.height) will be set the same as this display size.\r\n             */\r\n            height: number;\r\n        };\r\n\r\n        /** Grid settings */\r\n        readonly grid: {\r\n            /** Enable grid plane. */\r\n            enabled: boolean;\r\n            /** Number of major lines, odd number needed to have lines go through origo. */\r\n            majorLineCount: number;\r\n            /** Number of minor lines between major lines. */\r\n            minorLineCount: number;\r\n            /** Origo of the grid */\r\n            origo: ReadonlyVec3;\r\n            /** X axis of the grid, length determines the distance between lines*/\r\n            axisX: ReadonlyVec3;\r\n            /** Y axis of the grid, length determines the distance between lines*/",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 889, "to": 911 } } }
    }
  ],
  [
    "685",
    {
      "pageContent": "/** X axis of the grid, length determines the distance between lines*/\r\n            axisX: ReadonlyVec3;\r\n            /** Y axis of the grid, length determines the distance between lines*/\r\n            axisY: ReadonlyVec3;\r\n            /** Color of major grid lines*/\r\n            majorColor: ColorRGB;\r\n            /** Color of minor grid lines*/\r\n            minorColor: ColorRGB;\r\n        };\r\n\r\n        /** Settings for rendering of background.\r\n         */\r\n        readonly background: {\r\n            /** Background color.\r\n             * @remarks\r\n             * Setting the alpha component < 1 will generate a transparent background.\r\n             * If undefined, background will use image from environment map, or default color if no environment is set.\r\n             */\r\n            color: ColorRGBA | undefined;\r\n\r\n            /** Blur factor when drawing background skybox.\r\n             * @remarks\r\n             * 0 = no blur, 1 = max blur.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 911, "to": 933 } } }
    }
  ],
  [
    "686",
    {
      "pageContent": "*/\r\n            color: ColorRGBA | undefined;\r\n\r\n            /** Blur factor when drawing background skybox.\r\n             * @remarks\r\n             * 0 = no blur, 1 = max blur.\r\n             * This settings only applies when an environment map is used.\r\n             */\r\n            skyBoxBlur: number;\r\n        };\r\n\r\n        /** Clipping planes settings.\r\n         * @deprecated Use clippingVolume instead.\r\n         * @remarks\r\n         * Clipping planes allows for an axis alligned box to define what volume will be rendered or not.\r\n         * This is useful for rendering various cross sections and revealing internal geometry.\r\n         */\r\n        readonly clippingPlanes: {\r\n            /** Whether to clip geometry by the actual bounding box or not. */\r\n            enabled: boolean;\r\n            /** Whether to clip geometry inside or outside the actual bounding box. */\r\n            inside: boolean;\r\n            /** Whether to show the actual bounding box or not. */",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 933, "to": 955 } } }
    }
  ],
  [
    "687",
    {
      "pageContent": "/** Whether to clip geometry inside or outside the actual bounding box. */\r\n            inside: boolean;\r\n            /** Whether to show the actual bounding box or not. */\r\n            showBox: boolean;\r\n            /** The axis aligned bounding volume. */\r\n            bounds: AABB;\r\n            /** Highlighted side. */\r\n            highlight: number;\r\n        };\r\n\r\n        /** Clipping volume settings.\r\n         * @remarks\r\n         * Clipping volume allows for a set of up to 6 planes to define a volume that excluded from rendering.\r\n         * This is useful for rendering various cross sections and revealing internal geometry.\r\n         */\r\n        readonly clippingVolume: {\r\n            /** Whether to clip geometry by the actual bounding box or not. */\r\n            enabled: boolean;\r\n            /** How multiple clipping planes are combined. Default: \"union\" */\r\n            mode: \"intersection\" | \"union\";",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 955, "to": 974 } } }
    }
  ],
  [
    "688",
    {
      "pageContent": "enabled: boolean;\r\n            /** How multiple clipping planes are combined. Default: \"union\" */\r\n            mode: \"intersection\" | \"union\";\r\n            /** List of clipping planes (max 6), expressed as plane normal (x,y,z) and offset from origo (w) in a 4D world space vector. */\r\n            planes: readonly ReadonlyVec4[];\r\n        };\r\n\r\n        /** Current background/IBL environment.\r\n         * @remarks\r\n         * Environments are a pre-baked set of textures for background and lighting information.\r\n         * For retrieving a list of available environments, see {@link API.availableEnvironments}.\r\n         * An environment must be loaded before it can be assigned here, via {@link View.loadEnvironment}.\r\n         * Assigning an environment impacts lighting if no {@link light.sun} is defined, and also background images {@link background} if no color is defined.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 974, "to": 986 } } }
    }
  ],
  [
    "689",
    {
      "pageContent": "* Assigning an environment impacts lighting if no {@link light.sun} is defined, and also background images {@link background} if no color is defined.\r\n         * Image based lighting (IBL) uses light information from HDRI panoramic images to create a more natural looking light and ambience.\r\n         * If undefined, a basic directional sun lighting model will be used instead, allowing for dynamic changes in light color and direction at the expense of esthetics.\r\n         */\r\n        environment?: Environment;\r\n\r\n        /** Camera light exposure as stops of power of 2.\r\n         * @remarks\r\n         * Negative values darkens the image, while positive ones brightens it.\r\n         * The default value is 0.0.\r\n         */\r\n        exposure?: number;\r\n\r\n        /** Light settings */\r\n        readonly light: {\r\n            /** Ambient hemisphere light, emulating indirect light scattered from atmosphere. */\r\n            readonly ambient: {",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 986, "to": 1002 } } }
    }
  ],
  [
    "690",
    {
      "pageContent": "/** Light settings */\r\n        readonly light: {\r\n            /** Ambient hemisphere light, emulating indirect light scattered from atmosphere. */\r\n            readonly ambient: {\r\n                /** Brightness expressed as a scalar from 0.0 (none), to 1.0 (max). */\r\n                brightness: number;\r\n            };\r\n\r\n            // /** Pre-baked indirect illumination.\r\n            //  * @remarks\r\n            //  * As calculating indirect illumination is a very compute intensive operation, it is currently performed as a pre-process stage on dedicated servers in the cloud.\r\n            //  * Not all models undergoes this process, however, and changes to e.g. sunlight and scene composition will require a rebake for correct lighting.\r\n            //  */\r\n            // readonly baked: {\r\n            //     /** Brightness expressed as a scalar from 0.0 (none), to 1.0 (sunny). */\r\n            //     brightness: number;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1002, "to": 1017 } } }
    }
  ],
  [
    "691",
    {
      "pageContent": "//  */\r\n            // readonly baked: {\r\n            //     /** Brightness expressed as a scalar from 0.0 (none), to 1.0 (sunny). */\r\n            //     brightness: number;\r\n            //     /** Range of input values to use, expressed as a [low,high] range, typically [0,1] in most cases. */\r\n            //     readonly range: [low: number, high: number];\r\n            // };\r\n\r\n            /** Camera local light. */\r\n            readonly camera: {\r\n                /** Brightness expressed as a scalar from 0.0 (none), to 1.0 (bright). */\r\n                brightness: number;\r\n                /** Fall-off distance, beyond which this light is effectively disabled. */\r\n                distance: number;\r\n            };\r\n\r\n            /** Direct sunlight. */\r\n            readonly sun: {\r\n                /** Brightness expressed as a scalar from 0.0 (none), to 1.0 (sunny). */\r\n                brightness: number;\r\n                /** Sun position on the sky. */\r\n                readonly position: {",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1017, "to": 1038 } } }
    }
  ],
  [
    "692",
    {
      "pageContent": "brightness: number;\r\n                /** Sun position on the sky. */\r\n                readonly position: {\r\n                    /** Solar azimuth angle in degrees, where 0° is due north, 90° is due east and 270° due west. */\r\n                    azimuth: number;\r\n                    /** Solar elevation angle in degrees, where 0° at the horizon and 90° is straight up. */\r\n                    inclination: number;\r\n                };\r\n                /** If set then sun {@link position} on the sky will be calculated automatically based on scene {@link Scene.location}, {@link Scene.timezone} and this time. */\r\n                time?: Date;\r\n            };\r\n\r\n            // /** Shadows settings (default settings should work in most cases). */\r\n            // readonly shadows: {\r\n            //     /** enable shadows (default: false). */\r\n            //     enabled: boolean;\r\n            //     /** Default value = -0.000005. */\r\n            //     bias: number;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1038, "to": 1055 } } }
    }
  ],
  [
    "693",
    {
      "pageContent": "//     /** enable shadows (default: false). */\r\n            //     enabled: boolean;\r\n            //     /** Default value = -0.000005. */\r\n            //     bias: number;\r\n            //     /** Default value = -200. */\r\n            //     left: number;\r\n            //     /** Default value = 200. */\r\n            //     right: number;\r\n            //     /** Default value = -200. */\r\n            //     bottom: number;\r\n            //     /** Default value = 200. */\r\n            //     top: number;\r\n            // };\r\n        };\r\n\r\n        /** Color transforms for various highlighting groups.\r\n         * @remarks\r\n         * These highlights are used by the {@link scene.objectHighlighter}.\r\n         * Modifing the highlights is done by assigning a new array, rather than mutating the existing one.\r\n         * The maximum number of highlights supported is currently 256, whereof the last (255) is reserved for hidden objects.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1055, "to": 1074 } } }
    }
  ],
  [
    "694",
    {
      "pageContent": "* The maximum number of highlights supported is currently 256, whereof the last (255) is reserved for hidden objects.\r\n         * The highlight at index 0 is the initial default for all objects and can be used to e.g. highlight all objects that are not selected or otherwise part of another highlighting group.\r\n         */\r\n        objectHighlights: readonly Highlight[];\r\n\r\n        /** Ocean render settings\r\n         * @remarks\r\n         * If undefined, ocean geometry will not be rendered.\r\n         */\r\n        readonly ocean: {\r\n            /** Ocean color */\r\n            color: ColorRGB;\r\n            /** Enable ocean rendering (default false). */\r\n            enabled: boolean;\r\n            /** Ocean opacity (default 0.5).*/\r\n            opacity: number;\r\n        };\r\n\r\n        /** Point cloud settings.\r\n         * @remarks\r\n         * The sizes are cumulative and computed as follows:",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1074, "to": 1094 } } }
    }
  ],
  [
    "695",
    {
      "pageContent": "opacity: number;\r\n        };\r\n\r\n        /** Point cloud settings.\r\n         * @remarks\r\n         * The sizes are cumulative and computed as follows:\r\n         * ``effective_point_pixel_size = max(1, pixelSize + projectedSizeOf(metricSize + tolerance * toleranceFactor))``.\r\n         * Metric size is projected as a 3D sphere at the point origo to deterine pixel size.\r\n         * The term pixel refers to the size of a pixel in the target canvas element, which resolution may differ from that of the render buffer.\r\n         */\r\n        readonly points: {\r\n            /** Point shape. Default is \"disc\". */\r\n            shape: \"disc\" | \"square\";\r\n\r\n            readonly size: {\r\n                /** Point size in pixels. */\r\n                pixel: number | undefined;\r\n                /** Max point size in pixels. */\r\n                maxPixel: number | undefined;\r\n                /** Point size in meters. */\r\n                metric: number | undefined;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1094, "to": 1114 } } }
    }
  ],
  [
    "696",
    {
      "pageContent": "/** Max point size in pixels. */\r\n                maxPixel: number | undefined;\r\n                /** Point size in meters. */\r\n                metric: number | undefined;\r\n                /** The scaling factor for applying the tolerance of the current level of detail to point size.\r\n                 * @remarks\r\n                 * Different levels of detail (LOD) will have different point densities.\r\n                 * Taking this difference into account may result in a more uniform point coverage and visually pleasing result.\r\n                 * The tolerance of each LOD reflects the point merging distance threshold in meters used to reduce # points, or 0 for the original level of detail.\r\n                 */\r\n                toleranceFactor: number;\r\n            };\r\n\r\n            readonly deviation: {\r\n                mode: \"on\" | \"off\" | \"mix\";\r\n                colors: readonly DeviationColorGradientNode[];\r\n            };\r\n\r\n            readonly intensity: {",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1114, "to": 1132 } } }
    }
  ],
  [
    "697",
    {
      "pageContent": "readonly deviation: {\r\n                mode: \"on\" | \"off\" | \"mix\";\r\n                colors: readonly DeviationColorGradientNode[];\r\n            };\r\n\r\n            readonly intensity: {\r\n                mode: \"on\" | \"off\" | \"mix\";\r\n                colors: readonly IntensityColorGradientNode[];\r\n            };\r\n        };\r\n\r\n        /** Render quality settings for adjusting performance to various devices */\r\n        readonly quality: {\r\n            // /** Apply temporal antialiasing when camera stops moving. */\r\n            // antiAliasing: boolean;\r\n\r\n            /** Geometry detail settings. */\r\n            readonly detail: {\r\n                /** Level of geometry detail. 1.0 = reasonable default, >1 more detail, <1 less detail.\r\n                 * @remarks\r\n                 * This is a relative value and will be multiplied by the device performance profile when rendering.\r\n                 */\r\n                value: number;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1132, "to": 1154 } } }
    }
  ],
  [
    "698",
    {
      "pageContent": "* @remarks\r\n                 * This is a relative value and will be multiplied by the device performance profile when rendering.\r\n                 */\r\n                value: number;\r\n\r\n                /** Max limit for # of bytes used for geometry and textures in static LOD geometry.\r\n                 * @remarks\r\n                 *  Adjust this to accomodate memory constraints of your device.\r\n                 *  Default value is undefined, which will use a conservative limit for your type of device.\r\n                 *  The # bytes does not include memory used for mipmapping or device specific format conversions.\r\n                 *  Hardware compressed textures only count for the compressed byte size.\r\n                 *  GPU memory from DynamicObjects are not included in the triangle count and thus not contrained by this value.\r\n                 */\r\n                maxLodGPUBytes?: number;\r\n            };\r\n\r\n            /** Resolution settings. */",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1154, "to": 1170 } } }
    }
  ],
  [
    "699",
    {
      "pageContent": "*/\r\n                maxLodGPUBytes?: number;\r\n            };\r\n\r\n            /** Resolution settings. */\r\n            readonly resolution: {\r\n                /** Level of pixel resolution, where 1.0 = 1:1 ratio (default) and values lesser than 1 will render in lower resolution than screen and scale up for increased performance.\r\n                 * @remarks\r\n                 * This is a relative value and will be multiplied by the device performance profile when rendering.\r\n                 */\r\n                value: number;\r\n            };\r\n        };\r\n\r\n        /** Terrain render settings\r\n         * @remarks\r\n         * If undefined, terrain geometry will not be rendered.\r\n         */\r\n        terrain: {\r\n            /** Elevation gradient color curve, defined by a list of nodes.\r\n             * @remarks\r\n             * Nodes must be sorted in ascending order of elevation!",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1170, "to": 1191 } } }
    }
  ],
  [
    "700",
    {
      "pageContent": "*/\r\n        terrain: {\r\n            /** Elevation gradient color curve, defined by a list of nodes.\r\n             * @remarks\r\n             * Nodes must be sorted in ascending order of elevation!\r\n             * Elevations are defined as in meters above/below sea level (using negative values for sub sea terrain).\r\n             * At least two nodes are required for any sort of gradient.\r\n             * Nodes do not have to be uniformly distributed elevation-wise.\r\n             * To create a discontinuity in the gradient, two adjacent nodes with identical elevation, but different colors may be used.\r\n             * Any elevation outside the min/max range defined by this list will be clamped to the color of the nearest node (min or max), i.e., no extrapolation will occur.\r\n             */\r\n            elevationColors: readonly ElevationColorGradientNode[];\r\n\r\n            /** Draw terrain as background */\r\n            asBackground: boolean;\r\n        };\r\n\r\n        readonly pickBuffer: {",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1191, "to": 1208 } } }
    }
  ],
  [
    "701",
    {
      "pageContent": "elevationColors: readonly ElevationColorGradientNode[];\r\n\r\n            /** Draw terrain as background */\r\n            asBackground: boolean;\r\n        };\r\n\r\n        readonly pickBuffer: {\r\n            includeTransparent: bool;\r\n        };\r\n    }\r\n\r\n    type RecursivePartial<T> = {\r\n        [P in keyof T]?: RecursivePartial<T[P]>;\r\n    };\r\n\r\n    type RecursiveReadonly<T> = {\r\n        readonly [P in keyof T]: RecursiveReadonly<T[P]>;\r\n    };\r\n\r\n    /** A partial, read only variant of render settings for initial settings and updates. */\r\n    export type RenderSettingsParams = RecursivePartial<Readonly<RenderSettings>>;\r\n\r\n    /** Grayscale post effect. */\r\n    export interface GrayscaleParams {\r\n        /** Post effect kind/discriminator. */\r\n        readonly kind: \"gs\";\r\n        /** 3x3 matrix for color transformation matrix for e.g. sephia look. */\r\n        readonly colorTransform?: ReadonlyMat3;\r\n    }\r\n\r\n    /** Temporal antialiasing post effect.\r\n     * @remarks",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1208, "to": 1239 } } }
    }
  ],
  [
    "702",
    {
      "pageContent": "/** 3x3 matrix for color transformation matrix for e.g. sephia look. */\r\n        readonly colorTransform?: ReadonlyMat3;\r\n    }\r\n\r\n    /** Temporal antialiasing post effect.\r\n     * @remarks\r\n     * This post effect is intended to be applied over several frames of an unchanging view, i.e. when the camera stops moving and the scene is fully resolved.\r\n     * After a few dozen frames, edges will appear smoother.\r\n     * To save energy, you probably only want to run this effect for a second or two, whenever your image is smooth enough.\r\n     */\r\n    export interface TemporalAntialiasingParams {\r\n        /** Post effect kind/discriminator. */\r\n        readonly kind: \"taa\";\r\n        /** Sampling radius in # pixels. */\r\n        readonly radius?: number;\r\n        /** Flag to reset accumulation of images, e.g. after the view changed. */\r\n        readonly reset?: boolean;\r\n    }\r\n\r\n    /** Outline rendering post effect.\r\n     * @remarks",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1239, "to": 1259 } } }
    }
  ],
  [
    "703",
    {
      "pageContent": "/** Flag to reset accumulation of images, e.g. after the view changed. */\r\n        readonly reset?: boolean;\r\n    }\r\n\r\n    /** Outline rendering post effect.\r\n     * @remarks\r\n     * This post effects helps visualize faces that are perpendicular to the view plane as lines.\r\n     * Normally such faces would not be visible, which is especially a problem when using orthographic camera projection.\r\n     * This effect effectively re-renders the entire scene, so you may only want to run it after the view stops changing.\r\n     */\r\n    export interface OutlineParams {\r\n        /** Post effect kind/discriminator. */\r\n        readonly kind: \"outline\";\r\n        /** Outline color, or original color if undefined. */\r\n        readonly color?: ReadonlyVec4;\r\n    }\r\n\r\n    /** Screen space ambient occlusion post effect.\r\n     * @remarks\r\n     * This post effect is intended to be applied over several frames of an unchanging view, i.e. when the camera stops moving and the scene is fully resolved.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1259, "to": 1278 } } }
    }
  ],
  [
    "704",
    {
      "pageContent": "* @remarks\r\n     * This post effect is intended to be applied over several frames of an unchanging view, i.e. when the camera stops moving and the scene is fully resolved.\r\n     * Ambient occlusion is a shadowing effect that makes geometry easier to visually interpret and more pleasing to the eye.\r\n     * This effect can be quite demanding on weaker devices, so use over several frames with care to avoid stuttering when view changes.\r\n     */\r\n    export interface ScreenSpaceAmbientOcclusionParams {\r\n        /** Post effect kind/discriminator. */\r\n        readonly kind: \"ssao\";\r\n        /** Neighborhood sampling radius in # pixels. */\r\n        readonly radius: number;\r\n        /** # of samples per pixel. */\r\n        readonly samples: number;\r\n        /** Flag to reset accumulation of images, e.g. after the view changed. */\r\n        readonly reset?: boolean;\r\n        /** Whether to ignore transparent pixels or not. */\r\n        readonly skipOpacity?: boolean;\r\n    }",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1278, "to": 1294 } } }
    }
  ],
  [
    "705",
    {
      "pageContent": "readonly reset?: boolean;\r\n        /** Whether to ignore transparent pixels or not. */\r\n        readonly skipOpacity?: boolean;\r\n    }\r\n\r\n    export type PostEffectParams = GrayscaleParams | TemporalAntialiasingParams | ScreenSpaceAmbientOcclusionParams | OutlineParams;\r\n\r\n    export interface MeasureInfo {\r\n        /** ObjectId of picked object */\r\n        objectId: ObjectId;\r\n        /** World space position of picked pixel */\r\n        position: ReadonlyVec3;\r\n        /** Undefined if the point is on an edge */\r\n        normalVS: ReadonlyVec3 | undefined;\r\n        /** Deviation of picked pixel */\r\n        deviation: number | undefined;\r\n        /** Intensity of picked pixel */\r\n        intensity: number | undefined;\r\n    }\r\n\r\n    /** Flags reflecting what changes has occured since last render. */\r\n    export interface RenderChanges {\r\n        /** Has camera changed? */\r\n        readonly camera: boolean;\r\n        /** Has scene changed? */\r\n        readonly scene: boolean;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1294, "to": 1319 } } }
    }
  ],
  [
    "706",
    {
      "pageContent": "export interface RenderChanges {\r\n        /** Has camera changed? */\r\n        readonly camera: boolean;\r\n        /** Has scene changed? */\r\n        readonly scene: boolean;\r\n        /** Has renderSettings changed? */\r\n        readonly settings: boolean;\r\n        /** Miscellaneous changes. */\r\n        readonly misc: boolean;\r\n    }\r\n\r\n    export interface RenderOutput {\r\n        // readonly viewWorldMatrix: ReadonlyMat4;\r\n        // readonly viewClipMatrix: ReadonlyMat4;\r\n        // readonly worldViewMatrix: ReadonlyMat4;\r\n\r\n        /** Pick nearest object (if any) at the specified pixel coordinate.\r\n         * @param x view x coordinate (0=left) in css pixels.\r\n         * @param y view y coordinate (0=top) in css pixels.\r\n         * @returns `undefined` if no object intersection was found.\r\n         * @remarks\r\n         * X and Y coordinates are relative to the {@link RenderSettings.display} size.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1319, "to": 1340 } } }
    }
  ],
  [
    "707",
    {
      "pageContent": "* @returns `undefined` if no object intersection was found.\r\n         * @remarks\r\n         * X and Y coordinates are relative to the {@link RenderSettings.display} size.\r\n         * If you set this using clientWidth and clientHeight, you can use the x and y coordinates from html events directly, as everything is in css pixels.\r\n         * If you multiplied size with devicePixelRatio, you must also multiply this with mouse event coordinates to get physical pixels, not css pixels.\r\n         */\r\n        pick(x: number, y: number, pickCameraPlane: boolean = false): Promise<PickInfo | undefined>;\r\n\r\n        /** Get {@link MeasureInfo} of nearest object (if any) at the specified pixel coordinate.\r\n         * @param x view x coordinate (0=left) in css pixels.\r\n         * @param y view y coordinate (0=top) in css pixels.\r\n         * @returns `undefined` if no object intersection was found.\r\n         * @remarks",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1340, "to": 1352 } } }
    }
  ],
  [
    "708",
    {
      "pageContent": "* @param y view y coordinate (0=top) in css pixels.\r\n         * @returns `undefined` if no object intersection was found.\r\n         * @remarks\r\n         * X and Y coordinates are relative to the {@link RenderSettings.display} size.\r\n         * If you set this using clientWidth and clientHeight, you can use the x and y coordinates from html events directly, as everything is in css pixels.\r\n         * If you multiplied size with devicePixelRatio, you must also multiply this with mouse event coordinates to get physical pixels, not css pixels.\r\n         */\r\n        measure(x: number, y: number): Promise<MeasureInfo | undefined>;\r\n\r\n        /** Apply post effect to output image.\r\n         * @param params Post effect type and related parameters.\r\n        */\r\n        applyPostEffect(params: PostEffectParams): Promise<void | boolean>;\r\n\r\n        /** Get rendered image.\r\n         * @remarks",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1352, "to": 1367 } } }
    }
  ],
  [
    "709",
    {
      "pageContent": "*/\r\n        applyPostEffect(params: PostEffectParams): Promise<void | boolean>;\r\n\r\n        /** Get rendered image.\r\n         * @remarks\r\n         * Please note that this function only works/makes sense if you did not specify your own canvas in {@link API.createView}!\r\n         * It is intended for retrieving the rendered image from the OffscreenCanvas created on browsers that supports it.\r\n         * In this case,the Image is tranferred to the calling worker and no longer available for post effects, etc.\r\n         */\r\n        getImage(): Promise<ImageBitmap | undefined>;\r\n\r\n        /** Check if there are any changes since this render. */\r\n        hasChanged(): Promise<undefined | RenderChanges>;\r\n\r\n        /** Returns true if this is an idle frame, delayed after camera movement*/\r\n        isIdleFrame(): boolean;\r\n\r\n        /** The statisics for this render. */\r\n        readonly statistics: PerformanceStatistics;\r\n\r\n        /** The settings for this render.\r\n         * @remarks",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1367, "to": 1388 } } }
    }
  ],
  [
    "710",
    {
      "pageContent": "isIdleFrame(): boolean;\r\n\r\n        /** The statisics for this render. */\r\n        readonly statistics: PerformanceStatistics;\r\n\r\n        /** The settings for this render.\r\n         * @remarks\r\n         * These are a copy of the view rendersettings at the time of the render.\r\n         * Some values may have been modified to reflect computations, such as effective resolution.\r\n         */\r\n        readonly renderSettings: RecursiveReadonly<RenderSettings>;\r\n    }\r\n\r\n    /** A 3D view.\r\n     * @remarks\r\n     * 3D views will render a scene into a provided canvas element.\r\n     * Any changes to the scene, camera or settings are automatically rendered in a background animation loop.\r\n     * When the camera stops moving, additional frames may also be rendered to incrementally refine the quality of the output image over a certain period.\r\n     * Setting the {@link render} property to false will stop such automatic updates.\r\n     */\r\n    export interface View {\r\n        /** The scene to render.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1388, "to": 1409 } } }
    }
  ],
  [
    "711",
    {
      "pageContent": "* Setting the {@link render} property to false will stop such automatic updates.\r\n     */\r\n    export interface View {\r\n        /** The scene to render.\r\n         * @remarks\r\n         * Assigning a new scene initiates a sequence of geometry downloads that may take a few seconds to produce any visual results and then refine over time.\r\n         */\r\n        scene?: Scene;\r\n\r\n        /** The camera to use. */\r\n        camera: Camera;\r\n\r\n        // /** An HTML element used to automatically resize the canvas to changes in layout.\r\n        //  * @remarks\r\n        //  * By default this will be the parent element of the HTMLCanvasElement, or undefined in the case of OffscreenCanvas.\r\n        //  * You may set it to any HTMLElement, however, or undefined to disable automatic resize.\r\n        //  */\r\n        // container?: HTMLElement | undefined;\r\n\r\n        /** Render the next frame.\r\n         * @remarks\r\n         * This function is meant to be called in a loop.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1409, "to": 1430 } } }
    }
  ],
  [
    "712",
    {
      "pageContent": "//  */\r\n        // container?: HTMLElement | undefined;\r\n\r\n        /** Render the next frame.\r\n         * @remarks\r\n         * This function is meant to be called in a loop.\r\n         * You should avoid calling it from a timer or a requestAnimationFrame callback since it's already being throttled to the screen's vertical blanking.\r\n         * If the existing state has already been rendered, it will wait until there are changes before initiating a new render.\r\n         * The returned render output object will have methods for post processing and for getting an image you can display in your own canvas.\r\n         * You must call `dispose()` on the returned render output object before you can call this function again.\r\n         * @returns A promise of the rendered output.\r\n         */\r\n        render(frameCallback?: () => void): Promise<RenderOutput>;\r\n\r\n        /** Current render settings. */\r\n        readonly settings: RenderSettings;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1430, "to": 1445 } } }
    }
  ],
  [
    "713",
    {
      "pageContent": "*/\r\n        render(frameCallback?: () => void): Promise<RenderOutput>;\r\n\r\n        /** Current render settings. */\r\n        readonly settings: RenderSettings;\r\n\r\n        /** Apply render settings changes using deep copy.\r\n         * @param changes changes to current render settings.\r\n         */\r\n        applySettings(changes: RenderSettingsParams): void;\r\n\r\n        /** Dynamically adjust render quality to match device performance.\r\n         * @param framerateTargets The maximum # of milliseconds between rendered frames before reducing resolution, \r\n         * and minimum # of milliseconds for restoring quality. Default is 200ms, or 5 frames/second and 33.3 ms, or 30 fps\r\n         * @remarks\r\n         * Calling this function may reduce render resolution when rendering performance drops below the specified threshold.\r\n         * This is particularly useful to maintain acceptable performance on mobile devices with limited fillrate and triangle capacity.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1445, "to": 1461 } } }
    }
  ],
  [
    "714",
    {
      "pageContent": "* This is particularly useful to maintain acceptable performance on mobile devices with limited fillrate and triangle capacity.\r\n         * @returns The last measured median frame interval, or undefined if not yet available.\r\n         */\r\n        adjustQuality(framerateTargets?: { lowerBound: number, upperBound: number; }): number | undefined;\r\n\r\n        /** Performance statistics from previously rendered frame. */\r\n        readonly performanceStatistics: PerformanceStatistics;\r\n\r\n        /** Transfer recently rendered image to a bitmap.\r\n         * @returns A Promise to the transferred bitmap or undefined if device/browser does not yet support this functionality.\r\n         * @remarks See {@link https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/transferToImageBitmap} for more details.\r\n         */\r\n        transferToImageBitmap(): Promise<ImageBitmap | undefined>;\r\n\r\n        /** Convert image to a data blob.\r\n         * @param options Image encoding options.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1461, "to": 1476 } } }
    }
  ],
  [
    "715",
    {
      "pageContent": "*/\r\n        transferToImageBitmap(): Promise<ImageBitmap | undefined>;\r\n\r\n        /** Convert image to a data blob.\r\n         * @param options Image encoding options.\r\n         * @returns A Promise to a Blob object representing the latest rendered image or undefined if device/browser does not yet support this functionality.\r\n         * @remarks See {@link https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/convertToBlob} for more details.\r\n         */\r\n        convertToBlob(options?: ImageEncodeOptions_): Promise<Blob | undefined>;\r\n\r\n        /** The last rendered frame, if any. */\r\n        readonly lastRenderOutput: RenderOutput | undefined;\r\n\r\n        /** Signal changed camera to force rerender. */\r\n        invalidateCamera(): void;\r\n    }\r\n\r\n    /** Database interface to retrive object's data in scene. Used internally from loaded {@link Scene} interface.\r\n     * @remarks\r\n     * This interface is usually created automatically based on scene creation.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1476, "to": 1495 } } }
    }
  ],
  [
    "716",
    {
      "pageContent": "* @remarks\r\n     * This interface is usually created automatically based on scene creation.\r\n     * You may make your own implementation for custom data model, e.g. for testing or in-house databases.\r\n     */\r\n    export interface ObjectDB {\r\n        /** Get {@link ObjectData} by scene object id */\r\n        getObjectMetdata(id: number): Promise<ObjectData>;\r\n\r\n        /** Search for objects.\r\n         * @param filter {@link SearchOptions} filtering options.\r\n         * @param signal Abort request signal.\r\n         * @remarks\r\n         * See {@link Scene.search} for more details.\r\n         * @returns Async iterator of {@link HierarcicalObjectReference}\r\n         */\r\n        search(filter: SearchOptions, signal: AbortSignal | undefined): AsyncIterableIterator<HierarcicalObjectReference>;\r\n    }\r\n\r\n    /** Background/IBL environment description */\r\n    export interface EnvironmentDescription {\r\n        /** Display name of environment */\r\n        readonly name: string;\r\n\r\n        /** Data URL. */",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1495, "to": 1518 } } }
    }
  ],
  [
    "717",
    {
      "pageContent": "/** Background/IBL environment description */\r\n    export interface EnvironmentDescription {\r\n        /** Display name of environment */\r\n        readonly name: string;\r\n\r\n        /** Data URL. */\r\n        readonly url: string;\r\n\r\n        /** Thumbnail URL. */\r\n        readonly thumnbnailURL: string;\r\n    }\r\n\r\n    /** An in-memory instance of an environment, ready for rendering. */\r\n    export interface Environment {\r\n        /** Loaded environment id. */\r\n        readonly id: number;\r\n\r\n        /** Unload environment instance and release all resources.\r\n         * @remarks\r\n         * It is safe to call this function on an environment if it's currently not assigned to any view, or if all assigned views have rendered it at least once.\r\n         */\r\n        dispose(): Promise<void>;\r\n    }\r\n\r\n    /** Host device performance profile.\r\n     * @remarks\r\n     * This profile is used to adjust rendering quality and detail to fit the contraints of of the host device.\r\n     */\r\n    export interface DeviceProfile {",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1518, "to": 1546 } } }
    }
  ],
  [
    "718",
    {
      "pageContent": "* @remarks\r\n     * This profile is used to adjust rendering quality and detail to fit the contraints of of the host device.\r\n     */\r\n    export interface DeviceProfile {\r\n        /** Device type name. */\r\n        readonly name: string;\r\n        /** Whether WebGL has some major performance caveat, such as CPU or remote rendering. */\r\n        readonly hasMajorPerformanceCaveat: boolean;\r\n        /** Is this a device weak, i.e. unsuitable for demanding post processing and rendering techniques? */\r\n        readonly weakDevice: boolean;\r\n        /** Does the host device have a discrete GPU / graphics card. */\r\n        readonly discreteGPU: boolean; // used to determine what effects to run while camera is moving vs. static.\r\n        /** Render resolution bias. */\r\n        readonly renderResolution: number;\r\n        /** Render resolution bias for when camera is not moving. */\r\n        readonly renderResolutionIdle: number;\r\n        /** Texture resolution bias. */",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1546, "to": 1562 } } }
    }
  ],
  [
    "719",
    {
      "pageContent": "readonly renderResolution: number;\r\n        /** Render resolution bias for when camera is not moving. */\r\n        readonly renderResolutionIdle: number;\r\n        /** Texture resolution bias. */\r\n        readonly textureResolution: number;\r\n        /** Geometry detail bias. */\r\n        readonly detailBias: number;\r\n        /** # of frames to idle to avoid crashes/kill due to excessive power consumption on problematic mobile devices. */\r\n        readonly throttleFrames: number;\r\n        /** Hard limit of gpu memory usage for static geometry. */\r\n        readonly gpuBytesLimit: number;\r\n        /** Hard limit of # triangles for static geometry. */\r\n        readonly triangleLimit: number;\r\n    }\r\n\r\n    /** A NovoRender API instance. */\r\n    export interface API {\r\n        /** API version string, expressed using semantic versioning {@link https://semver.org/}. */\r\n        readonly version: string;\r\n\r\n        /** Performance profile for current device.\r\n         */\r\n        deviceProfile: DeviceProfile;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1562, "to": 1584 } } }
    }
  ],
  [
    "720",
    {
      "pageContent": "readonly version: string;\r\n\r\n        /** Performance profile for current device.\r\n         */\r\n        deviceProfile: DeviceProfile;\r\n\r\n        /** Stop all rendering and release all resources.\r\n         * @remarks\r\n         * Calling this function will effectively destroy this instance of the API and any associated scenes and views etc.\r\n         * This function allows you to explicitly release the associated GPU resources and memory caches used by the API without waiting for the garbage collector to do so.\r\n         */\r\n        dispose(): void;\r\n\r\n        /**\r\n         * Enable or disable automatic rendering.\r\n         * @remarks\r\n         * This value is set to true by default when a new API is created.\r\n         * When true, the api will use requestAnimationFrame() callback to automatically update all active views and controllers.\r\n         * Setting it to false will have the effect of pausing all rendering and camera motion.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1584, "to": 1602 } } }
    }
  ],
  [
    "721",
    {
      "pageContent": "* Setting it to false will have the effect of pausing all rendering and camera motion.\r\n         * You may still call {@link update} to manually render all views frame and update camera motion controllers.\r\n         */\r\n        run: boolean;\r\n\r\n        /**\r\n         * Callback that is called on each frame just before rendering.\r\n         * @remarks\r\n         * Using this callback instead of in your own requestAnimationFrame() callback is recommended to ensure your updates are applied consistently and are properly synchronized.\r\n         * If you have disabled automatic rendering by setting {@link run} = false, this callback is not called unless you manually call {@link update}.\r\n         */\r\n        animate: FrameRequestCallback | undefined;\r\n\r\n        /**\r\n         * Manually update all views and camera controllers.\r\n         * @remarks\r\n         * If you have disabled automatic rendering by setting {@link run} = false, you can call this function to manually update instead.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1602, "to": 1618 } } }
    }
  ],
  [
    "722",
    {
      "pageContent": "* @remarks\r\n         * If you have disabled automatic rendering by setting {@link run} = false, you can call this function to manually update instead.\r\n         * This may be useful if you are using requestAnimationFrame yourself and want to have full control over the order by which state gets updated.\r\n         * The returned promise will resolve at the next animation frame, typically 1/60 of a second, which can be useful if you intend to run a realtime update loop.\r\n         */\r\n        update(): Promise<void>;\r\n\r\n        /**\r\n         * Load the specificed scene into memory.\r\n         * @remarks\r\n         * The loaded scene will not include all 3D or object data immediately as these are automatically downloaded on demand.\r\n         * @param url The scene (directory) url.\r\n         * @returns A promise of the loaded {@link Scene}.\r\n         */\r\n        loadScene(id: URL | string, db?: ObjectDB): Promise<Scene>;\r\n\r\n        /**\r\n         * Load the specificed asset into memory.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1618, "to": 1635 } } }
    }
  ],
  [
    "723",
    {
      "pageContent": "*/\r\n        loadScene(id: URL | string, db?: ObjectDB): Promise<Scene>;\r\n\r\n        /**\r\n         * Load the specificed asset into memory.\r\n         * @remarks\r\n         * Assets must be passed to {@link Scene.createDynamicObject} to be rendered.\r\n         * Currently, this must be a {@link https://www.khronos.org/gltf/ glTF} file (*.gltf | *.glb).\r\n         * Cross domain urls requires CORS headers to be set appropriately.\r\n         * @param url The asset url.\r\n         * @returns A promise of the loaded {@link DynamicAsset}.\r\n         */\r\n        loadAsset(url: URL): Promise<DynamicAsset>;\r\n\r\n        /**\r\n         * Load the specificed environment into memory.\r\n         * @returns A promise of the loaded {@link Environment}.\r\n         */\r\n        loadEnvironment(environment: EnvironmentDescription): Promise<Environment>;\r\n\r\n        /**\r\n         * Create a 3D View.\r\n         * @param settings Initial {@link RenderSettingParams} settings to use for view.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1635, "to": 1657 } } }
    }
  ],
  [
    "724",
    {
      "pageContent": "/**\r\n         * Create a 3D View.\r\n         * @param settings Initial {@link RenderSettingParams} settings to use for view.\r\n         * @param htmlRenderCanvas Canvas to render to. If none is specified, an OffscreenCanvas is used instead. Beware that not all browsers support OffscreenCanvas yet.\r\n         * @remarks It is recommend that you specify the initial display pixel width and height here to avoid unnecessary reallocation of render buffers.\r\n         * @returns A promise of a newly created {@link View}.\r\n         */\r\n        createView(settings?: RenderSettingsParams, htmlRenderCanvas?: HTMLCanvasElement): Promise<View>;\r\n\r\n        /** Create an object highlight\r\n         * @param params Highlight parameters.\r\n         * @returns A highlight object that can be used in {@link RenderSettings.objectHighlights}.\r\n         */\r\n        createHighlight(params: NeutralHighlightParams): Highlight;\r\n\r\n        /** Create an object highlight\r\n         * @param params Highlight parameters.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1657, "to": 1673 } } }
    }
  ],
  [
    "725",
    {
      "pageContent": "*/\r\n        createHighlight(params: NeutralHighlightParams): Highlight;\r\n\r\n        /** Create an object highlight\r\n         * @param params Highlight parameters.\r\n         * @returns A highlight object that can be used in {@link RenderSettings.objectHighlights}.\r\n         */\r\n        createHighlight(params: TransparentHighlightParams): Highlight;\r\n\r\n        /** Create an object highlight\r\n         * @param params Highlight parameters.\r\n         * @returns A highlight object that can be used in {@link RenderSettings.objectHighlights}.\r\n         */\r\n        createHighlight(params: ColorHighlightParams): Highlight;\r\n\r\n        /** Create an object highlight\r\n         * @param params Highlight parameters.\r\n         * @returns A highlight object that can be used in {@link RenderSettings.objectHighlights}.\r\n         */\r\n        createHighlight(params: RGBATransformHighlightParams): Highlight;\r\n\r\n        /** Create an object highlight\r\n         * @param params Highlight parameters.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1673, "to": 1695 } } }
    }
  ],
  [
    "726",
    {
      "pageContent": "*/\r\n        createHighlight(params: RGBATransformHighlightParams): Highlight;\r\n\r\n        /** Create an object highlight\r\n         * @param params Highlight parameters.\r\n         * @returns A highlight object that can be used in {@link RenderSettings.objectHighlights}.\r\n         */\r\n        createHighlight(params: HSLATransformHighlightParams): Highlight;\r\n\r\n        /**\r\n         * Create a camera motion controller.\r\n         * @param params The controller parameters.\r\n         * @returns The controller object\r\n         */\r\n        createCameraController(params: StaticControllerParams): CameraController;\r\n\r\n        /**\r\n         * Create a camera motion controller.\r\n         * @param params The controller parameters.\r\n         * @returns The controller object\r\n         */\r\n        createCameraController(params: TurntableControllerParams): CameraController;\r\n\r\n        /**\r\n         * Create a camera motion controller.\r\n         * @param params The controller parameters.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1695, "to": 1720 } } }
    }
  ],
  [
    "727",
    {
      "pageContent": "createCameraController(params: TurntableControllerParams): CameraController;\r\n\r\n        /**\r\n         * Create a camera motion controller.\r\n         * @param params The controller parameters.\r\n         * @param domElement The HTML DOM element to listen for mouse/touch events. This can only be set when the controller is created.\r\n         * @returns The controller object\r\n         */\r\n        createCameraController(params: OrbitControllerParams, domElement: HTMLElement): CameraController;\r\n\r\n        /**\r\n         * Create a camera motion controller.\r\n         * @param params The controller parameters.\r\n         * @param domElement The HTML DOM element to listen for mouse/touch events. This can only be set when the controller is created.\r\n         * @returns The controller object\r\n         */\r\n        createCameraController(params: FlightControllerParams, domElement: HTMLElement): CameraController;\r\n\r\n        /**\r\n         * Create a camera motion controller.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1720, "to": 1739 } } }
    }
  ],
  [
    "728",
    {
      "pageContent": "*/\r\n        createCameraController(params: FlightControllerParams, domElement: HTMLElement): CameraController;\r\n\r\n        /**\r\n         * Create a camera motion controller.\r\n         * @param params The controller parameters.\r\n         * @param domElement The HTML DOM element to listen for mouse/touch events. This can only be set when the controller is created.\r\n         * @returns The controller object\r\n         */\r\n        createCameraController(params: OrthoControllerParams, domElement: HTMLElement): CameraController;\r\n\r\n        /**\r\n         * Retrieve list of available background/IBL environments.\r\n         * @param indexUrl The absolute or relative url of the index.json file. Relative url will be relative to the novorender api script url. If undefined, \"/assets/env/index.json\" will be used by default.\r\n         * @param domElement The HTML DOM element to listen for mouse/touch events. This can only be set when the controller is created.\r\n         * @returns The controller object",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1739, "to": 1754 } } }
    }
  ],
  [
    "729",
    {
      "pageContent": "* @param domElement The HTML DOM element to listen for mouse/touch events. This can only be set when the controller is created.\r\n         * @returns The controller object\r\n         */\r\n        availableEnvironments(indexUrl?: string): Promise<readonly EnvironmentDescription[]>;\r\n    }\r\n\r\n    /** API creation options */\r\n    export interface APIOptions {\r\n        /** Flag to disable use of offscreen canvas. */\r\n        noOffscreenCanvas?: boolean;\r\n        /** Base URL from where to load worker script and wasm files.\r\n         * @remarks\r\n         * The URL can be absolute or relative to the location of the main api script.\r\n         */\r\n        scriptBaseUrl?: string;\r\n    }\r\n\r\n    /**\r\n     * Create an instance of the NovoRender API.\r\n     * @param options Custom settings {@link APIOptions} to create API.\r\n     * @returns An initialized API object\r\n     * @throws Error if current browser and device has insufficient 3D rendering capabilities.\r\n     */",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1754, "to": 1776 } } }
    }
  ],
  [
    "730",
    {
      "pageContent": "* @returns An initialized API object\r\n     * @throws Error if current browser and device has insufficient 3D rendering capabilities.\r\n     */\r\n    export function createAPI(options?: APIOptions): API;\r\n\r\n    /**\r\n     * List of well known scene ids used for testing or demos.\r\n     */\r\n    export const enum WellKnownSceneUrls {\r\n        empty = \"empty\",\r\n        cube = \"cube\",\r\n        condos = \"https://api.novorender.com/assets/scenes/18f56c98c1e748feb8369a6d32fde9ef/\",\r\n    }\r\n\r\n    // Extended interfaces for internal use only\r\n    export namespace Internal {\r\n        export interface CameraExt extends Camera {\r\n            readonly hasChanged: boolean; // has camera values been changed since last update/render?\r\n            readonly generation: number;\r\n        }\r\n\r\n        export interface CameraControllerExt extends CameraController {\r\n            update(camera: Camera | undefined, sceneVolume: BoundingSphere | undefined, deltaTime: number): void;\r\n            connect(): void;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1776, "to": 1799 } } }
    }
  ],
  [
    "731",
    {
      "pageContent": "update(camera: Camera | undefined, sceneVolume: BoundingSphere | undefined, deltaTime: number): void;\r\n            connect(): void;\r\n            disconnect(): void;\r\n        }\r\n\r\n        export interface RenderSettingsExt extends RenderSettings {\r\n            readonly diagnostics: {\r\n                maxQueueSize: number;\r\n                holdDynamic: boolean;\r\n                showBoundingBoxes: boolean;\r\n            };\r\n\r\n            /** Advanced render settings. */\r\n            readonly advanced: {\r\n                /** Double sided face rendering. */\r\n                readonly doubleSided: {\r\n                    /** Render opaque surfaces as double sided. */\r\n                    opaque: boolean;\r\n                    /** Render transparent surface as double sided. */\r\n                    transparent: boolean;\r\n                };\r\n                /** Hide Terrain */\r\n                hideTerrain: boolean;\r\n                /** Hide Point Clouds */\r\n                hidePoints: boolean;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1799, "to": 1823 } } }
    }
  ],
  [
    "732",
    {
      "pageContent": "};\r\n                /** Hide Terrain */\r\n                hideTerrain: boolean;\r\n                /** Hide Point Clouds */\r\n                hidePoints: boolean;\r\n                /** Hide triangulated geometry */\r\n                hideTriangles: boolean;\r\n                /** Hide lines */\r\n                hideLines: boolean;\r\n                /** Hide documents */\r\n                hideDocuments: boolean;\r\n                /** Display debug frame buffers (0=colors, 1=normal, 2=depth, 3=object_id) */\r\n                displayBuffer: number;\r\n                /** Bitwise mask for what buffer to render into (0x01=color, 0x02=normal, 0x04=depth, 0x08=object_id) */\r\n                renderBufferMask: number;\r\n            };\r\n            readonly outline: {\r\n                enable: boolean;\r\n                color?: ReadonlyVec4;\r\n            };\r\n            readonly generation: number;\r\n        }\r\n    }\r\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/webgl-api/index.d.ts", "loc": { "lines": { "from": 1823, "to": 1846 } } }
    }
  ],
  [
    "733",
    {
      "pageContent": "/// <reference types=\"@novorender/webgl-api\" />\r\n\r\ndeclare module \"@novorender/data-js-api\" {\r\n    import type { RenderSettings, CameraProperties, CameraControllerParams, ObjectDB, ObjectId, ObjectIdArray, ColorRGB, SearchPattern, AABB, OrthoControllerParams, ColorRGBA } from \"@novorender/webgl-api\";\r\n    import type { MeasureSettings } from \"@novorender/measure-api\";\r\n    import type { ReadonlyVec4, vec3 } from \"gl-matrix\";\r\n\r\n    /** Scene Access level */\r\n    export const enum AccessType {\r\n        /** Read only access */\r\n        Read,\r\n        /** Read/write access */\r\n        ReadWrite\r\n    }\r\n\r\n    /** Scene objects group */\r\n    export interface ObjectGroup {\r\n        /** Object group uuid. */\r\n        id: string;\r\n        /** Object group name. */\r\n        name: string;\r\n        /** List of selected object id's.\r\n         * @remarks\r\n         * The array itself is immutable/readonly, so updates are done by assigning a new array.\r\n         */\r\n        ids?: ObjectIdArray;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/data-js-api/index.d.ts", "loc": { "lines": { "from": 1, "to": 26 } } }
    }
  ],
  [
    "734",
    {
      "pageContent": "/** List of selected object id's.\r\n         * @remarks\r\n         * The array itself is immutable/readonly, so updates are done by assigning a new array.\r\n         */\r\n        ids?: ObjectIdArray;\r\n        /** Group color when selected. */\r\n        color?: ColorRGB | ColorRGBA;\r\n        /** Group opacity when selected. */\r\n        opacity?: number;\r\n        /** Is group selected? */\r\n        selected: boolean;\r\n        /** Is Group hidden? */\r\n        hidden: boolean;\r\n        /** Group filling search criterias.\r\n         * @remarks\r\n         * This search criterias will be used to refill ids array on scene rebuilding automatically.\r\n         * If search is not defined then ids array will remain on scene rebuilding.\r\n        */\r\n        search?: SearchPattern[];\r\n        /** Include descendants.\r\n         * @remarks\r\n         * undefined value will be interpret as true\r\n        */\r\n        includeDescendants?: boolean;\r\n        /** Grouping. */\r\n        grouping?: string;\r\n    }",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/data-js-api/index.d.ts", "loc": { "lines": { "from": 26, "to": 52 } } }
    }
  ],
  [
    "735",
    {
      "pageContent": "* @remarks\r\n         * undefined value will be interpret as true\r\n        */\r\n        includeDescendants?: boolean;\r\n        /** Grouping. */\r\n        grouping?: string;\r\n    }\r\n\r\n    export namespace Bookmark {\r\n        /** Objects group bookmark state */\r\n        export interface ObjectGroup {\r\n            /** Object group uuid. */\r\n            id: string;\r\n            /** Is group selected? */\r\n            selected: boolean;\r\n            /** Is Group hidden? */\r\n            hidden: boolean;\r\n            /** Object Ids array */\r\n            ids?: ObjectIdArray;\r\n        }\r\n\r\n        /** Clipping planes settings.\r\n        * @remarks\r\n        * Clipping planes allows for an axis alligned box to define what volume will be rendered or not.\r\n        * This is useful for rendering various cross sections and revealing internal geometry.\r\n        */\r\n        export interface ClippingPlanes {\r\n            /** Whether to clip geometry by the actual bounding box or not. */\r\n            enabled: boolean;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/data-js-api/index.d.ts", "loc": { "lines": { "from": 52, "to": 80 } } }
    }
  ],
  [
    "736",
    {
      "pageContent": "*/\r\n        export interface ClippingPlanes {\r\n            /** Whether to clip geometry by the actual bounding box or not. */\r\n            enabled: boolean;\r\n            /** Whether to clip geometry inside or outside the actual bounding box. */\r\n            inside: boolean;\r\n            /** Whether to show the actual bounding box or not. */\r\n            showBox: boolean;\r\n            /** The axis aligned bounding volume. */\r\n            bounds: AABB;\r\n        }\r\n\r\n        /** Clipping volume settings.\r\n        * @remarks\r\n        * Clipping volume allows for a set of up to 6 planes to define a volume that excluded from rendering.\r\n        * This is useful for rendering various cross sections and revealing internal geometry.\r\n        */\r\n        export interface ClippingVolume {\r\n            /** Whether to clip geometry by the actual bounding box or not. */\r\n            enabled: boolean;\r\n            /** How multiple clipping planes are combined. Default: \"union\" */",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/data-js-api/index.d.ts", "loc": { "lines": { "from": 80, "to": 100 } } }
    }
  ],
  [
    "737",
    {
      "pageContent": "/** Whether to clip geometry by the actual bounding box or not. */\r\n            enabled: boolean;\r\n            /** How multiple clipping planes are combined. Default: \"union\" */\r\n            mode: \"intersection\" | \"union\";\r\n            /** List of clipping planes (max 6), expressed as plane normal (x,y,z) and offset from origo (w) in a 4D world space vector. */\r\n            planes: readonly ReadonlyVec4[];\r\n        }\r\n\r\n    }\r\n\r\n    export interface MeasureObjectPoint {\r\n        id: number;\r\n        pos: vec3;\r\n        settings?: MeasureSettings;\r\n    }\r\n    /** Bookmark, used to store camera parameters such as postion, rotation, fov etc. */\r\n    export interface Bookmark {\r\n        /** Bookmark name. */\r\n        name: string;\r\n        /** Bookmark id. */\r\n        id?: string;\r\n        /** Grouping. */\r\n        grouping?: string;\r\n        /** Bookmark description. */\r\n        description?: string;\r\n        /** Bookmark preview image as base64 encoded. */\r\n        img?: string;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/data-js-api/index.d.ts", "loc": { "lines": { "from": 100, "to": 126 } } }
    }
  ],
  [
    "738",
    {
      "pageContent": "/** Grouping. */\r\n        grouping?: string;\r\n        /** Bookmark description. */\r\n        description?: string;\r\n        /** Bookmark preview image as base64 encoded. */\r\n        img?: string;\r\n        /** Bookmark objects groups. */\r\n        objectGroups?: Bookmark.ObjectGroup[];\r\n        /** Bookmark camera position. */\r\n        camera?: CameraProperties;\r\n        /** Bookmark ortho camera. */\r\n        ortho?: OrthoControllerParams;\r\n        /** Show selection only in 3D */\r\n        selectedOnly: boolean;\r\n        /** Clipping planes */\r\n        clippingPlanes?: Bookmark.ClippingPlanes;\r\n        /** Clipping volume */\r\n        clippingVolume?: Bookmark.ClippingVolume;\r\n        /** Measurement points */\r\n        measurement?: vec3[];\r\n        /** Measurement objects points */\r\n        objectMeasurement?: MeasureObjectPoint[];\r\n        /** Selection basket */\r\n        selectionBasket?: {\r\n            ids: number[],\r\n            mode: number,\r\n        };\r\n        /** Grid settings */",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/data-js-api/index.d.ts", "loc": { "lines": { "from": 126, "to": 153 } } }
    }
  ],
  [
    "739",
    {
      "pageContent": "/** Selection basket */\r\n        selectionBasket?: {\r\n            ids: number[],\r\n            mode: number,\r\n        };\r\n        /** Grid settings */\r\n        grid?: RenderSettings[\"grid\"];\r\n        /** Follow path */\r\n        followPath?: {\r\n            id: number;\r\n            profile: number;\r\n            currentCenter?: vec3;\r\n        };\r\n        defaultVisibility?: \"neutral\" | \"semiTransparent\" | \"transparent\";\r\n    }\r\n\r\n    /** Lightweight scene preview object for viewing lists of scenes.\r\n     * \r\n     */\r\n    export interface ScenePreview {\r\n        /** Scene Id\r\n         * @remarks\r\n         * For new scenes, this will contain a random string/guid.\r\n         */\r\n        id: string;\r\n\r\n        /** Scene title */\r\n        title: string;\r\n\r\n        /** Last modification time */\r\n        lastModified?: Date;\r\n\r\n        /** Amount time scene was viewed\r\n         * @remarks\r\n         * Used for viewer scenes only\r\n         */\r\n        count?: number;\r\n    }\r\n\r\n    export interface SceneData {",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/data-js-api/index.d.ts", "loc": { "lines": { "from": 153, "to": 192 } } }
    }
  ],
  [
    "740",
    {
      "pageContent": "/** Amount time scene was viewed\r\n         * @remarks\r\n         * Used for viewer scenes only\r\n         */\r\n        count?: number;\r\n    }\r\n\r\n    export interface SceneData {\r\n        url: string;\r\n        title: string;\r\n        db?: ObjectDB;\r\n        settings?: RenderSettings;\r\n        camera?: Required<CameraControllerParams>;\r\n        viewerScenes?: ScenePreview[];\r\n        /** List of bookmarks. */\r\n        bookmarks?: Bookmark[];\r\n        /** List of object groups with properties */\r\n        objectGroups: ObjectGroup[];\r\n\r\n        customProperties?: any;\r\n        organization?: string;\r\n        tmZone?: string;\r\n    }\r\n\r\n    export interface SceneLoadFail {\r\n        error: string;\r\n        tenant?: string;\r\n    }\r\n\r\n    export interface Resource {\r\n        id: string;\r\n        title: string;\r\n        original: string;\r\n        revision?: string;\r\n        created: Date;\r\n        path?: string;\r\n        tags?: string[];\r\n        type?: string;\r\n        size?: number;\r\n    }",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/data-js-api/index.d.ts", "loc": { "lines": { "from": 192, "to": 231 } } }
    }
  ],
  [
    "741",
    {
      "pageContent": "title: string;\r\n        original: string;\r\n        revision?: string;\r\n        created: Date;\r\n        path?: string;\r\n        tags?: string[];\r\n        type?: string;\r\n        size?: number;\r\n    }\r\n\r\n    export interface ResourcePreview {\r\n        /** Gltf preview url */\r\n        gltf: string;\r\n        /** Gltf bin preview url */\r\n        bin: string;\r\n    }\r\n\r\n    export interface SceneDefinition {\r\n        title: string;\r\n        id: string;\r\n        assets: {\r\n            name?: string,\r\n            resource: string,\r\n            position?: {\r\n                X: number,\r\n                Y: number,\r\n                Z: number\r\n            },\r\n            rotation?: {\r\n                X: number,\r\n                Y: number,\r\n                Z: number,\r\n                W: number\r\n            },\r\n            scale?: {\r\n                X: number,\r\n                Y: number,\r\n                Z: number\r\n            }\r\n        }[];\r\n    }\r\n\r\n    export interface ActiveProcess {\r\n        id: string;\r\n        name: string;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/data-js-api/index.d.ts", "loc": { "lines": { "from": 231, "to": 275 } } }
    }
  ],
  [
    "742",
    {
      "pageContent": "X: number,\r\n                Y: number,\r\n                Z: number\r\n            }\r\n        }[];\r\n    }\r\n\r\n    export interface ActiveProcess {\r\n        id: string;\r\n        name: string;\r\n        state: string;\r\n    }\r\n\r\n    export interface ProcessProgress {\r\n        /** New progress text */\r\n        text: string;\r\n        /** True if process complete */\r\n        complete: boolean;\r\n        /** Last read progress text position. Should be used to next request */\r\n        position: number;\r\n    }\r\n\r\n    // Represents all remote http calls to server. This object can also be a fake for unit testing etc.\r\n    export interface API {\r\n        /** Get information about currently authenticated user */\r\n        getUserInformation(): Promise<{ name: string; organization: string; role: string | undefined; features: any; } | undefined>;\r\n\r\n        /**\r\n         * Get list of available scenes.\r\n         * @remarks\r\n         * The list contains only those scenes available to the currently authenticated user.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/data-js-api/index.d.ts", "loc": { "lines": { "from": 275, "to": 305 } } }
    }
  ],
  [
    "743",
    {
      "pageContent": "/**\r\n         * Get list of available scenes.\r\n         * @remarks\r\n         * The list contains only those scenes available to the currently authenticated user.\r\n         * For anonymous users, only public scenes are available.\r\n         */\r\n        getScenes(): Promise<readonly ScenePreview[]>;\r\n\r\n        loadScene(id: string): Promise<SceneData | SceneLoadFail>;\r\n        putScene(scene: SceneData): Promise<boolean>;\r\n        getBookmarks(id: string, options?: { group?: string, personal?: boolean }): Promise<Bookmark[]>;\r\n        saveBookmarks(id: string, bookmarks: Bookmark[], options?: { group?: string, personal?: boolean }): Promise<boolean>;\r\n        getGroupIds(sceneId: string, id: string): Promise<ObjectId[]>;\r\n\r\n        /**\r\n         * Get list of available resources.\r\n         * @remarks\r\n         * The list contains only those resources available to the currently authenticated user.\r\n         * Only administrator could access to resources.\r\n         */",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/data-js-api/index.d.ts", "loc": { "lines": { "from": 305, "to": 324 } } }
    }
  ],
  [
    "744",
    {
      "pageContent": "* @remarks\r\n         * The list contains only those resources available to the currently authenticated user.\r\n         * Only administrator could access to resources.\r\n         */\r\n        getResources(): Promise<Resource[]>;\r\n\r\n        /**\r\n         * Update the specified resource in cloud storage.\r\n         * @remarks\r\n         * Only administrator may update a resource.\r\n         * @param resource The {@link Resource}\r\n         * @returns A boolean promise indicating when the operation is complete succesfully/failed.\r\n         * @throws Error in case of insufficient access rights.\r\n         */\r\n        updateResource(resource: Resource): Promise<boolean>;\r\n\r\n        /**\r\n         * Delete the specified resource from cloud storage.\r\n         * @remarks\r\n         * Only administrator may delete a resource.\r\n         * @param id The resource id (guid)\r\n         * @returns A boolean promise indicating when the operation is complete succesfully/failed.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/data-js-api/index.d.ts", "loc": { "lines": { "from": 324, "to": 345 } } }
    }
  ],
  [
    "745",
    {
      "pageContent": "* Only administrator may delete a resource.\r\n         * @param id The resource id (guid)\r\n         * @returns A boolean promise indicating when the operation is complete succesfully/failed.\r\n         * @throws Error in case of insufficient access rights.\r\n         */\r\n        deleteResource(id: string): Promise<boolean>;\r\n\r\n        /**\r\n         * Get preview of the specified resource from cloud storage.\r\n         * @remarks\r\n         * Only administrator may access resources.\r\n         * @param id The scene id (guid)\r\n         * @returns Returns {@link ResourcePreview}\r\n         * @throws Error in case of insufficient access rights.\r\n         */\r\n        getResource(id: string): Promise<ResourcePreview>;\r\n\r\n        /**\r\n         * Delete the specified scene from cloud storage.\r\n         * @remarks\r\n         * Only scene owners may delete a scene.\r\n         * The scene will be permanently lost and any references to it becomes invalid.\r\n         * @param id The scene id (guid)",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/data-js-api/index.d.ts", "loc": { "lines": { "from": 345, "to": 367 } } }
    }
  ],
  [
    "746",
    {
      "pageContent": "* @remarks\r\n         * Only scene owners may delete a scene.\r\n         * The scene will be permanently lost and any references to it becomes invalid.\r\n         * @param id The scene id (guid)\r\n         * @returns A boolean promise indicating when the operation is complete succesfully/failed.\r\n         * @throws Error in case of insufficient access rights.\r\n         */\r\n        deleteScene(id: string): Promise<boolean>;\r\n\r\n        /** Upload resource file */\r\n        uploadResource(file: File, progress: (progress: number) => void, revisionOf?: string, path?: string, split?: boolean): Promise<{ processId?: string; error?: string; }>;\r\n\r\n        /**\r\n         * Create scene\r\n         * @remarks\r\n         * Only administrator may reate a scene.\r\n         * Definition automatically saves to storage for future use.\r\n         * @param scene {@link SceneDefinition}\r\n         * @throws Error in case of insufficient access rights.\r\n         */",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/data-js-api/index.d.ts", "loc": { "lines": { "from": 367, "to": 386 } } }
    }
  ],
  [
    "747",
    {
      "pageContent": "* Definition automatically saves to storage for future use.\r\n         * @param scene {@link SceneDefinition}\r\n         * @throws Error in case of insufficient access rights.\r\n         */\r\n        createScene(scene: SceneDefinition): Promise<{ success?: boolean; error?: string; }>;\r\n\r\n        /** Get saved scene definition using for {@link createScene}*/\r\n        getSceneDefinition(id: string): Promise<SceneDefinition>;\r\n\r\n        /**\r\n         * Get list of active processes.\r\n         */\r\n        getProcesses(): Promise<readonly ActiveProcess[]>;\r\n\r\n        /**\r\n         * Get process progress\r\n         * @param id A process id\r\n         * @param position A position returned by previous process progress\r\n         * @returns State of process {@link ProcessProgress}\r\n         */\r\n        getProcessProgress(id: string, position?: number, signal?: AbortSignal): Promise<ProcessProgress>;\r\n\r\n        /** Relative custom path request */",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/data-js-api/index.d.ts", "loc": { "lines": { "from": 386, "to": 408 } } }
    }
  ],
  [
    "748",
    {
      "pageContent": "*/\r\n        getProcessProgress(id: string, position?: number, signal?: AbortSignal): Promise<ProcessProgress>;\r\n\r\n        /** Relative custom path request */\r\n        fetch(path: string, init?: RequestInit | undefined): Promise<Response>;\r\n\r\n        getWKZones(): string[];\r\n\r\n        latLon2tm(coords: Core.GeoLocation, tmZone: string): vec3;\r\n    \r\n        tm2LatLon(position: vec3, tmZone: string): Core.GeoLocation;\r\n    }\r\n\r\n    /** Authentication header using for protected api calls*/\r\n    export interface AuthenticationHeader {\r\n        /** Authentication header name (Authentication, Set-Cookie, X-Api-Key etc) */\r\n        header: string;\r\n        /** Authentication header value (Bearer ..., \"auth cookie name\"=\"auth cookie value\", \"api key\" etc*/\r\n        value: string;\r\n    }\r\n\r\n    /** Server API creation options */\r\n    export interface APIOptions {\r\n        /** Callback returning {@link AuthenticationHeader} promise for protected api requests. */",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/data-js-api/index.d.ts", "loc": { "lines": { "from": 408, "to": 431 } } }
    }
  ],
  [
    "749",
    {
      "pageContent": "}\r\n\r\n    /** Server API creation options */\r\n    export interface APIOptions {\r\n        /** Callback returning {@link AuthenticationHeader} promise for protected api requests. */\r\n        authHeader?: () => Promise<AuthenticationHeader>;\r\n        /** Service url. e.g. \"https://novorender.com\". */\r\n        serviceUrl?: string;\r\n    }\r\n\r\n    /**\r\n     * Create an instance of the NovoRender Server API.\r\n     * @remarks\r\n     * The Server API requires that a user with appropriate access to server resources has already been logged in.\r\n     * Unless you are developing a purely public web app, you may want to check the credentials property in the returned API and redirect to a login page if need be.\r\n     * @param options Custom settings {@link ServerAPIOptions} to create API.\r\n     * @returns An initialized API object\r\n     */\r\n    export function createAPI(options?: APIOptions): API;\r\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/data-js-api/index.d.ts", "loc": { "lines": { "from": 431, "to": 450 } } }
    }
  ],
  [
    "750",
    {
      "pageContent": "/// <reference types=\"gl-matrix\" />\r\n\r\ndeclare module \"@novorender/measure-api\" {\r\n  import type { CylinderData, PlaneData, SurfaceData, FaceData } from \"./src/worker/brep\";\r\n\r\n  type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &\r\n    U[keyof U];\r\n\r\n  import type {\r\n    ReadonlyVec3,\r\n    ReadonlyVec4,\r\n    ReadonlyQuat,\r\n    ReadonlyMat3,\r\n    vec3,\r\n    quat,\r\n    ReadonlyMat4,\r\n    ReadonlyVec2,\r\n    vec2,\r\n  } from \"gl-matrix\";\r\n\r\n  import type { CylinderOptions } from \"./src/index\";\r\n\r\n  export declare class MeasureError extends Error {\r\n    constructor(readonly type: string, message: string);\r\n  }\r\n\r\n  type CylinderOptions = typeof cylinderOptions;\r\n  export type CylinerMeasureType = {\r\n    [K in keyof CylinderOptions]: CylinderOptions[K] extends string\r\n    ? CylinderOptions[K]\r\n    : never;\r\n  }[keyof CylinderOptions];\r\n\r\n  /** 2d profile with slope information */\r\n  export interface Profile {\r\n    readonly profilePoints: ReadonlyVec2[];\r\n    /** slope between points for n and n -1 */",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/measure-api/index.d.ts", "loc": { "lines": { "from": 1, "to": 37 } } }
    }
  ],
  [
    "751",
    {
      "pageContent": "}[keyof CylinderOptions];\r\n\r\n  /** 2d profile with slope information */\r\n  export interface Profile {\r\n    readonly profilePoints: ReadonlyVec2[];\r\n    /** slope between points for n and n -1 */\r\n    readonly slopes: number[];\r\n    /** Highetst Z value on the profile */\r\n    readonly top: number;\r\n    /** Lowest Z value on the profile */\r\n    readonly bottom: number;\r\n    /** Start Z value of the profile */\r\n    readonly startElevation: number;\r\n    /** End Z value of the profile */\r\n    readonly endElevation: number;\r\n  }\r\n\r\n  /** Additional options for measurement */\r\n  export interface MeasureSettings {\r\n    /** Where to measure cylinder from, in case of measure between two cylinder, same option will be used for both*/\r\n    cylinderMeasure: CylinerMeasureType;\r\n  }\r\n\r\n  /** Hole in a filled  polygon */\r\n  export interface DrawVoid {\r\n    /** View space coordinates, in pixel values, empty if the entire part is out of view*/\r\n    vertices2D?: ReadonlyVec2[];\r\n    /** World coordinates*/",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/measure-api/index.d.ts", "loc": { "lines": { "from": 37, "to": 64 } } }
    }
  ],
  [
    "752",
    {
      "pageContent": "export interface DrawVoid {\r\n    /** View space coordinates, in pixel values, empty if the entire part is out of view*/\r\n    vertices2D?: ReadonlyVec2[];\r\n    /** World coordinates*/\r\n    vertices3D: ReadonlyVec3[];\r\n  }\r\n\r\n  /** Information about object to draw for measurement */\r\n  export interface DrawPart {\r\n    /** Name of the part */\r\n    readonly name?: string;\r\n    /** Display text of the part,\r\n     * For lines of 2 points it is the length\r\n     * For angles its the angle in degrees\r\n     */\r\n    readonly text?: string;\r\n    /** Type of object to draw */\r\n    readonly drawType: \"lines\" | \"filled\" | \"vertex\" | \"curveSegment\" | \"angle\" | \"text\";\r\n    /** From/to 3d elevation of object, used for cylinder to show slope */\r\n    readonly elevation?: { from: number; to: number; horizontalDisplay: boolean };\r\n    /** Hole in the draw part,  only valid for filled kind*/\r\n    readonly voids?: DrawVoid[];\r\n    /** View space coordinates, in pixel values, empty if the entire part is out of view*/",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/measure-api/index.d.ts", "loc": { "lines": { "from": 64, "to": 86 } } }
    }
  ],
  [
    "753",
    {
      "pageContent": "/** Hole in the draw part,  only valid for filled kind*/\r\n    readonly voids?: DrawVoid[];\r\n    /** View space coordinates, in pixel values, empty if the entire part is out of view*/\r\n    vertices2D?: ReadonlyVec2[];\r\n    /** World coordinates*/\r\n    readonly vertices3D: ReadonlyVec3[];\r\n  }\r\n\r\n  /** An object for 2d drawings, can contain multiple parts */\r\n  export interface DrawObject {\r\n    /** Type of draw object */\r\n    readonly kind: \"cylinder\" | \"plane\" | \"edge\" | \"curveSegment\" | \"vertex\" | \"complex\" | \"text\";\r\n    /** Different parts of the object */\r\n    readonly parts: DrawPart[];\r\n  }\r\n\r\n  /** A hierarcical structure to draw 2d objects */\r\n  export interface DrawProduct {\r\n    /** Type of draw prouct */\r\n    readonly kind: \"basic\" | \"manhole\" | \"measureResult\";\r\n    /** Objects to draw */\r\n    readonly objects: DrawObject[];\r\n  }\r\n\r\n  /** Tolerance for picking and snapping to parametric objects */\r\n  export interface SnapTolerance {\r\n    segment?: number;\r\n    edge?: number;\r\n    face?: number;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/measure-api/index.d.ts", "loc": { "lines": { "from": 86, "to": 114 } } }
    }
  ],
  [
    "754",
    {
      "pageContent": "}\r\n\r\n  /** Tolerance for picking and snapping to parametric objects */\r\n  export interface SnapTolerance {\r\n    segment?: number;\r\n    edge?: number;\r\n    face?: number;\r\n    point?: number;\r\n  }\r\n\r\n  /** Parameter bounds */\r\n  export interface ParameterBounds {\r\n    /** Start of parameter */\r\n    readonly start: number;\r\n    /** End of parameter*/\r\n    readonly end: number;\r\n  }\r\n\r\n  /** MeasurementValues is a collection of values for any measurment */\r\n  export type MeasurementValues =\r\n    | EdgeValues\r\n    | FaceValues\r\n    | DuoMeasurementValues;\r\n\r\n  /** EdgeValues is a collection of values for measurment on a single edge */\r\n  export type EdgeValues = LineValues | ArcValues | LineStripValues;\r\n\r\n  /** LineValues is a collection of values for measuring a single line */\r\n  export interface LineValues {\r\n    readonly kind: \"line\";\r\n    /** Distance from the start to the end of the line */\r\n    readonly distance: Number;\r\n    /** Gradient of the line */\r\n    readonly gradient: vec3;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/measure-api/index.d.ts", "loc": { "lines": { "from": 114, "to": 147 } } }
    }
  ],
  [
    "755",
    {
      "pageContent": "readonly kind: \"line\";\r\n    /** Distance from the start to the end of the line */\r\n    readonly distance: Number;\r\n    /** Gradient of the line */\r\n    readonly gradient: vec3;\r\n    /** The start of the line */\r\n    readonly start: vec3;\r\n    /** The end of the line */\r\n    readonly end: vec3;\r\n  }\r\n\r\n  /** ArcValues is a collection of values for measuring a single arc */\r\n  export interface ArcValues {\r\n    readonly kind: \"arc\";\r\n    /** Radius of the arc */\r\n    readonly radius: number;\r\n    /** Angle of the arc segment */\r\n    readonly totalAngle: number;\r\n  }\r\n\r\n  /** LineStripValues is a collection of values for measuring a line strip */\r\n  export interface LineStripValues {\r\n    readonly kind: \"lineStrip\";\r\n    /** Accumulated length of all lines in strip */\r\n    readonly totalLength?: number;\r\n  }\r\n\r\n  /** FaceValues is a collection of values for measurment on a single face */\r\n  export type FaceValues = PlaneValues | CylinderValues;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/measure-api/index.d.ts", "loc": { "lines": { "from": 147, "to": 175 } } }
    }
  ],
  [
    "756",
    {
      "pageContent": "readonly totalLength?: number;\r\n  }\r\n\r\n  /** FaceValues is a collection of values for measurment on a single face */\r\n  export type FaceValues = PlaneValues | CylinderValues;\r\n\r\n  /** PlaneValues is a collection of values for measuring a single Plane */\r\n  export interface PlaneValues {\r\n    readonly kind: \"plane\";\r\n    /** Width of the plane */\r\n    readonly width?: number;\r\n    /** Height of the plane */\r\n    readonly height?: number;\r\n    /** Largest outer radius of the plane in case of only arcs */\r\n    readonly outerRadius?: number;\r\n    /** Largest inner radius of the plane in case of only arcs */\r\n    readonly innerRadius?: number;\r\n    /** Normal of the plane */\r\n    readonly normal: vec3;\r\n    /** Calculated area of the plane */\r\n    readonly area?: number;\r\n    /** Corner vertices of the plane */\r\n    readonly vertices: vec3[];\r\n    /** Outer edges of the plane*/\r\n    readonly outerEdges: EdgeValues[];\r\n    /** Inner edges of the plane*/\r\n    readonly innerEdges: EdgeValues[][];",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/measure-api/index.d.ts", "loc": { "lines": { "from": 175, "to": 201 } } }
    }
  ],
  [
    "757",
    {
      "pageContent": "readonly vertices: vec3[];\r\n    /** Outer edges of the plane*/\r\n    readonly outerEdges: EdgeValues[];\r\n    /** Inner edges of the plane*/\r\n    readonly innerEdges: EdgeValues[][];\r\n    /** Y value of the plane origin*/\r\n    readonly heightAboveXyPlane?: number;\r\n    readonly entity: SelectedEntity;\r\n  }\r\n\r\n  /** CylinderValues is a collection of values for measuring a single cylinder */\r\n  export interface CylinderValues {\r\n    readonly kind: \"cylinder\";\r\n    /** Cylinder radius */\r\n    readonly radius: number;\r\n    /** Start of the line going in the center of the cylinder */\r\n    readonly centerLineStart: vec3;\r\n    /** End of the line going in the center of the cylinder */\r\n    readonly centerLineEnd: vec3;\r\n    /** Entity */\r\n    readonly entity: SelectedEntity;\r\n  }\r\n\r\n  /** DuoMeasurementValues is a collection of values for measuring two objects */\r\n  export interface DuoMeasurementValues {\r\n    readonly drawKind: \"measureResult\";\r\n    /** Total distance between the objects */",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/measure-api/index.d.ts", "loc": { "lines": { "from": 201, "to": 227 } } }
    }
  ],
  [
    "758",
    {
      "pageContent": "export interface DuoMeasurementValues {\r\n    readonly drawKind: \"measureResult\";\r\n    /** Total distance between the objects */\r\n    readonly distance?: number;\r\n    /** Total normdistance between the objects from object A */\r\n    readonly normalDistance?: number;\r\n    /** Distance on the X plane between the objects */\r\n    readonly distanceX: number;\r\n    /** Distance on the Y plane between the objects */\r\n    readonly distanceY: number;\r\n    /** Distance on the Z plane between the objects */\r\n    readonly distanceZ: number;\r\n    /** Closest point on object A */\r\n    readonly pointA?: vec3;\r\n    /** Closest point on object B */\r\n    readonly pointB?: vec3;\r\n    /** Angle between objects, used for cylinders, and the directions*/\r\n    readonly angle?: {\r\n      radians: number, angleDrawInfo: [vec3, vec3, vec3], additionalLine?: [vec3, vec3]\r\n    };\r\n    /** Point to display normal distance between objects from object A */\r\n    readonly normalPoints?: vec3[] | undefined;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/measure-api/index.d.ts", "loc": { "lines": { "from": 227, "to": 248 } } }
    }
  ],
  [
    "759",
    {
      "pageContent": "};\r\n    /** Point to display normal distance between objects from object A */\r\n    readonly normalPoints?: vec3[] | undefined;\r\n    /** The valid measurement settings for the current measure objects A and B*/\r\n    readonly validMeasureSettings?: { a: boolean; b: boolean };\r\n  }\r\n\r\n  /** Gives values based on selected linestrip*/\r\n  export interface LineStripMeasureValues {\r\n    /** The total length of the linestrip */\r\n    readonly totalLength: number;\r\n    /** The input vertices */\r\n    readonly linestrip: ReadonlyVec3[];\r\n    /** List of lenths based on line segments starting with segment between vertex 0 and 1  */\r\n    readonly segmentLengts: number[];\r\n    /** List of angles between line segments starting with angle between segment 0 and 1  */\r\n    readonly angles: number[];\r\n  }\r\n\r\n  /** An entity that can be used in Api.getDrawMeasureEntity, Objects returned from the api with draw kind parameter can be used*/\r\n  export interface DrawableEntity {\r\n    /** Object id from the web-gl api*/",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/measure-api/index.d.ts", "loc": { "lines": { "from": 248, "to": 269 } } }
    }
  ],
  [
    "760",
    {
      "pageContent": "export interface DrawableEntity {\r\n    /** Object id from the web-gl api*/\r\n    readonly ObjectId?: Public.ObjectId;\r\n    /** Collection of kinds that can be drawn using Api.getDrawMeasureEntity*/\r\n    readonly drawKind: \"edge\" | \"face\" | \"vertex\" | \"curveSegment\" | \"manhole\" | \"measureResult\";\r\n  }\r\n\r\n  /** Gives values based on selected manhole, \r\n   * must contain a top plane, bottom plane an a cylinder running for atleast 50% of the distance between top and bottom \r\n   * Tesselated manholes will not work */\r\n  export interface ManholeMeasureValues {\r\n    /** Can be drawn by Api.getDrawMeasureEntity*/\r\n    readonly drawKind: \"manhole\";\r\n    /** Object id from the web-gl api*/\r\n    readonly ObjectId: Public.ObjectId;\r\n    /** Plane at the top of the manhole*/\r\n    readonly top: PlaneValues;\r\n    /** Z value of the top plane, center is used if tilted*/\r\n    readonly topElevation: number;\r\n    /** Outer bottom plane of the manhole*/\r\n    readonly bottomOuter: PlaneValues;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/measure-api/index.d.ts", "loc": { "lines": { "from": 269, "to": 289 } } }
    }
  ],
  [
    "761",
    {
      "pageContent": "/** Z value of the top plane, center is used if tilted*/\r\n    readonly topElevation: number;\r\n    /** Outer bottom plane of the manhole*/\r\n    readonly bottomOuter: PlaneValues;\r\n    /** Z value of the outer bottom plane, center is used if tilted*/\r\n    readonly bottomOuterElevation: number;\r\n    /** Inner bottom plane, can only be found if circular planes are used, else this is always undefiend*/\r\n    readonly bottomInner?: PlaneValues;\r\n    /** Z value of the inner bottom plane, center is used if tilted*/\r\n    readonly bottomInnerElevation?: number;\r\n    /** Inner cylinder if there are 2 cylinders in the manhole */\r\n    readonly inner?: CylinderValues;\r\n    /** Radius of the inner cylinder */\r\n    readonly innerRadius?: number;\r\n    /** Radius of the outer cylinder, outer will be chosen if only one exists */\r\n    readonly outer: CylinderValues;\r\n    /** Radius of the outer cylinder */\r\n    readonly outerRadius: number;\r\n    /** Internal values used for drawing */\r\n    readonly internal: {",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/measure-api/index.d.ts", "loc": { "lines": { "from": 289, "to": 308 } } }
    }
  ],
  [
    "762",
    {
      "pageContent": "readonly outer: CylinderValues;\r\n    /** Radius of the outer cylinder */\r\n    readonly outerRadius: number;\r\n    /** Internal values used for drawing */\r\n    readonly internal: {\r\n      readonly top: FaceData;\r\n      readonly bottomOuter: FaceData;\r\n      readonly bottomInner?: FaceData;\r\n      readonly inner?: FaceData;\r\n      readonly outer: FaceData;\r\n    }\r\n  }\r\n\r\n  /** Gives values to create a camera based on selected object */\r\n  export interface CameraValues {\r\n    /** Normalized direction */\r\n    normal: ReadonlyVec3;\r\n    /** World position */\r\n    position: ReadonlyVec3;\r\n  }\r\n\r\n  /** Used to get camera values along a curve segment or cylinder center */\r\n  export interface FollowParametricObject {\r\n    /** Type of object that is being followed */\r\n    readonly type: \"edge\" | \"curve\" | \"cylinder\" | \"cylinders\";\r\n    /** Collection of Object Ids, if multiple then it must be following cylinders*/\r\n    readonly ids: Public.ObjectId[];",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/measure-api/index.d.ts", "loc": { "lines": { "from": 308, "to": 334 } } }
    }
  ],
  [
    "763",
    {
      "pageContent": "readonly type: \"edge\" | \"curve\" | \"cylinder\" | \"cylinders\";\r\n    /** Collection of Object Ids, if multiple then it must be following cylinders*/\r\n    readonly ids: Public.ObjectId[];\r\n    /** Information about the entity, used to avoid finding the objects in api functions*/\r\n    readonly selectedEntity: MeasureEntity | undefined;\r\n    /** Start and stop bounds of the followed object, \r\n     * unless the parametric object specify otherwise start will be 0 and end will be the length of all segments*/\r\n    readonly parameterBounds: ParameterBounds;\r\n    /** Returns camera values for given parameter T,\r\n     * if T is before start it will return camera values at start and if its larger than end it will return camera values for end*/\r\n    getCameraValues(t: number): Promise<CameraValues | undefined>;\r\n  }\r\n\r\n  /** Measure api loads from same scene assets. Brep files are required*/\r\n  export interface MeasureAPI {\r\n    /** Same scene url as the corresponding webgl api load scene*/",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/measure-api/index.d.ts", "loc": { "lines": { "from": 334, "to": 349 } } }
    }
  ],
  [
    "764",
    {
      "pageContent": "}\r\n\r\n  /** Measure api loads from same scene assets. Brep files are required*/\r\n  export interface MeasureAPI {\r\n    /** Same scene url as the corresponding webgl api load scene*/\r\n    loadScene(url: URL | string): Promise<MeasureScene>;\r\n    dispose(): Promise<void>;\r\n    /** Converts world space points to on screen pixel path and points*/\r\n    toPathPoints(\r\n      points: ReadonlyVec3[],\r\n      view: View,\r\n    ): [pathPoints: ReadonlyVec2[], pixelPoints: ReadonlyVec2[]] | undefined;\r\n\r\n    /** Converts world space points to on screen pixel points. Input and output are of equal length. */\r\n    toMarkerPoints(\r\n      view: View,\r\n      points: ReadonlyVec3[],\r\n    ): (ReadonlyVec2 | undefined)[];\r\n\r\n    /** Returns a hierarcical structure of the element, describing how it should be drawn in 2d*/\r\n    getDrawMeasureEntity(\r\n      view: Public.View,\r\n      scene: MeasureScene,\r\n      entity: DrawableEntity,\r\n      setting?: MeasureSettings\r\n    ): Promise<(DrawProduct | undefined) | undefined>;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/measure-api/index.d.ts", "loc": { "lines": { "from": 349, "to": 374 } } }
    }
  ],
  [
    "765",
    {
      "pageContent": "getDrawMeasureEntity(\r\n      view: Public.View,\r\n      scene: MeasureScene,\r\n      entity: DrawableEntity,\r\n      setting?: MeasureSettings\r\n    ): Promise<(DrawProduct | undefined) | undefined>;\r\n    /** Returns a hierarcical structure describing how it should be drawn in 2d, \r\n     * should be used instead of getDrawMeasureEntity when a drawable entity is not available */\r\n    getDrawObjectFromPoints(view: Public.View, points: ReadonlyVec3[], closed: boolean, angles: boolean): DrawProduct | undefined;\r\n    getDrawText(view: Public.View, points: ReadonlyVec3[], text: string): DrawProduct | undefined;\r\n  }\r\n\r\n  /** Scene with objects being measured. Brep files are required*/\r\n  export interface MeasureScene {\r\n    /** Measure objet, if b is undefined then single measure values are returned else the measurement between 2 objects*/\r\n    measure(\r\n      a: MeasureEntity,\r\n      b?: MeasureEntity,\r\n      settingA?: MeasureSettings,\r\n      settingB?: MeasureSettings",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/measure-api/index.d.ts", "loc": { "lines": { "from": 374, "to": 393 } } }
    }
  ],
  [
    "766",
    {
      "pageContent": "measure(\r\n      a: MeasureEntity,\r\n      b?: MeasureEntity,\r\n      settingA?: MeasureSettings,\r\n      settingB?: MeasureSettings\r\n    ): Promise<MeasurementValues | undefined>;\r\n\r\n    /** Returns collision values between 2 entities\r\n     * currently only works for two cylinders\r\n    */\r\n    async collision(\r\n      a: SelectedEntity,\r\n      b: SelectedEntity,\r\n      setting?: MeasureSettings\r\n    ): Promise<CollisionValues | undefined>;\r\n\r\n    /** Measure distance between a measurement object an a 3d point*/\r\n    measureToPoint(\r\n      a: MeasureEntity,\r\n      b: ReadonlyVec3,\r\n      setting?: MeasureSettings\r\n    ): Promise<DuoMeasurementValues | undefined>;\r\n\r\n    /** Measure distance between 2 points*/\r\n    pointToPoint(a: ReadonlyVec3, b: ReadonlyVec3): DuoMeasurementValues;\r\n\r\n    /** Get suggested camea values for selected object\r\n     * For cylinder values snap to the closest axis on the cylinder*/\r\n    getCameraValues(\r\n      a: MeasureEntity,\r\n      cameraDir: vec3",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/measure-api/index.d.ts", "loc": { "lines": { "from": 393, "to": 423 } } }
    }
  ],
  [
    "767",
    {
      "pageContent": "/** Get suggested camea values for selected object\r\n     * For cylinder values snap to the closest axis on the cylinder*/\r\n    getCameraValues(\r\n      a: MeasureEntity,\r\n      cameraDir: vec3\r\n    ): Promise<CameraValues | undefined>;\r\n\r\n    /** Returns the measure entity for given object and location**/\r\n    pickMeasureEntity(\r\n      id: Public.ObjectId,\r\n      selectionPosition: ReadonlyVec3,\r\n      tolerance?: SnapTolerance\r\n    ): Promise<{ entity: MeasureEntity, status: BrepStatus, connectionPoint?: vec3 }>;\r\n\r\n    /** Returns the measure entity for given object and location if the current object is selected\r\n     *  This is much faster than pickMeasureEntity and can be used for hover**/\r\n    pickMeasureEntityOnCurrentObject(\r\n      id: Public.ObjectId,\r\n      selectionPosition: ReadonlyVec3,\r\n      tolerance: SnapTolerance\r\n    ): Promise<{ entity: MeasureEntity | undefined, status: BrepStatus, connectionPoint?: vec3 }>;\r\n\r\n    /** Returns the entire parametric hierarchy,",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/measure-api/index.d.ts", "loc": { "lines": { "from": 423, "to": 445 } } }
    }
  ],
  [
    "768",
    {
      "pageContent": "tolerance: SnapTolerance\r\n    ): Promise<{ entity: MeasureEntity | undefined, status: BrepStatus, connectionPoint?: vec3 }>;\r\n\r\n    /** Returns the entire parametric hierarchy,\r\n     *  returns undefined upon abort*/\r\n    getParametricProduct(\r\n      id: Public.ObjectId\r\n    ): Promise<ParametricProduct | undefined>;\r\n\r\n    /** Returns the profile view of a linestrip where x is the length of the line and y is the height*/\r\n    getProfileViewFromEntity(\r\n      entity: MeasureEntity,\r\n      setting?: MeasureSettings\r\n    ): Promise<Profile | undefined>;\r\n\r\n    /** Returns the profile view of selected objects where x is the length of the line and y is the height,\r\n     * currently only supports cylinders\r\n     */\r\n    getProfileViewFromMultiSelect(\r\n      ids: Public.ObjectId[],\r\n      setting?: MeasureSettings\r\n    ): Promise<Profile | undefined>;\r\n\r\n    /** Return reveresed input profile*/\r\n    reverseProfile(inProfile: Profile): Profile;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/measure-api/index.d.ts", "loc": { "lines": { "from": 445, "to": 469 } } }
    }
  ],
  [
    "769",
    {
      "pageContent": "ids: Public.ObjectId[],\r\n      setting?: MeasureSettings\r\n    ): Promise<Profile | undefined>;\r\n\r\n    /** Return reveresed input profile*/\r\n    reverseProfile(inProfile: Profile): Profile;\r\n\r\n    /** Returns an object that can be used to calculate camera posisiotns that follow the object\r\n     * Supports Edges, curve segments and cylinder\r\n     */\r\n    followParametricObjectFromPosition(\r\n      id: Public.ObjectId,\r\n      selectionPosition: ReadonlyVec3,\r\n      setting?: MeasureSettings\r\n\r\n    ): Promise<FollowParametricObject | undefined>;\r\n\r\n    /** Returns an object that can be used to calculate camera posisiotns that follow the objects\r\n     * Supports multiple cylinder,\r\n     * In case of one object, and that object only containing one curve segment it will return curve segment\r\n     */\r\n    followParametricObjects(\r\n      ids: Public.ObjectId[],\r\n      setting?: MeasureSettings\r\n    ): Promise<FollowParametricObject | undefined>;\r\n\r\n    /** Calculates the area from polygon.",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/measure-api/index.d.ts", "loc": { "lines": { "from": 469, "to": 495 } } }
    }
  ],
  [
    "770",
    {
      "pageContent": "*/\r\n    followParametricObjects(\r\n      ids: Public.ObjectId[],\r\n      setting?: MeasureSettings\r\n    ): Promise<FollowParametricObject | undefined>;\r\n\r\n    /** Calculates the area from polygon.\r\n     * Treat polygon as closed.\r\n     * y is treated as height and is ignored.*/\r\n    areaFromPolygon(\r\n      vertices: ReadonlyVec3[],\r\n      normals: ReadonlyVec3[]\r\n    ): { area: number; polygon: ReadonlyVec3[] };\r\n\r\n    /** Measure between multiple points.*/\r\n    measureLineStrip(vertices: ReadonlyVec3[]): LineStripMeasureValues;\r\n    /** Object inspection, where the entire parametric object is treated as the input object type*/\r\n    inspectObject(productId: number, objectType: \"manhole\"): Promise<ManholeMeasureValues | undefined>;\r\n\r\n    /** Swaps between inner and outer cylinder, returns undefined if there is only one*/\r\n    swapCylinder(entity: MeasureEntity, to: \"inner\" | \"outer\"): Promise<MeasureEntity | undefined>;\r\n\r\n    getRoadProfile(roadId: string): Promise<RoadProfiles | undefined>;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/measure-api/index.d.ts", "loc": { "lines": { "from": 495, "to": 517 } } }
    }
  ],
  [
    "771",
    {
      "pageContent": "swapCylinder(entity: MeasureEntity, to: \"inner\" | \"outer\"): Promise<MeasureEntity | undefined>;\r\n\r\n    getRoadProfile(roadId: string): Promise<RoadProfiles | undefined>;\r\n    getCrossSlope(roadId: string): Promise<CrossSlope | undefined>;\r\n    getCrossSections(roadIds: string[], profileNumber: number): Promise<RoadCrossSection[]>;\r\n  }\r\n\r\n  /** Interface often used in the measure-api to describe a selected parametric object,\r\n   * It can either be an object or a simple 3d point\r\n   * Any measure entity can be drawn using getDrawMeasureEntity\r\n  */\r\n  export type MeasureEntity = SelectedEntity | PointEntity;\r\n\r\n  export type BrepStatus = \"loaded\" | \"unknown\" | \"missing\";\r\n\r\n  /** Interface often returned from measure-api calles, can be used as input to modify the entity\r\n  */\r\n  export interface SelectedEntity {\r\n    /** Object id from the web-gl api*/\r\n    ObjectId: Public.ObjectId;\r\n    drawKind: \"edge\" | \"face\" | \"curveSegment\";\r\n    /** Used internally */\r\n    pathIndex: number;",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/measure-api/index.d.ts", "loc": { "lines": { "from": 517, "to": 539 } } }
    }
  ],
  [
    "772",
    {
      "pageContent": "/** Object id from the web-gl api*/\r\n    ObjectId: Public.ObjectId;\r\n    drawKind: \"edge\" | \"face\" | \"curveSegment\";\r\n    /** Used internally */\r\n    pathIndex: number;\r\n    /** Used internally */\r\n    instanceIndex: number;\r\n    /** Used internally */\r\n    parameter?: number | ReadonlyVec2 | ReadonlyVec3;\r\n  }\r\n\r\n\r\n  export interface PointEntity {\r\n    ObjectId: Public.ObjectId;\r\n    drawKind: \"vertex\";\r\n    /** Used internally */\r\n    pathIndex?: number;\r\n    /** Used internally */\r\n    instanceIndex?: number;\r\n    /** Used internally */\r\n    parameter: ReadonlyVec3;\r\n  }\r\n\r\n  export function createMeasureAPI(scriptBaseUrl?: string): MeasureAPI;\r\n\r\n  /** Collision values*/\r\n  export interface CollisionValues {\r\n    /** Collision point between two objects*/\r\n    readonly point: vec3;\r\n  }\r\n\r\n  export interface RoadCrossSection {\r\n    readonly points: ReadonlyVec3[],\r\n    readonly points2D: ReadonlyVec2[],\r\n    readonly labels: string[],\r\n    //Slope from centerline to shoulder  [left, Right]",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/measure-api/index.d.ts", "loc": { "lines": { "from": 539, "to": 574 } } }
    }
  ],
  [
    "773",
    {
      "pageContent": "readonly points: ReadonlyVec3[],\r\n    readonly points2D: ReadonlyVec2[],\r\n    readonly labels: string[],\r\n    //Slope from centerline to shoulder  [left, Right] \r\n    readonly slopes: {\r\n      left: { slope: number, start: ReadonlyVec3, end: ReadonlyVec3 },\r\n      right: { slope: number, start: ReadonlyVec3, end: ReadonlyVec3 }\r\n    },\r\n    readonly codes: number[]\r\n  }\r\n\r\n  export interface RoadProfile {\r\n    name: string,\r\n    elevations: number[]\r\n  }\r\n\r\n  export interface RoadProfiles {\r\n    readonly name: strig,\r\n    readonly profiles: RoadProfile[],\r\n    readonly intervals: number[]\r\n  }\r\n\r\n  export interface CrossSlope {\r\n    readonly left: number[],\r\n    readonly right: number[],\r\n    readonly intervals: number[]\r\n  }\r\n}",
      "metadata": { "source": "/media/Datas/novorender/docs/node_modules/@novorender/measure-api/index.d.ts", "loc": { "lines": { "from": 574, "to": 601 } } }
    }
  ]
]
